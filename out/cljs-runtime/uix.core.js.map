{"version":3,"sources":["uix/core.cljs"],"mappings":"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","names":["uix.core/built-in-static-method-names","p__29585","map__29586","cljs.core/--destructure-map","cljs.core.get","uix.core/create-class","constructor","getInitialState","render","componentDidMount","componentDidUpdate","componentDidCatch","shouldComponentUpdate","getSnapshotBeforeUpdate","componentWillUnmount","childContextTypes","contextTypes","contextType","getDerivedStateFromProps","getDerivedStateFromError","defaultProps","displayName","fields","methods","uix.lib/map->js","cljs.core.apply","cljs.core/dissoc","static-methods","cljs.core/select-keys","ctor","props","this","js/module$node_modules$react$index.Component","uix.core.goog$module$goog$object.extend","writer","opt","cljs.core/-write","uix.core/create-ref","js/module$node_modules$react$index.createRef","uix.core/glue-args","G__29587","cljs.core.assoc","uix.core/memo-compare-args","a","b","cljs.core._EQ_","var_args","G__29589","uix.core/memo","js/Error","f","uix.core.memo","should-update?","fm","js/module$node_modules$react$index.memo","uix.core/use-state","value","uix.hooks.alpha/use-state","G__29597","uix.core/use-reducer","uix.hooks.alpha.use_reducer","init-state","G__29604","uix.core/use-ref","uix.core.use_ref","ref","uix.hooks.alpha/use-ref","x29608","cljs.core/PROTOCOL_SENTINEL","v","G__29615","G__29616","G__29617","G__29618","G__29619","G__29620","xs","G__29622","uix.core/create-context","js/module$node_modules$react$index.createContext","default-value","uix.core/use-context","context","uix.hooks.alpha/use-context","G__29624","uix.core/use-debug","uix.hooks.alpha.use_debug","fmt","uix.core/use-deferred-value","uix.hooks.alpha/use-deferred-value","uix.core/use-transition","uix.hooks.alpha/use-transition","uix.core/start-transition","js/module$node_modules$react$index.startTransition","uix.core/use-id","uix.hooks.alpha/use-id","G__29626","uix.core/use-sync-external-store","subscribe","get-snapshot","uix.hooks.alpha.use_sync_external_store","get-server-snapshot","p1__29627#","uix.core/as-react","G__29628","cljs_bean.core.bean","uix.core/lazy-shadow-reloadable","loadable","lazy-component","js/module$node_modules$react$index.lazy","_","uix.compiler.alpha/component-element","cljs.core/deref","uix.compiler.attributes/interpret-props","G__29630","uix.core/lazy","component","p__29633","map__29634","uix.core/create-error-boundary","display-name","derive-error-state","did-catch","cljs.core.gensym","render-fn","derive-state","error","state","set-state","new-value","G__29641","G__29642","class","uix.core/forward-ref","ref-comp","js/module$node_modules$react$index.forwardRef","argv","G__29649","cljs.core.merge","cljs.core.dissoc","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","uix.core/clone-element","seq29659","G__29660","cljs.core/first","cljs.core/next","G__29661","self__5754__auto__","element","children","p1__29654#","type","okey","oref","update-children","cljs.core.map","el","G__29670","cljs.core.update","cljs.core/not","oprops","nel","G__29675","cljs.core/seq","cljs.core.into_array","nprops","js/Object.assign","G__29677","uix.core/suspense","js/module$node_modules$react$index.Suspense","uix.core/strict-mode","js/module$node_modules$react$index.StrictMode","uix.core/profiler","js/module$node_modules$react$index.Profiler","uix.core/client?","js/document","uix.core/server?"],"sourcesContent":["(ns uix.core\n  \"Public API\"\n  (:require-macros [uix.core])\n  (:require [goog.object :as gobj]\n            [react]\n            [uix.hooks.alpha :as hooks]\n            [uix.compiler.aot]\n            [uix.lib :refer [doseq-loop map->js]]\n            [cljs-bean.core :as bean]))\n\n(def ^:dynamic *current-component*)\n\n;; React's top-level API\n\n(def ^:private built-in-static-method-names\n  [:childContextTypes :contextTypes :contextType\n   :getDerivedStateFromProps :getDerivedStateFromError])\n\n(defn create-class\n  \"Creates class based React component\"\n  [{:keys [constructor getInitialState render\n           ;; lifecycle methods\n           componentDidMount componentDidUpdate componentDidCatch\n           shouldComponentUpdate getSnapshotBeforeUpdate componentWillUnmount\n           ;; static methods\n           childContextTypes contextTypes contextType\n           getDerivedStateFromProps getDerivedStateFromError\n           ;; class properties\n           defaultProps displayName]\n    :as fields}]\n  (let [methods (map->js (apply dissoc fields :displayName :getInitialState :constructor :render\n                                built-in-static-method-names))\n        static-methods (map->js (select-keys fields built-in-static-method-names))\n        ctor (fn [props]\n               (this-as this\n                        (.apply react/Component this (js-arguments))\n                        (when constructor\n                          (constructor this props))\n                        (when getInitialState\n                          (set! (.-state this) (getInitialState this)))\n                        this))]\n    (gobj/extend (.-prototype ctor) (.-prototype react/Component) methods)\n    (when render (set! (.-render ^js (.-prototype ctor)) render))\n    (gobj/extend ctor react/Component static-methods)\n    (when displayName\n      (set! (.-displayName ctor) displayName)\n      (set! (.-cljs$lang$ctorStr ctor) displayName)\n      (set! (.-cljs$lang$ctorPrWriter ctor)\n            (fn [this writer opt]\n              (-write writer displayName))))\n    (set! (.-cljs$lang$type ctor) true)\n    (set! (.. ctor -prototype -constructor) ctor)\n    (set! (.-uix-component? ctor) true)\n    ctor))\n\n(defn create-ref\n  \"Creates React's ref type object.\"\n  []\n  (react/createRef))\n\n(defn glue-args [^js props]\n  (cond-> (.-argv props)\n    (.-children props) (assoc :children (.-children props))))\n\n(defn- memo-compare-args [a b]\n  (= (glue-args a) (glue-args b)))\n\n(defn memo\n  \"Takes component `f` and optional comparator function `should-update?`\n  that takes previous and next props of the component.\n  Returns memoized `f`.\n\n  When `should-update?` is not provided uses default comparator\n  that compares props with clojure.core/=\"\n  ([f]\n   (memo f memo-compare-args))\n  ([^js f should-update?]\n   (let [fm (react/memo f should-update?)]\n     (when (.-uix-component? f)\n       (set! (.-uix-component? fm) true))\n     fm)))\n\n(defn use-state\n  \"Takes initial value or a function that computes it and returns a stateful value,\n  and a function to update it.\n\n  See: https://reactjs.org/docs/hooks-reference.html#usestate\"\n  [value]\n  (hooks/use-state value))\n\n(defn use-reducer\n  \"An alternative to `use-state`. Accepts a reducer of type (state, action) => new-state,\n  and returns the current state paired with a dispatch method.\n\n  See: https://reactjs.org/docs/hooks-reference.html#usereducer\"\n  ([f value]\n   (hooks/use-reducer f value))\n  ([f value init-state]\n   (hooks/use-reducer f value init-state)))\n\n(defn use-ref\n  \"Takes optional initial value and returns React's ref hook wrapped in atom-like type.\"\n  ([]\n   (use-ref nil))\n  ([value]\n   (let [ref (hooks/use-ref nil)]\n     (when (nil? (.-current ref))\n       (set! (.-current ref)\n             (specify! #js {:current value}\n                       IDeref\n                       (-deref [this]\n                               (.-current this))\n\n                       IReset\n                       (-reset! [this v]\n                                (set! (.-current ^js this) v))\n\n                       ISwap\n                       (-swap!\n                        ([this f]\n                         (set! (.-current ^js this) (f (.-current ^js this))))\n                        ([this f a]\n                         (set! (.-current ^js this) (f (.-current ^js this) a)))\n                        ([this f a b]\n                         (set! (.-current ^js this) (f (.-current ^js this) a b)))\n                        ([this f a b xs]\n                         (set! (.-current ^js this) (apply f (.-current ^js this) a b xs)))))))\n     (.-current ref))))\n\n(defn create-context\n  \"Creates React Context with an optional default value\"\n  ([]\n   (react/createContext))\n  ([default-value]\n   (react/createContext default-value)))\n\n(defn use-context\n  \"Takes React context and returns its current value\"\n  [context]\n  (hooks/use-context context))\n\n(defn use-debug\n  ([v]\n   (hooks/use-debug v))\n  ([v fmt]\n   (hooks/use-debug v fmt)))\n\n(defn use-deferred-value\n  \"Accepts a value and returns a new copy of the value that will defer to more urgent updates.\n  If the current render is the result of an urgent update, like user input,\n  React will return the previous value and then render the new value after the urgent render has completed.\n\n  See: https://reactjs.org/docs/hooks-reference.html#usedeferredvalue\"\n  [v]\n  (hooks/use-deferred-value v))\n\n(defn use-transition\n  \"Returns a stateful value for the pending state of the transition, and a function to start it.\n\n  See: https://reactjs.org/docs/hooks-reference.html#usetransition\"\n  []\n  (hooks/use-transition))\n\n(defn start-transition\n  \"Marks updates in `f` as transitions\n  See: https://reactjs.org/docs/react-api.html#starttransition\"\n  [f]\n  (react/startTransition f))\n\n(defn use-id\n  \"Returns unique ID that is stable across the server and client, while avoiding hydration mismatches.\n\n  See: https://reactjs.org/docs/hooks-reference.html#useid\"\n  []\n  (hooks/use-id))\n\n(defn use-sync-external-store\n  \"For reading and subscribing from external data sources in a way that\u2019s compatible\n  with concurrent rendering features like selective hydration and time slicing.\n\n  subscribe: function to register a callback that is called whenever the store changes\n  get-snapshot: function that returns the current value of the store\n  get-server-snapshot: function that returns the snapshot used during server rendering\n\n  See: https://reactjs.org/docs/hooks-reference.html#usesyncexternalstore\"\n  ([subscribe get-snapshot]\n   (hooks/use-sync-external-store subscribe get-snapshot))\n  ([subscribe get-snapshot get-server-snapshot]\n   (hooks/use-sync-external-store subscribe get-snapshot get-server-snapshot)))\n\n(defn as-react\n  \"Interop with React components. Takes a function that returns UIx component\n  and returns same component wrapped into interop layer.\"\n  [f]\n  #(f (bean/bean %)))\n\n(defn- lazy-shadow-reloadable\n  \"Special case for traditional hot-reloading via shadow-cljs,\n  when UI tree is rendered from the root after evert hot-reload\"\n  [f loadable]\n  (let [lazy-component (react/lazy #(.then (f) (fn [_] #js {:default (fn [props]\n                                                                       (uix.core/$ @loadable (glue-args props)))})))]\n    (set! (.-uix-component? lazy-component) true)\n    lazy-component))\n\n(defn lazy\n  \"Like React.lazy, but supposed to be used with UIx components\"\n  ([f]\n   (let [lazy-component (react/lazy #(.then (f) (fn [component] #js {:default component})))]\n     (set! (.-uix-component? lazy-component) true)\n     lazy-component))\n  ([f loadable]\n   (lazy-shadow-reloadable f loadable)))\n\n(defn create-error-boundary\n  \"Creates React's error boundary component\n\n  display-name       \u2014 the name of the component to be displayed in stack trace\n  derive-error-state \u2014 maps error object to component's state that is used in render-fn\n  did-catch          \u2014 2 arg function for side-effects, logging etc.\n  receives the exception and additional component info as args\n  render-fn          \u2014 takes state value returned from error->state and a vector\n  of arguments passed into error boundary\"\n  [{:keys [display-name derive-error-state did-catch]\n    :or   {display-name (str (gensym \"uix.error-boundary\"))}}\n   render-fn]\n  (let [constructor  (fn [^js/React.Component this _]\n                       (set! (.-state this) #js {:argv nil}))\n        derive-state (fn [error]\n                       #js {:argv (derive-error-state error)})\n        render       (fn []\n                       (this-as ^react/Component this\n                                (let [props     (.-props this)\n                                      state     (.-state this)\n                                      set-state (fn [new-value]\n                                                  (.setState this #js {:argv new-value}))]\n                                  (render-fn [(.-argv state) set-state]\n                                             (glue-args props)))))\n        class        (create-class {:constructor              constructor\n                                    :displayName              display-name\n                                    :getDerivedStateFromError derive-state\n                                    :componentDidCatch        did-catch\n                                    :render                   render})]\n    (set! (.-uix-component? class) true)\n    class))\n\n(defn forward-ref\n  \"Like React's `forwardRef`, but should be used only for UIx components\n  when passing them into React components that inject a ref\"\n  [component]\n  (let [ref-comp\n        (react/forwardRef\n         (fn [props ref]\n           (let [argv (cond-> (.-argv props)\n                        (.-children props) (assoc :children (.-children props))\n                        :always (assoc :ref ref))\n                 argv (merge argv\n                             (-> (bean/bean props)\n                                 (dissoc [:argv :children])))]\n             (uix.core/$ component argv))))]\n    (set! (.-uix-component? ref-comp) true)\n    ref-comp))\n\n(defn clone-element [^js element props & children]\n  (let [type (.-type element)\n        okey (.-key element)\n        oref (.-ref element)\n        update-children #(when %\n                           (map (fn [^js el]\n                                  (when (some-> el .-_store)\n                                    (set! (.. el -_store -validated) true))\n                                  el)\n                                %))\n        children (update-children children)\n        props (update props :children update-children)]\n    (if (or (string? type) (not (.-uix-component? type)))\n      (let [oprops (.-props element)\n            nel (uix.core/$ type (cond-> props (seq children) (assoc :children (into-array children))))\n            nprops (js/Object.assign #js {}  oprops #js {:key okey :ref oref} (.-props nel))]\n        (uix.core/$ type nprops))\n      (let [oprops (.. element -props -argv)]\n        (uix.core/$ type\n          (cond-> oprops\n                  okey (assoc :key okey)\n                  :always (merge props)\n                  (seq children) (assoc :children children)))))))\n\n(def suspense react/Suspense)\n(def strict-mode react/StrictMode)\n(def profiler react/Profiler)\n\n;; SSR helpers\n(def client? (exists? js/document)) ;; cljs can run in a browser or Node.js\n(def server? (not client?))\n"],"x_google_ignoreList":[0]}