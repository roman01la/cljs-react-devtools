{"version":3,"sources":["uix/dom.cljs"],"mappings":";;;AAQA,AAAA;;;;;sBAAA,8BAAAA,pDAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oDAAA,pDAAMD,+DAIFM;AAJJ,AAKG,OAACC,gDAAuBD;;;AAL3B,CAAA,oDAAA,gBAAAJ,pEAAMF,+DAMFM;AANJ,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;cAAAA,VAM6DO;2BAN7D,AAAAL,4CAAAF,eAAA,lFAMiBK;wBANjB,AAAAH,4CAAAF,eAAA,/EAMsCM;AANtC,AAOG,4DAAA,rDAACF,gDAAuBD,6BAA8BE,0CACFC;;;AARvD,CAAA,8CAAA,9CAAMT;;AAAN,AAUA,AAAA;;;;;uBAAA,+BAAAF,tDAAMc;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,mDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAX,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,qDAAA,rDAAMW,gEAIFG,UAAUC;AAJd,AAKG,OAACC,iDAAwBF,UAAUC;;;AALtC,CAAA,qDAAA,6BAAAH,lFAAMD,gEAMFG,UAAUC;AANd,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAAV,4BAAAU;cAAAA,VAM0EJ;2BAN1E,AAAAL,4CAAAS,eAAA,lFAM8BN;wBAN9B,AAAAH,4CAAAS,eAAA,/EAMmDL;AANnD,AAOG,0EAAA,nEAACQ,iDAAwBF,UAAUC,gCAAiCR,0CACFC;;;AARrE,CAAA,+CAAA,/CAAMG;;AAAN,AAUA;;;sBAAA,tBAAMM,oDAEHF,QAAyBG;AAF5B,AAGE,OAASA,YAAKH;;AAEhB;;;uBAAA,vBAAMI,sDAEcD;AAFpB,AAGE,OAAUA;;AAEZ;;;iBAAA,jBAAME,0CAEHL,QAAQV;AAFX,AAGE,OAACgB,2CAAYN,QAAQV;;AAEvB;;;kBAAA,lBAAMiB,4CAEHP,QAAQV;AAFX,AAGE,OAACkB,4CAAaR,QAAQV;;AAExB;;;;;;qBAAA,rBAAMmB,kDAKHC;AALH,AAME,OAACC,8CAAeD;;AAElB,0BAAA,1BAAME,4DAAiBC;AAAvB,AACE,OAACC,4DAA6BD;;AAEhC;;;0BAAA,1BAAME,4DAEHzB;AAFH,AAGE,OAAC0B,2DAA4B1B;;AAE/B;;;;;wBAAA,xBAAM2B,wDAIHC;AAJH,AAKE,OAACC,gDAAiBD;;AAEpB,AAAA;;;;;;wBAAA,gCAAApC,xDAAMuC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAApC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,sDAAA,tDAAMoC,iEAKFC,MAAMhC;AALV,AAMG,OAACiC,iDAAkBD,MAAMhC;;;AAN5B,CAAA,sDAAA,tDAAM+B,iEAOFC,MAAMhC,KAAKkC;AAPf,AAQG,OAACD,iDAAkBD,MAAMhC,KAAKkC;;;AARjC,CAAA,gDAAA,hDAAMH;;AAAN","names":["var_args","G__28762","uix.dom/create-root","js/Error","p__28768","map__28769","cljs.core/--destructure-map","cljs.core.get","node","js/module$node_modules$react_dom$client.createRoot","on-recoverable-error","identifier-prefix","options","G__28787","uix.dom/hydrate-root","p__28797","map__28798","container","element","js/module$node_modules$react_dom$client.hydrateRoot","uix.dom/render-root","root","uix.dom/unmount-root","uix.dom/render","js/module$node_modules$react_dom$index.render","uix.dom/hydrate","js/module$node_modules$react_dom$index.hydrate","uix.dom/flush-sync","callback","js/module$node_modules$react_dom$index.flushSync","uix.dom/batched-updates","f","js/module$node_modules$react_dom$index.unstable_batchedUpdates","uix.dom/unmount-at-node","js/module$node_modules$react_dom$index.unmountComponentAtNode","uix.dom/find-dom-node","component","js/module$node_modules$react_dom$index.findDOMNode","G__28833","uix.dom/create-portal","child","js/module$node_modules$react_dom$index.createPortal","key"],"sourcesContent":["(ns uix.dom\n  \"Public API\"\n  (:require-macros [uix.dom.linter])\n  (:require [\"react-dom/client\" :as rdom-client]\n            [react-dom :as rdom]))\n\n;; react-dom top-level API\n\n(defn create-root\n  \"Create a React root for the supplied container and return the root.\n\n  See: https://reactjs.org/docs/react-dom-client.html#createroot\"\n  ([node]\n   (rdom-client/createRoot node))\n  ([node {:keys [on-recoverable-error identifier-prefix] :as options}]\n   (rdom-client/createRoot node #js {:onRecoverableError on-recoverable-error\n                                     :identifierPrefix identifier-prefix})))\n\n(defn hydrate-root\n  \"Same as `create-root`, but is used to hydrate a container whose HTML contents were rendered by ReactDOMServer.\n\n  See: https://reactjs.org/docs/react-dom-client.html#hydrateroot\"\n  ([container element]\n   (rdom-client/hydrateRoot container element))\n  ([container element {:keys [on-recoverable-error identifier-prefix] :as options}]\n   (rdom-client/hydrateRoot container element #js {:onRecoverableError on-recoverable-error\n                                                   :identifierPrefix identifier-prefix})))\n\n(defn render-root\n  \"Renders React root into the DOM node.\"\n  [element ^js/ReactDOMRoot root]\n  (.render root element))\n\n(defn unmount-root\n  \"Remove a mounted React root from the DOM and clean up its event handlers and state.\"\n  [^js/ReactDOMRoot root]\n  (.unmount root))\n\n(defn render\n  \"DEPRECATED: Renders element into DOM node. The first argument is React element.\"\n  [element node]\n  (rdom/render element node))\n\n(defn hydrate\n  \"DEPRECATED: Hydrates server rendered document at `node` with `element`.\"\n  [element node]\n  (rdom/hydrate element node))\n\n(defn flush-sync\n  \"Force React to flush any updates inside the provided callback synchronously.\n  This ensures that the DOM is updated immediately.\n\n  See: https://reactjs.org/docs/react-dom.html#flushsync\"\n  [callback]\n  (rdom/flushSync callback))\n\n(defn batched-updates [f]\n  (rdom/unstable_batchedUpdates f))\n\n(defn unmount-at-node\n  \"Unmounts React component rendered into DOM node\"\n  [node]\n  (rdom/unmountComponentAtNode node))\n\n(defn find-dom-node\n  \"If this component has been mounted into the DOM, this returns the corresponding native browser DOM element.\n\n  See: https://reactjs.org/docs/react-dom.html#finddomnode\"\n  [component]\n  (rdom/findDOMNode component))\n\n(defn create-portal\n  \"Creates a portal. Portals provide a way to render children into a DOM node\n  that exists outside the hierarchy of the DOM component.\n\n  See: https://reactjs.org/docs/react-dom.html#createportal\"\n  ([child node]\n   (rdom/createPortal child node))\n  ([child node key]\n   (rdom/createPortal child node key)))\n"],"x_google_ignoreList":[0]}