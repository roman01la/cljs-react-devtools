{"version":3,"sources":["re_frame/interceptor.cljc"],"mappings":"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","names":["re-frame.interceptor/mandatory-interceptor-keys","re-frame.interceptor/optional-interceptor-keys","re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_","cljs.core/keys","cljs.core/set","clojure.set.difference","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","re-frame.interceptor/->interceptor","p__40999","map__41000","cljs.core/--destructure-map","cljs.core.get","seq40992","self__5755__auto__","cljs.core/seq","id","comment","before","after","re-frame.interop/debug-enabled?","temp__5821__auto__","unknown-keys","re_frame.loggers.console","G__41004","or__5045__auto__","cljs.core.assoc","G__41009","re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in","not-found","re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","re-frame.interceptor/update-effect","seq41012","G__41013","cljs.core/first","cljs.core/next","G__41014","G__41015","self__5754__auto__","f","args","cljs.core.apply","cljs.core/update-in","G__41019","re-frame.interceptor/get-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.interceptor/update-coeffect","seq41020","G__41021","G__41022","G__41023","re-frame.interceptor/exception->ex-info","e","interceptor","direction","cljs.core.ex_info","cljs.core/ex-message","p__41028","map__41029","re-frame.interceptor/invoke-interceptor-fn","original-exception?","cljs.core/not","e41030","re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core/pop","cljs.core.conj","re-frame.interceptor/enqueue","interceptors","cljs.core.update","cljs.core.fnil","cljs.core/into","re-frame.interop/empty-queue","G__41034","re-frame.interceptor/context","event","db","re_frame.interceptor.context","re-frame.interceptor/change-direction","cljs.core.dissoc","re-frame.interceptor/execute*","ctx","re-frame.interceptor/merge-ex-data","seq41038","G__41039","ms","cljs.core/merge","cljs.core/ex-data","cljs.core/ex-cause","re-frame.interceptor/default-error-handler","original-error","re-frame-error","map__41047","event-v","event-handler?","fexpr__41048","re-frame.loggers/console","cljs.core.map","cljs.core/str","cljs.core.pr_str","re-frame.interceptor/execute","error-handler","re_frame.registrar.get_handler","re-frame.trace/is-trace-enabled?","new-trace__40906__auto__","cljs.core.merge","re-frame.trace/*current-trace*","e41049","G__41050","G__41051","re_frame.interceptor.merge_ex_data"],"sourcesContent":["(ns re-frame.interceptor\n  (:require\n   [re-frame.loggers :refer [console]]\n   [re-frame.interop :refer [empty-queue debug-enabled?]]\n   [re-frame.trace :as trace :include-macros true]\n   [re-frame.registrar :as registrar]\n   [re-frame.utils :as u]\n   [clojure.set :as set]))\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(def optional-interceptor-keys #{:comment})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys\n          (-> m keys set (set/difference optional-interceptor-keys)))))\n\n(defn ->interceptor\n  [& {:as m :keys [id comment before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys\n                                optional-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  (cond-> {:id     (or id :unnamed)\n           :before before\n           :after  after}\n    comment (assoc :comment comment)))\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n(defn- exception->ex-info [e interceptor direction]\n  (ex-info (str \"Interceptor Exception: \" #?(:clj (.getMessage e) :cljs (ex-message e)))\n           {:direction direction\n            :interceptor (:id interceptor)}\n           e))\n\n(defn- invoke-interceptor-fn\n  [{::keys [original-exception?] :as context} interceptor direction]\n  (let [f (get interceptor direction)]\n    (cond\n      (not f) context\n      original-exception? (f context)\n      :else\n      (try\n        (f context)\n        (catch #?(:clj Exception :cljs :default) e\n          (throw (exception->ex-info e interceptor direction)))))))\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n(defn enqueue\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n   (-> {}\n       (assoc-coeffect :event event)\n      ;; Some interceptors, like `trim-v` and `unwrap`, alter event so capture\n      ;; the original for use cases such as tracing.\n       (assoc-coeffect :original-event event)\n       (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n(defn execute*\n  [ctx]\n  (-> ctx\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n\n(defn- merge-ex-data [e & ms]\n  (ex-info #?(:clj (.getMessage e) :cljs (ex-message e))\n           (apply merge (ex-data e) ms)\n           #?(:clj (.getCause e) :cljs (ex-cause e))))\n\n(defn default-error-handler [original-error re-frame-error]\n  (let [{:keys [event-v direction interceptor]} (ex-data re-frame-error)\n        event-handler? (#{:db-handler :fx-handler :ctx-handler} interceptor)]\n    (apply console :error\n           \"An error occured while handling the re-frame event:\"\n           (str event-v)\n           \"\\n\"\n           (map str\n                (if event-handler?\n                  [\"Within the\" (first event-v) \"event handler function.\"]\n                  [\"Within the\" direction \"phase of the\" (pr-str interceptor) \"interceptor.\"])))\n    (throw original-error)))\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :fx  [:dispatch [:an-event-id :param1]]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (let [ctx (context event-v interceptors)\n        error-handler (registrar/get-handler :error :event-handler)]\n    (trace/merge-trace!\n     {:tags {:interceptors interceptors}})\n    (if-not error-handler\n      (execute* (assoc ctx ::original-exception? true))\n      (try\n        (execute* ctx)\n        (catch #?(:clj Exception :cljs :default) e\n          (error-handler (ex-cause e)\n                         (merge-ex-data e {:event-v event-v})))))))\n"],"x_google_ignoreList":[0]}