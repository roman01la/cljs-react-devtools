{"version":3,"sources":["re_frame/fx.cljc"],"mappings":"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","names":["re-frame.fx/kind","js/Error","re-frame.registrar/kinds","re-frame.fx/reg-fx","id","handler","re-frame.registrar/register-handler","re-frame.fx/do-fx","re_frame.interceptor.__GT_interceptor","context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__41272","re-frame.trace/*current-trace*","*current-trace*-temp-val__41273","re-frame.trace/start-trace","end__40904__auto__","re-frame.interop/now","duration__40905__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","effects","effects-without-db","cljs.core.dissoc","temp__5823__auto__","new-db","fexpr__41274","fexpr__41307","re_frame.registrar.get_handler","seq__41275","cljs.core/seq","chunk__41276","count__41277","i__41278","vec__41301","cljs.core.nth","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__41304","cljs.core/first","cljs.core/next","seq__41308","chunk__41309","count__41310","i__41311","vec__41318","vec__41321","effect-key","effect-value","temp__5821__auto__","effect-fn","re_frame.loggers.console","cljs.core._EQ_","p__41324","map__41325","cljs.core/--destructure-map","cljs.core.get","re-frame.fx/dispatch-later","ms","dispatch","effect","cljs.core/empty?","re-frame.interop/set-timeout!","re-frame.router/dispatch","value","cljs.core/map?","seq__41326","chunk__41327","count__41328","i__41329","cljs.core.remove","cljs.core/nil?","seq-of-effects","cljs.core/sequential?","cljs.core/type","seq__41330","chunk__41331","count__41332","i__41333","vec__41340","vec__41343","cljs.core/vector?","seq__41346","chunk__41347","count__41348","i__41349","event","clear-event","cljs.core.partial","re-frame.registrar/clear-handlers","re-frame.events/kind","seq__41350","chunk__41351","count__41352","i__41353","cljs.core/deref","re-frame.db/app-db","cljs.core/reset!","*current-trace*-orig-val__41354","*current-trace*-temp-val__41355"],"sourcesContent":["(ns re-frame.fx\n  (:require\n   [re-frame.router      :as router]\n   [re-frame.db          :refer [app-db]]\n   [re-frame.interceptor :refer [->interceptor]]\n   [re-frame.interop     :refer [set-timeout!]]\n   [re-frame.events      :as events]\n   [re-frame.registrar   :refer [get-handler clear-handlers register-handler]]\n   [re-frame.loggers     :refer [console]]\n   [re-frame.trace :as trace :include-macros true]))\n\n;; -- Registration ------------------------------------------------------------\n\n(def kind :fx)\n(assert (re-frame.registrar/kinds kind))\n\n(defn reg-fx\n  [id handler]\n  (register-handler kind id handler))\n\n;; -- Interceptor -------------------------------------------------------------\n\n(def do-fx\n  \"An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \\\"set flag\\\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed, other than that\n  `:db` is guaranteed to be executed first.\"\n  (->interceptor\n   :id :do-fx\n   :after (fn do-fx-after\n            [context]\n            (trace/with-trace\n              {:op-type :event/do-fx}\n              (let [effects            (:effects context)\n                    effects-without-db (dissoc effects :db)]\n                 ;; :db effect is guaranteed to be handled before all other effects.\n                (when-let [new-db (:db effects)]\n                  ((get-handler kind :db false) new-db))\n                (doseq [[effect-key effect-value] effects-without-db]\n                  (if-let [effect-fn (get-handler kind effect-key false)]\n                    (effect-fn effect-value)\n                    (console :warn\n                             \"re-frame: no handler registered for effect:\"\n                             effect-key\n                             \". Ignoring.\"\n                             (when (= :event effect-key)\n                               (str \"You may be trying to return a coeffect map from an event-fx handler. \"\n                                    \"See https://day8.github.io/re-frame/use-cofx-as-fx/\"))))))))))\n\n;; -- Builtin Effect Handlers  ------------------------------------------------\n\n;; :dispatch-later\n;;\n;; `dispatch` one or more events after given delays. Expects a collection\n;; of maps with two keys:  :`ms` and `:dispatch`\n;;\n;; usage:\n;;\n;;    {:dispatch-later [{:ms 200 :dispatch [:event-id \"param\"]}    ;;  in 200ms do this: (dispatch [:event-id \"param\"])\n;;                      {:ms 100 :dispatch [:also :this :in :100ms]}]}\n;;\n;; Note: nil entries in the collection are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-later [ (when (> 3 5) {:ms 200 :dispatch [:conditioned-out]})\n;;                       {:ms 100 :dispatch [:another-one]}]}\n;;\n(defn dispatch-later\n  [{:keys [ms dispatch] :as effect}]\n  (if (or (empty? dispatch) (not (number? ms)))\n    (console :error \"re-frame: ignoring bad :dispatch-later value:\" effect)\n    (set-timeout! #(router/dispatch dispatch) ms)))\n\n(reg-fx\n :dispatch-later\n (fn [value]\n   (if (map? value)\n     (dispatch-later value)\n     (doseq [effect (remove nil? value)]\n       (dispatch-later effect)))))\n\n;; :fx\n;;\n;; Handle one or more effects. Expects a collection of vectors (tuples) of the\n;; form [effect-key effect-value]. `nil` entries in the collection are ignored\n;; so effects can be added conditionally.\n;;\n;; usage:\n;;\n;; {:fx [[:dispatch [:event-id \"param\"]]\n;;       nil\n;;       [:http-xhrio {:method :post\n;;                     ...}]]}\n;;\n\n(reg-fx\n :fx\n (fn [seq-of-effects]\n   (if-not (sequential? seq-of-effects)\n     (console :warn \"re-frame: \\\":fx\\\" effect expects a seq, but was given \" (type seq-of-effects))\n     (doseq [[effect-key effect-value] (remove nil? seq-of-effects)]\n       (when (= :db effect-key)\n         (console :warn \"re-frame: \\\":fx\\\" effect should not contain a :db effect\"))\n       (if-let [effect-fn (get-handler kind effect-key false)]\n         (effect-fn effect-value)\n         (console :warn \"re-frame: in \\\":fx\\\" effect found \" effect-key \" which has no associated handler. Ignoring.\"))))))\n\n;; :dispatch\n;;\n;; `dispatch` one event. Expects a single vector.\n;;\n;; usage:\n;;   {:dispatch [:event-id \"param\"] }\n\n(reg-fx\n :dispatch\n (fn [value]\n   (if-not (vector? value)\n     (console :error \"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\" value)\n     (router/dispatch value))))\n\n;; :dispatch-n\n;;\n;; `dispatch` more than one event. Expects a list or vector of events. Something for which\n;; sequential? returns true.\n;;\n;; usage:\n;;   {:dispatch-n (list [:do :all] [:three :of] [:these])}\n;;\n;; Note: nil events are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-n (list (when (> 3 5) [:conditioned-out])\n;;                       [:another-one])}\n;;\n(reg-fx\n :dispatch-n\n (fn [value]\n   (if-not (sequential? value)\n     (console :error \"re-frame: ignoring bad :dispatch-n value. Expected a collection, but got:\" value)\n     (doseq [event (remove nil? value)] (router/dispatch event)))))\n\n;; :deregister-event-handler\n;;\n;; removes a previously registered event handler. Expects either a single id (\n;; typically a namespaced keyword), or a seq of ids.\n;;\n;; usage:\n;;   {:deregister-event-handler :my-id)}\n;; or:\n;;   {:deregister-event-handler [:one-id :another-id]}\n;;\n(reg-fx\n :deregister-event-handler\n (fn [value]\n   (let [clear-event (partial clear-handlers events/kind)]\n     (if (sequential? value)\n       (doseq [event value] (clear-event event))\n       (clear-event value)))))\n\n;; :db\n;;\n;; reset! app-db with a new value. `value` is expected to be a map.\n;;\n;; usage:\n;;   {:db  {:key1 value1 key2 value2}}\n;;\n(reg-fx\n :db\n (fn [value]\n   (if-not (identical? @app-db value)\n     (reset! app-db value)\n     (trace/with-trace {:op-type :reagent/quiescent}))))\n\n"],"x_google_ignoreList":[0]}