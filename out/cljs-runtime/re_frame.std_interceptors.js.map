{"version":3,"sources":["re_frame/std_interceptors.cljc"],"mappings":"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","names":["re-frame.std-interceptors/debug","re_frame.interceptor.__GT_interceptor","context","re_frame.loggers.console","re_frame.interceptor.get_coeffect","event","orig-db","new-db","re_frame.interceptor.get_effect","cljs.core._EQ_","vec__41192","cljs.core.nth","only-before","only-after","clojure.data/diff","db-changed?","re-frame.loggers/console","re-frame.std-interceptors/unwrap","vec__41196","_","payload","cljs.core/count","cljs.core/map?","cljs.core.ex_info","re-frame.interceptor/assoc-coeffect","re-frame.std-interceptors/trim-v","cljs.core/vector?","cljs.core/type","re_frame.interceptor.update_coeffect","cljs.core/subvec","re-frame.std-interceptors/db-handler->interceptor","handler-fn","new-context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__41199","re-frame.trace/*current-trace*","*current-trace*-temp-val__41200","re-frame.trace/start-trace","end__40904__auto__","re-frame.interop/now","duration__40905__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","map__41201","cljs.core/--destructure-map","cljs.core.get","map__41202","db","re-frame.interceptor/assoc-effect","new-trace__40906__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","re-frame.std-interceptors/fx-handler->interceptor","*current-trace*-orig-val__41203","*current-trace*-temp-val__41204","map__41205","map__41206","coeffects","re-frame.std-interceptors/ctx-handler->interceptor","*current-trace*-orig-val__41207","*current-trace*-temp-val__41208","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","re-frame.std-interceptors/path","seq41209","self__5755__auto__","cljs.core/seq","args","path","cljs.core/flatten","history-key","cljs.core/empty?","original-db","cljs.core.get_in","db-store","cljs.core/peek","new-db-store","cljs.core/pop","context'","cljs.core/assoc-in","re-frame.std-interceptors/enrich","f","prev-db","cljs.core/contains?","or__5045__auto__","re-frame.std-interceptors/after","re-frame.std-interceptors/on-changes","seq41223","G__41224","cljs.core/first","cljs.core/next","G__41225","self__5754__auto__","out-path","in-paths","old-db","new-ins","p1__41217#","cljs.core.map","old-ins","p1__41218#","changed-ins?","and__5043__auto__","cljs.core/some","cljs.core/false?","cljs.core/identical?","cljs.core.apply","re-frame.std-interceptors/inject-global-interceptors","p1__41227#","cljs.core.into","re-frame.settings/get-global-interceptors"],"sourcesContent":["(ns re-frame.std-interceptors\n  \"contains re-frame supplied, standard interceptors\"\n  (:require\n   [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect update-coeffect]]\n   [re-frame.loggers :refer [console]]\n   [re-frame.settings :as settings]\n   [re-frame.db :refer [app-db]]\n   [clojure.data :as data]\n   [re-frame.cofx :as cofx]\n   [re-frame.utils :as utils]\n   [re-frame.trace :as trace :include-macros true]\n   [re-frame.interceptor :as interceptor]))\n\n(def debug\n  (->interceptor\n   :id     :debug\n   :before (fn debug-before\n             [context]\n             (console :log \"Handling re-frame event:\" (get-coeffect context :event))\n             context)\n   :after  (fn debug-after\n             [context]\n             (let [event   (get-coeffect context :event)\n                   orig-db (get-coeffect context :db)\n                   new-db  (get-effect   context :db ::not-found)]\n               (if (= new-db ::not-found)\n                 (console :log \"No app-db changes in:\" event)\n                 (let [[only-before only-after] (data/diff orig-db new-db)\n                       db-changed?    (or (some? only-before) (some? only-after))]\n                   (if db-changed?\n                     (do (console :group \"db clojure.data/diff for:\" event)\n                         (console :log \"only before:\" only-before)\n                         (console :log \"only after :\" only-after)\n                         (console :groupEnd))\n                     (console :log \"No app-db changes resulted from:\" event))))\n               context))))\n\n(def unwrap\n  (->interceptor\n   :id      :unwrap\n   :before  (fn unwrap-before\n              [context]\n              (let [[_ payload :as event] (get-coeffect context :event)]\n                (if-not (and (= 2 (count event))\n                             (map? payload))\n                  (throw (ex-info\n                          \"re-frame: \\\"unwrap\\\" interceptor must be a vector of two elements \\\"[event-id payload-map]\\\"\"\n                          event))\n                  (assoc-coeffect context :event payload))))\n   :after   (fn unwrap-after\n              [context]\n              (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n(def trim-v\n  (->interceptor\n   :id      :trim-v\n   :before  (fn trim-v-before\n              [context]\n              (if-not (vector? (get-coeffect context :event))\n                (do\n                  (console :warn \"re-frame: \\\"trim-v\\\" interceptor expected event to be a vector. Got a \" (type (get-coeffect context :event)))\n                  context)\n                (update-coeffect context :event subvec 1)))\n   :after   (fn trim-v-after\n              [context]\n              (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n;; -- Interceptor Factories - PART 1 ---------------------------------------------------------------\n;;\n;; These 3 factories wrap the 3 kinds of event handlers.\n;;\n\n(defn db-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`\"\n  [handler-fn]\n  (->interceptor\n   :id     :db-handler\n   :before (fn db-handler-before\n             [context]\n             (let [new-context\n                   (trace/with-trace\n                     {:op-type   :event/handler\n                      :operation (get-coeffect context :original-event)}\n                     (let [{:keys [db event]} (get-coeffect context)]\n                       (->> (handler-fn db event)\n                            (assoc-effect context :db))))]\n                ;; We merge these tags outside of the :event/handler trace because we want them to be assigned to the parent\n                ;; wrapping trace.\n               (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n               new-context))))\n\n(defn fx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :fx ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`\"\n  [handler-fn]\n  (->interceptor\n   :id     :fx-handler\n   :before (fn fx-handler-before\n             [context]\n             (let [new-context\n                   (trace/with-trace\n                     {:op-type   :event/handler\n                      :operation (get-coeffect context :original-event)}\n                     (let [{:keys [event] :as coeffects} (get-coeffect context)]\n                       (->> (handler-fn coeffects event)\n                            (assoc context :effects))))]\n               (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n               new-context))))\n\n(defn ctx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))\"\n  [handler-fn]\n  (->interceptor\n   :id     :ctx-handler\n   :before (fn ctx-handler-before\n             [context]\n             (let [new-context\n                   (trace/with-trace\n                     {:op-type   :event/handler\n                      :operation (get-coeffect context :original-event)}\n                     (handler-fn context))]\n               (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n               new-context))))\n\n;; -- Interceptors Factories -  PART 2 ------------------------------------------------------------\n\n(defn path\n  [& args]\n  (let [path (flatten args)\n        history-key :re-frame.db/path-history]    ;; this is where, within `context`, we store the original dbs\n    (when (empty? path)\n      (console :error \"re-frame: \\\"path\\\" interceptor given no params\"))\n    (->interceptor\n     :id      :path\n     :comment {:re-frame.db/path path}\n     :before  (fn\n                [context]\n                (let [original-db (get-coeffect context :db)]\n                  (-> context\n                      (update history-key conj original-db)\n                      (assoc-coeffect :db (get-in original-db path)))))\n     :after   (fn [context]\n                (let [db-store     (history-key context)\n                      original-db  (peek db-store)\n                      new-db-store (pop db-store)\n                      context'     (-> (assoc context history-key new-db-store)\n                                       (assoc-coeffect :db original-db))     ;; put the original db back so that things like debug work later on\n                      db           (get-effect context :db ::not-found)]\n                  (if (= db ::not-found)\n                    context'\n                    (->> (assoc-in original-db path db)\n                         (assoc-effect context' :db))))))))\n\n(defn enrich\n  [f]\n  (->interceptor\n   :id :enrich\n   :after (fn enrich-after\n            [context]\n            (let [event   (get-coeffect context :event)\n                  prev-db (if (contains? (get-effect context) :db)\n                            (get-effect context :db) ;; If no db effect is returned, we provide the original coeffect.\n                            (get-coeffect context :db))\n                  new-db  (f prev-db event)]\n              (assoc-effect context :db (or new-db prev-db)))))) ;; If the enriched db is nil, use the last known good db\n\n(defn after\n  [f]\n  (->interceptor\n   :id :after\n   :after (fn after-after\n            [context]\n            (let [db    (if (contains? (get-effect context) :db)\n                          (get-effect context :db)\n                          (get-coeffect context :db))\n                  event (get-coeffect context :event)]\n              (f db event) ;; call f for side effects\n              context)))) ;; context is unchanged\n\n(defn  on-changes\n  [f out-path & in-paths]\n  (->interceptor\n   :id    :on-changes\n   :after (fn on-change-after\n            [context]\n            (let [new-db   (get-effect context :db)\n                  old-db   (get-coeffect context :db)\n\n                   ;; work out if any \"inputs\" have changed\n                  new-ins      (map #(get-in new-db %) in-paths)\n                  old-ins      (map #(get-in old-db %) in-paths)\n                   ;; make sure the db is actually set in the effect\n                  changed-ins? (and (contains? (get-effect context) :db)\n                                    (some false? (map identical? new-ins old-ins)))]\n\n               ;; if one of the inputs has changed, then run 'f'\n              (if changed-ins?\n                (->> (apply f new-ins)\n                     (assoc-in new-db out-path)\n                     (assoc-effect context :db))\n                context)))))\n\n(def inject-global-interceptors\n  \"An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\"\n  (->interceptor\n   :id     :inject-global-interceptors\n   :before (fn inject-global-interceptors-before\n             [context]\n             (update context :queue #(into (settings/get-global-interceptors) %)))))\n"],"x_google_ignoreList":[0]}