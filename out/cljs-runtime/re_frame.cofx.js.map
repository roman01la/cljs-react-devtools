{"version":3,"sources":["re_frame/cofx.cljc"],"mappings":";AASA,qBAAA,rBAAKA;AACL,oBAAQ,CAACE,yDAAAA,6EAAAA,tBAAyBF,0DAAAA;AAAlC;AAAA,AAAA,MAAA,KAAAC,MAAA;;AAEA,yBAAA,zBAAME,0DACHC,GAAGC;AADN,AAEE,OAACC,oCAAiBN,mBAAKI,GAAGC;;AAI5B,AAAA,4BAAA,oCAAAE,hEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAR,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0DAAA,1DAAMQ,qEACFL;AADJ,AAEG,oIAAA,kDAAA,8DAAA,7OAACM,uSAES,yCACGC;AADH,AAEE,IAAAC,qBAAiB,AAACC,6DAAYb,mBAAKI;AAAnC,AAAA,oBAAAQ;AAAA,cAAAA,VAASP;AAAT,AACE,8DAAA,vDAACS,+CAAOH,sEAAmBN;;AAC3B,qEAAA,yGAAA,vKAACU,wMAAgDX;;;;;AARlE,CAAA,0DAAA,1DAAMK,qEASFL,GAAGY;AATP,AAUG,oIAAA,kDAAA,8DAAA,7OAACN,uSAES,yCACGC;AADH,AAEE,IAAAC,qBAAiB,AAACC,6DAAYb,mBAAKI;AAAnC,AAAA,oBAAAQ;AAAA,cAAAA,VAASP;AAAT,AACE,8DAAA,vDAACS,+CAAOH,sEAAmBN,QAAQW;;AACnC,qEAAA,yGAAA,vKAACD,wMAAgDX;;;;;AAhBlE,CAAA,oDAAA,pDAAMK;;AAAN,AAuBA,uBAAA,vBAACN,uEAEA,6CACGc;AADH,AAEE,+DAAA,gDAAA,AAAAC,xGAACC,8CAAMF,0EAAeG;;AAGzB,AAAKC,0BAAU,wDAAA,xDAACC","names":["re-frame.cofx/kind","js/Error","re-frame.registrar/kinds","re-frame.cofx/reg-cofx","id","handler","re-frame.registrar/register-handler","var_args","G__41143","re-frame.cofx/inject-cofx","re_frame.interceptor.__GT_interceptor","context","temp__5821__auto__","re_frame.registrar.get_handler","cljs.core.update","re_frame.loggers.console","value","coeffects","cljs.core/deref","cljs.core.assoc","re-frame.db/app-db","re-frame.cofx/inject-db","re_frame.cofx.inject_cofx"],"sourcesContent":["(ns re-frame.cofx\n  (:require\n   [re-frame.db           :refer [app-db]]\n   [re-frame.interceptor  :refer [->interceptor]]\n   [re-frame.registrar    :refer [get-handler register-handler]]\n   [re-frame.loggers      :refer [console]]))\n\n;; -- Registration ------------------------------------------------------------\n\n(def kind :cofx)\n(assert (re-frame.registrar/kinds kind))\n\n(defn reg-cofx\n  [id handler]\n  (register-handler kind id handler))\n\n;; -- Interceptor -------------------------------------------------------------\n\n(defn inject-cofx\n  ([id]\n   (->interceptor\n    :id      :coeffects\n    :before  (fn coeffects-before\n               [context]\n               (if-let [handler (get-handler kind id)]\n                 (update context :coeffects handler)\n                 (console :error \"No cofx handler registered for\" id)))))\n  ([id value]\n   (->interceptor\n    :id     :coeffects\n    :before  (fn coeffects-before\n               [context]\n               (if-let [handler (get-handler kind id)]\n                 (update context :coeffects handler value)\n                 (console :error \"No cofx handler registered for\" id))))))\n\n;; -- Builtin CoEffects Handlers  ---------------------------------------------\n\n;; :db\n;;\n;; Adds to coeffects the value in `app-db`, under the key `:db`\n(reg-cofx\n :db\n (fn db-coeffects-handler\n   [coeffects]\n   (assoc coeffects :db @app-db)))\n\n;; Because this interceptor is used so much, we reify it\n(def inject-db (inject-cofx :db))\n\n\n"],"x_google_ignoreList":[0]}