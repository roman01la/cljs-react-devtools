{"version":3,"sources":["re_frame/subs.cljc"],"mappings":"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","names":["re-frame.subs/kind","js/Error","re-frame.registrar/kinds","re-frame.subs/query->reaction","cljs.core.atom","re-frame.subs/clear-subscription-cache!","seq__40988","cljs.core/seq","cljs.core/deref","chunk__40989","count__40990","i__40991","vec__41001","cljs.core.nth","temp__5823__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__41005","cljs.core/first","cljs.core/next","k","rxn","re-frame.interop/dispose!","cljs.core/not-empty","re_frame.loggers.console","re-frame.subs/clear-all-handlers!","re_frame.registrar.clear_handlers","re-frame.subs/cache-and-return","query-v","dynv","r","cache-key","re-frame.interop/add-on-dispose!","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__41010","re-frame.trace/*current-trace*","*current-trace*-temp-val__41011","re-frame.trace/start-trace","end__40904__auto__","re-frame.interop/now","duration__40905__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","re-frame.utils/first-in-vector","re-frame.interop/reagent-id","query-cache","cljs.core/contains?","cljs.core.get","cljs.core.dissoc","re-frame.interop/debug-enabled?","new-trace__40906__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","var_args","G__41018","re-frame.subs/cache-lookup","re_frame.subs.cache_lookup","dyn-v","re-frame.subs/warn-when-not-reactive","re-frame.interop/reactive?","G__41025","re-frame.subs/subscribe","query","*current-trace*-orig-val__41026","*current-trace*-temp-val__41027","temp__5821__auto__","cached","query-id","handler-fn","re_frame.registrar.get_handler","re-frame.db/app-db","*current-trace*-orig-val__41031","*current-trace*-temp-val__41032","not-reactive","cljs.core.remove","re-frame.interop/ratom?","dyn-vals","re-frame.interop/make-reaction","cljs.core.mapv","sub","G__41035","G__41036","G__41037","G__41040","G__41041","G__41042","re-frame.subs/map-vals","f","m","cljs.core.into","cljs.core/empty","cljs.core.map","p__41043","vec__41044","v","re-frame.subs/map-signals","signals","cljs.core/sequential?","cljs.core/map?","re-frame.interop/deref?","re-frame.subs/to-seq","x","cljs.core/List","re-frame.subs/deref-input-signals","dereffed-signals","cljs.core.doall","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","re-frame.subs/sugar","seq41052","G__41053","G__41054","G__41055","self__5754__auto__","sub-fn","query?","args","vec__41059","vec__41062","error-header","op","comp-f","cljs.core/take-last","input-args","computation-fn","or__5045__auto__","cljs.core._EQ_","cljs.core/fn?","cljs.core/butlast","cljs.core/last","cljs.core.drop_last","G__41067","cljs.core/Keyword","db","_","q","vec__41069","seq__41070","first__41071","qs","cljs.core.apply","inputs-fn","G__41073","vec__41076","marker","vec","pairs","cljs.core.partition","markers","vecs","cljs.core/second","cljs.core/every?","re-frame.subs/reg-sub","seq41084","G__41085","vec__41090","cljs.core/vector?","re-frame.registrar/register-handler","query-vec","subscriptions","reaction-id","reaction","*current-trace*-orig-val__41093","*current-trace*-temp-val__41094","subscription","G__41096","G__41097","G__41098","G__41099","cljs.core/reset!","dyn-vec","*current-trace*-orig-val__41100","*current-trace*-temp-val__41101","G__41103","G__41104","G__41105","G__41106","G__41107","G__41108"],"sourcesContent":["(ns re-frame.subs\n  (:require\n   [re-frame.db        :refer [app-db]]\n   [re-frame.interop   :refer [add-on-dispose! debug-enabled? make-reaction ratom? deref? dispose! reagent-id reactive?]]\n   [re-frame.loggers   :refer [console]]\n   [re-frame.utils     :refer [first-in-vector]]\n   [re-frame.registrar :refer [get-handler clear-handlers register-handler]]\n   [re-frame.trace     :as trace :include-macros true]))\n\n(def kind :sub)\n(assert (re-frame.registrar/kinds kind))\n\n;; -- cache -------------------------------------------------------------------\n;;\n;; De-duplicate subscriptions. If two or more equal subscriptions\n;; are concurrently active, we want only one handler running.\n;; Two subscriptions are \"equal\" if their query vectors test \"=\".\n(def query->reaction (atom {}))\n\n(defn clear-subscription-cache!\n  \"calls `on-dispose` for each cached item,\n   which will cause the value to be removed from the cache\"\n  []\n  (doseq [[k rxn] @query->reaction]\n    (dispose! rxn))\n  (if (not-empty @query->reaction)\n    (console :warn \"re-frame: The subscription cache isn't empty after being cleared\")))\n\n(defn clear-all-handlers!\n  \"Unregisters all existing subscription handlers\"\n  []\n  (clear-handlers kind)\n  (clear-subscription-cache!))\n\n(defn cache-and-return\n  \"cache the reaction r\"\n  [query-v dynv r]\n  (let [cache-key [query-v dynv]]\n    ;; when this reaction is no longer being used, remove it from the cache\n    (add-on-dispose! r #(trace/with-trace {:operation (first-in-vector query-v)\n                                           :op-type   :sub/dispose\n                                           :tags      {:query-v  query-v\n                                                       :reaction (reagent-id r)}}\n                          (swap! query->reaction\n                                 (fn [query-cache]\n                                   (if (and (contains? query-cache cache-key) (identical? r (get query-cache cache-key)))\n                                     (dissoc query-cache cache-key)\n                                     query-cache)))))\n    ;; cache this reaction, so it can be used to deduplicate other, later \"=\" subscriptions\n    (swap! query->reaction (fn [query-cache]\n                             (when debug-enabled?\n                               (when (contains? query-cache cache-key)\n                                 (console :warn \"re-frame: Adding a new subscription to the cache while there is an existing subscription in the cache\" cache-key)))\n                             (assoc query-cache cache-key r)))\n    (trace/merge-trace! {:tags {:reaction (reagent-id r)}})\n    r)) ;; return the actual reaction\n\n(defn cache-lookup\n  ([query-v]\n   (cache-lookup query-v []))\n  ([query-v dyn-v]\n   (get @query->reaction [query-v dyn-v])))\n\n;; -- subscribe ---------------------------------------------------------------\n\n(defn warn-when-not-reactive\n  []\n  (when (and debug-enabled? (not (reactive?)))\n    (console :warn\n             \"re-frame: Subscribe was called outside of a reactive context.\\n\"\n             \"https://day8.github.io/re-frame/FAQs/UseASubscriptionInAnEventHandler/\")))\n\n(defn subscribe\n  ([query]\n   (warn-when-not-reactive)\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query}}\n     (if-let [cached (cache-lookup query)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (cache-and-return query [] (handler-fn app-db query)))))))\n\n  ([query dynv]\n   (warn-when-not-reactive)\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query\n                                  :dyn-v   dynv}}\n     (if-let [cached (cache-lookup query dynv)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (when debug-enabled?\n           (when-let [not-reactive (not-empty (remove ratom? dynv))]\n             (console :warn \"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\" not-reactive)))\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (let [dyn-vals (make-reaction (fn [] (mapv deref dynv)))\n                 sub      (make-reaction (fn [] (handler-fn app-db query @dyn-vals)))]\n             ;; handler-fn returns a reaction which is then wrapped in the sub reaction\n             ;; need to double deref it to get to the actual value.\n             ;(console :log \"Subscription created: \" v dynv)\n             (cache-and-return query dynv (make-reaction (fn [] @@sub))))))))))\n\n;; -- reg-sub -----------------------------------------------------------------\n\n(defn- map-vals\n  \"Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}\"\n  [f m]\n  (into (empty m)\n        (map (fn [[k v]] [k (f v)]))\n        m))\n\n(defn map-signals\n  \"Runs f over signals. Signals may take several\n  forms, this function handles all of them.\"\n  [f signals]\n  (cond\n    (sequential? signals) (map f signals)\n    (map? signals) (map-vals f signals)\n    (deref? signals) (f signals)\n    :else '()))\n\n(defn to-seq\n  \"Coerces x to a seq if it isn't one already\"\n  [x]\n  (if (sequential? x)\n    x\n    (list x)))\n\n(defn deref-input-signals\n  [signals query-id]\n  (let [dereffed-signals (map-signals deref signals)]\n    (cond\n      (sequential? signals) (map deref signals)\n      (map? signals) (map-vals deref signals)\n      (deref? signals) (deref signals)\n      :else (console :error \"re-frame: in the reg-sub for\" query-id \", the input-signals function returns:\" signals))\n    (trace/merge-trace! {:tags {:input-signals (doall (to-seq (map-signals reagent-id signals)))}})\n    dereffed-signals))\n\n(defn sugar [query-id sub-fn query? & args]\n  (let [error-header (str \"re-frame: reg-sub for \" query-id \", \")\n        [op f :as comp-f] (take-last 2 args)\n        [input-args      ;; may be empty, or one signal fn, or pairs of  :<- / vector\n         computation-fn] (if (or (= 1 (count comp-f))\n                                 (fn? op)\n                                 (query? op))\n                           [(butlast args) (last args)]\n                           (let [args (drop-last 2 args)]\n                             (case op\n                               ;; return a function that calls the computation fn\n                               ;;  on the input signal, removing the query vector\n                               :->\n                               [args (fn [db _]\n                                       (f db))]\n                               ;; return a function that calls the computation fn\n                               ;;  on the input signal and the data in the query vector\n                               ;;  that is not the query-id\n                               :=>\n                               [args (fn [db q]\n                                       (if (map? q)\n                                         (f db q)\n                                         (let [[_ & qs] q]\n                                           (apply f db qs))))]\n                               ;; an incorrect keyword was passed\n                               (console :error error-header \"expected :-> or :=> as second to last argument, got:\" op))))\n        inputs-fn (case (count input-args)\n                    ;; no `inputs` function provided - give the default\n                    0 (fn\n                        ([_] app-db)\n                        ([_ _] app-db))\n\n                    ;; a single `inputs` fn\n                    1 (let [f (first input-args)]\n                        (when-not (fn? f)\n                          (console :error error-header \"2nd argument expected to be an inputs function, got:\" f))\n                        f)\n\n                    ;; one sugar pair\n                    2 (let [[marker vec] input-args]\n                        (when-not (= :<- marker)\n                          (console :error error-header \"expected :<-, got:\" marker))\n                        (fn inp-fn\n                          ([_] (sub-fn vec))\n                          ([_ _] (sub-fn vec))))\n\n                    ;; multiple sugar pairs\n                    (let [pairs   (partition 2 input-args)\n                          markers (map first pairs)\n                          vecs    (map second pairs)]\n                      (when-not (and (every? #{:<-} markers) (every? query? vecs))\n                        (console :error error-header \"expected pairs of :<- and vectors, got:\" pairs))\n                      (fn inp-fn\n                        ([_] (map sub-fn vecs))\n                        ([_ _] (map sub-fn vecs)))))]\n    [inputs-fn computation-fn]))\n\n(defn reg-sub\n  [query-id & args]\n  (let [[inputs-fn computation-fn] (apply sugar query-id subscribe vector? args)]\n    (register-handler\n     kind\n     query-id\n     (fn subs-handler-fn\n       ([db query-vec]\n        (let [subscriptions (inputs-fn query-vec nil)\n              reaction-id   (atom nil)\n              reaction      (make-reaction\n                             (fn []\n                               (trace/with-trace {:operation (first-in-vector query-vec)\n                                                  :op-type   :sub/run\n                                                  :tags      {:query-v    query-vec\n                                                              :reaction   @reaction-id}}\n                                 (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec)]\n                                   (trace/merge-trace! {:tags {:value subscription}})\n                                   subscription))))]\n\n          (reset! reaction-id (reagent-id reaction))\n          reaction))\n       ([db query-vec dyn-vec]\n        (let [subscriptions (inputs-fn query-vec dyn-vec)\n              reaction-id   (atom nil)\n              reaction      (make-reaction\n                             (fn []\n                               (trace/with-trace {:operation (first-in-vector query-vec)\n                                                  :op-type   :sub/run\n                                                  :tags      {:query-v   query-vec\n                                                              :dyn-v     dyn-vec\n                                                              :reaction  @reaction-id}}\n                                 (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec dyn-vec)]\n                                   (trace/merge-trace! {:tags {:value subscription}})\n                                   subscription))))]\n\n          (reset! reaction-id (reagent-id reaction))\n          reaction))))))\n"],"x_google_ignoreList":[0]}