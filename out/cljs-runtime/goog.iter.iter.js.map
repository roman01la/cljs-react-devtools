{
"version":3,
"file":"goog.iter.iter.js",
"lineCount":585,
"mappings":"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",
"sources":["goog/iter/iter.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Python style iteration utilities.\n */\n\n\ngoog.provide('goog.iter');\ngoog.provide('goog.iter.Iterable');\ngoog.provide('goog.iter.Iterator');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.debug');\ngoog.require('goog.functions');\ngoog.require('goog.math');\n\n\n/**\n * @typedef {{length:number}|{__iterator__}}\n */\ngoog.iter.Iterable;\n\n\n/**\n * Class/interface for iterators.\n * @constructor\n * @template VALUE\n * @implements {Iterator<VALUE>}\n * @deprecated Use objects implementing JavaScript iterable protocol introduced\n *     in ES6.\n *     https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n */\ngoog.iter.Iterator = function() {};\n\n\n/**\n * Returns the next value of the iteration as an an ES6 IIterableResult.\n * @return {!IIterableResult<VALUE>}\n * @override\n */\ngoog.iter.Iterator.prototype.next = function() {\n  'use strict';\n  return goog.iter.ES6_ITERATOR_DONE;\n};\n\n\n/**\n * An ES6 Iteration protocol result indicating iteration has completed for an\n *     iterator.\n * @const {!IIterableResult<?>}\n */\ngoog.iter.ES6_ITERATOR_DONE = goog.debug.freeze({done: true, value: undefined});\n\n\n/**\n * Wraps a VALUE in the ES6 Iterator protocol's IIterableResult container,\n * including the compiler-mandated 'done' key, set to false.\n * @param {VALUE} value\n * @return {!IIterableResult<VALUE>} An ES6 Iteration Protocol compatible result\n *     object, indicating iteration is not done.\n * @template VALUE\n */\ngoog.iter.createEs6IteratorYield = function(value) {\n  return {value, done: false};\n};\n\n\n/**\n * Returns the `Iterator` object itself.  This is used to implement\n * the iterator protocol in JavaScript 1.7\n * @param {boolean=} opt_keys  Whether to return the keys or values. Default is\n *     to only return the values.  This is being used by the for-in loop (true)\n *     and the for-each-in loop (false).  Even though the param gives a hint\n *     about what the iterator will return there is no guarantee that it will\n *     return the keys when true is passed.\n * @return {!goog.iter.Iterator<VALUE>} The object itself.\n */\ngoog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {\n  'use strict';\n  return this;\n};\n\n\n/**\n * Returns an iterator that knows how to iterate over the values in the object.\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable  If the\n *     object is an iterator it will be returned as is.  If the object has an\n *     `__iterator__` method that will be called to get the value\n *     iterator.  If the object is an array-like object we create an iterator\n *     for that.\n * @return {!goog.iter.Iterator<VALUE>} An iterator that knows how to iterate\n *     over the values in `iterable`.\n * @template VALUE\n */\ngoog.iter.toIterator = function(iterable) {\n  'use strict';\n  if (iterable instanceof goog.iter.Iterator) {\n    return iterable;\n  }\n  if (typeof iterable.__iterator__ == 'function') {\n    return /** @type {{__iterator__:function(this:?, boolean=)}} */ (iterable)\n        .__iterator__(false);\n  }\n  if (goog.isArrayLike(iterable)) {\n    const like = /** @type {!IArrayLike<number|string>} */ (iterable);\n    let i = 0;\n    const newIter =\n        /** @type {!goog.iter.Iterator<VALUE>} */ (new goog.iter.Iterator());\n    /**\n     * @return {!IIterableResult<VALUE>}\n     * @override\n     */\n    newIter.next = function() {\n      'use strict';\n      while (true) {\n        if (i >= like.length) {\n          return goog.iter.ES6_ITERATOR_DONE;\n        }\n        // Don't include deleted elements.\n        if (!(i in like)) {\n          i++;\n          continue;\n        }\n        return goog.iter.createEs6IteratorYield(like[i++]);\n      }\n    };\n\n    return newIter;\n  }\n\n\n  // TODO(arv): Should we fall back on goog.structs.getValues()?\n  throw new Error('Not implemented');\n};\n\n\n/**\n * Calls a function for each element in the iterator with the element of the\n * iterator passed as argument.\n *\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable  The iterator\n *     to iterate over. If the iterable is an object `toIterator` will be\n *     called on it.\n * @param {function(this:THIS,VALUE,?,!goog.iter.Iterator<VALUE>)} f\n *     The function to call for every element.  This function takes 3 arguments\n *     (the element, undefined, and the iterator) and the return value is\n *     irrelevant.  The reason for passing undefined as the second argument is\n *     so that the same function can be used in {@see goog.array.forEach} as\n *     well as others.  The third parameter is of type \"number\" for\n *     arraylike objects, undefined, otherwise.\n * @param {THIS=} opt_obj  The object to be used as the value of 'this' within\n *     `f`.\n * @template THIS, VALUE\n */\ngoog.iter.forEach = function(iterable, f, opt_obj) {\n  'use strict';\n  if (goog.isArrayLike(iterable)) {\n    // NOTES: this passes the index number to the second parameter\n    // of the callback contrary to the documentation above.\n    goog.array.forEach(\n        /** @type {IArrayLike<?>} */ (iterable), f, opt_obj);\n  } else {\n    const iterator = goog.iter.toIterator(iterable);\n    while (true) {\n      const {done, value} = iterator.next();\n      if (done) return;\n      f.call(opt_obj, value, undefined, iterator);\n    }\n  }\n};\n\n\n/**\n * Calls a function for every element in the iterator, and if the function\n * returns true adds the element to a new iterator.\n *\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     to iterate over.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every element. This function takes 3 arguments\n *     (the element, undefined, and the iterator) and should return a boolean.\n *     If the return value is true the element will be included in the returned\n *     iterator.  If it is false the element is not included.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator in which only elements\n *     that passed the test are present.\n * @template THIS, VALUE\n */\ngoog.iter.filter = function(iterable, f, opt_obj) {\n  'use strict';\n  const iterator = goog.iter.toIterator(iterable);\n  const newIter =\n      /** @type {!goog.iter.Iterator<VALUE>} */ (new goog.iter.Iterator());\n  /**\n   * @return {!IIterableResult<VALUE>}\n   * @override\n   */\n  newIter.next = function() {\n    'use strict';\n    while (true) {\n      const {done, value} = iterator.next();\n      if (done) return goog.iter.ES6_ITERATOR_DONE;\n      if (f.call(opt_obj, value, undefined, iterator)) {\n        return goog.iter.createEs6IteratorYield(value);\n      }\n    }\n  };\n\n  return newIter;\n};\n\n\n/**\n * Calls a function for every element in the iterator, and if the function\n * returns false adds the element to a new iterator.\n *\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     to iterate over.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every element. This function takes 3 arguments\n *     (the element, undefined, and the iterator) and should return a boolean.\n *     If the return value is false the element will be included in the returned\n *     iterator.  If it is true the element is not included.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator in which only elements\n *     that did not pass the test are present.\n * @template THIS, VALUE\n */\ngoog.iter.filterFalse = function(iterable, f, opt_obj) {\n  'use strict';\n  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);\n};\n\n\n/**\n * Creates a new iterator that returns the values in a range.  This function\n * can take 1, 2 or 3 arguments:\n * <pre>\n * range(5) same as range(0, 5, 1)\n * range(2, 5) same as range(2, 5, 1)\n * </pre>\n *\n * @param {number} startOrStop  The stop value if only one argument is provided.\n *     The start value if 2 or more arguments are provided.  If only one\n *     argument is used the start value is 0.\n * @param {number=} opt_stop  The stop value.  If left out then the first\n *     argument is used as the stop value.\n * @param {number=} opt_step  The number to increment with between each call to\n *     next.  This can be negative.\n * @return {!goog.iter.Iterator<number>} A new iterator that returns the values\n *     in the range.\n */\ngoog.iter.range = function(startOrStop, opt_stop, opt_step) {\n  'use strict';\n  let start = 0;\n  let stop = startOrStop;\n  let step = opt_step || 1;\n  if (arguments.length > 1) {\n    start = startOrStop;\n    stop = +opt_stop;\n  }\n  if (step == 0) {\n    throw new Error('Range step argument must not be zero');\n  }\n\n  const newIter =\n      /** @type {!goog.iter.Iterator<number>} */ (new goog.iter.Iterator());\n  /**\n   * @return {!IIterableResult<number>}\n   * @override\n   */\n  newIter.next = function() {\n    'use strict';\n    if (step > 0 && start >= stop || step < 0 && start <= stop) {\n      return goog.iter.ES6_ITERATOR_DONE;\n    }\n    const rv = start;\n    start += step;\n    return goog.iter.createEs6IteratorYield(rv);\n  };\n\n  return newIter;\n};\n\n\n/**\n * Joins the values in a iterator with a delimiter.\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     to get the values from.\n * @param {string} deliminator  The text to put between the values.\n * @return {string} The joined value string.\n * @template VALUE\n */\ngoog.iter.join = function(iterable, deliminator) {\n  'use strict';\n  return goog.iter.toArray(iterable).join(deliminator);\n};\n\n\n/**\n * For every element in the iterator call a function and return a new iterator\n * with that value.\n *\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterator to iterate over.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):RESULT} f\n *     The function to call for every element.  This function takes 3 arguments\n *     (the element, undefined, and the iterator) and should return a new value.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {!goog.iter.Iterator<RESULT>} A new iterator that returns the\n *     results of applying the function to each element in the original\n *     iterator.\n * @template THIS, VALUE, RESULT\n */\ngoog.iter.map = function(iterable, f, opt_obj) {\n  'use strict';\n  const iterator = goog.iter.toIterator(iterable);\n  const newIter =\n      /** @type {!goog.iter.Iterator<RESULT>} */ (new goog.iter.Iterator());\n  /**\n   * @return {!IIterableResult<RESULT>}\n   * @override\n   */\n  newIter.next = function() {\n    'use strict';\n    const {done, value} = iterator.next();\n    if (done) return goog.iter.ES6_ITERATOR_DONE;\n    const mappedVal = f.call(opt_obj, value, undefined, iterator);\n    return goog.iter.createEs6IteratorYield(mappedVal);\n  };\n\n  return newIter;\n};\n\n\n/**\n * Passes every element of an iterator into a function and accumulates the\n * result.\n *\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable<VALUE>} iterable The\n *     iterator to iterate over.\n * @param {function(this:THIS,RVALUE,VALUE):RVALUE} f The function to call for\n *     every element. This function takes 2 arguments (the function's previous\n *     result or the initial value, and the value of the current element).\n *     function(previousValue, currentElement) : newValue.\n * @param {RVALUE} val The initial value to pass into the function on the first\n *     call.\n * @param {THIS=} opt_obj  The object to be used as the value of 'this' within\n *     f.\n * @return {RVALUE} Result of evaluating f repeatedly across the values of\n *     the iterator.\n * @template THIS, VALUE, RVALUE\n */\ngoog.iter.reduce = function(iterable, f, val, opt_obj) {\n  'use strict';\n  let rval = val;\n  goog.iter.forEach(iterable, function(val) {\n    'use strict';\n    rval = f.call(opt_obj, rval, val);\n  });\n  return rval;\n};\n\n\n/**\n * Goes through the values in the iterator. Calls f for each of these, and if\n * any of them returns true, this returns true (without checking the rest). If\n * all return false this will return false.\n *\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     object.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every value. This function takes 3 arguments\n *     (the value, undefined, and the iterator) and should return a boolean.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {boolean} true if any value passes the test.\n * @template THIS, VALUE\n */\ngoog.iter.some = function(iterable, f, opt_obj) {\n  'use strict';\n  const iterator = goog.iter.toIterator(iterable);\n\n  while (true) {\n    const {done, value} = iterator.next();\n    if (done) return false;\n    if (f.call(opt_obj, value, undefined, iterator)) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Goes through the values in the iterator. Calls f for each of these and if any\n * of them returns false this returns false (without checking the rest). If all\n * return true this will return true.\n *\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     object.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every value. This function takes 3 arguments\n *     (the value, undefined, and the iterator) and should return a boolean.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {boolean} true if every value passes the test.\n * @template THIS, VALUE\n */\ngoog.iter.every = function(iterable, f, opt_obj) {\n  'use strict';\n  const iterator = goog.iter.toIterator(iterable);\n\n  while (true) {\n    const {done, value} = iterator.next();\n    if (done) return true;\n    if (!f.call(opt_obj, value, undefined, iterator)) {\n      return false;\n    }\n  }\n};\n\n\n/**\n * Takes zero or more iterables and returns one iterator that will iterate over\n * them in the order chained.\n * @param {...!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} var_args Any\n *     number of iterable objects.\n * @return {!goog.iter.Iterator<VALUE>} Returns a new iterator that will\n *     iterate over all the given iterables' contents.\n * @template VALUE\n */\ngoog.iter.chain = function(var_args) {\n  'use strict';\n  return goog.iter.chainFromIterable(arguments);\n};\n\n\n/**\n * Takes a single iterable containing zero or more iterables and returns one\n * iterator that will iterate over each one in the order given.\n * @see https://goo.gl/5NRp5d\n * @param {goog.iter.Iterator<?>|goog.iter.Iterable} iterable The iterable of\n *     iterables to chain.\n * @return {!goog.iter.Iterator<VALUE>} Returns a new iterator that will\n *     iterate over all the contents of the iterables contained within\n *     `iterable`.\n * @template VALUE\n */\ngoog.iter.chainFromIterable = function(iterable) {\n  'use strict';\n  const iteratorOfIterators = goog.iter.toIterator(iterable);\n  const iter =\n      /** @type {!goog.iter.Iterator<VALUE>} */ (new goog.iter.Iterator());\n  let current = null;\n\n  /**\n   * @return {!IIterableResult<VALUE>}\n   * @override\n   */\n  iter.next = function() {\n    'use strict';\n    while (true) {\n      if (current == null) {\n        const it = iteratorOfIterators.next();\n        if (it.done) return goog.iter.ES6_ITERATOR_DONE;\n        const value = /** @type {!goog.iter.Iterator<VALUE>} */ (it.value);\n        current = goog.iter.toIterator(value);\n      }\n      const it = current.next();\n      if (it.done) {\n        // If the child iterator is out of values, set current to null which\n        // triggers iterating over the parent above.\n        current = null;\n        continue;\n      }\n      const value = /** @type {VALUE} */ (it.value);\n      return goog.iter.createEs6IteratorYield(value);\n    }\n  };\n\n  return iter;\n};\n\n\n/**\n * Builds a new iterator that iterates over the original, but skips elements as\n * long as a supplied function returns true.\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     object.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every value. This function takes 3 arguments\n *     (the value, undefined, and the iterator) and should return a boolean.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator that drops elements from\n *     the original iterator as long as `f` is true.\n * @template THIS, VALUE\n */\ngoog.iter.dropWhile = function(iterable, f, opt_obj) {\n  'use strict';\n  const iterator = goog.iter.toIterator(iterable);\n\n  const newIter =\n      /** @type {!goog.iter.Iterator<VALUE>} */ (new goog.iter.Iterator());\n  let dropping = true;\n\n  /**\n   * @return {!IIterableResult<VALUE>}\n   * @override\n   */\n  newIter.next = function() {\n    'use strict';\n    while (true) {\n      const {done, value} = iterator.next();\n      if (done) return goog.iter.ES6_ITERATOR_DONE;\n      if (dropping && f.call(opt_obj, value, undefined, iterator)) {\n        continue;\n      } else {\n        dropping = false;\n      }\n      return goog.iter.createEs6IteratorYield(value);\n    }\n  };\n\n  return newIter;\n};\n\n\n/**\n * Builds a new iterator that iterates over the original, but only as long as a\n * supplied function returns true.\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     object.\n * @param {\n *     function(this:THIS,VALUE,undefined,!goog.iter.Iterator<VALUE>):boolean} f\n *     The function to call for every value. This function takes 3 arguments\n *     (the value, undefined, and the iterator) and should return a boolean.\n * @param {THIS=} opt_obj This is used as the 'this' object in f when called.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator that keeps elements in\n *     the original iterator as long as the function is true.\n * @template THIS, VALUE\n */\ngoog.iter.takeWhile = function(iterable, f, opt_obj) {\n  'use strict';\n  const iterator = goog.iter.toIterator(iterable);\n  const iter =\n      /** @type {!goog.iter.Iterator<VALUE>} */ (new goog.iter.Iterator());\n\n  /**\n   * @return {!IIterableResult<VALUE>}\n   * @override\n   */\n  iter.next = function() {\n    'use strict';\n    const {done, value} = iterator.next();\n    if (done) return goog.iter.ES6_ITERATOR_DONE;\n    if (f.call(opt_obj, value, undefined, iterator)) {\n      return goog.iter.createEs6IteratorYield(value);\n    }\n    return goog.iter.ES6_ITERATOR_DONE;\n  };\n\n  return iter;\n};\n\n\n/**\n * Converts the iterator to an array\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterator\n *     to convert to an array.\n * @return {!Array<VALUE>} An array of the elements the iterator iterates over.\n * @template VALUE\n */\ngoog.iter.toArray = function(iterable) {\n  'use strict';\n  // Fast path for array-like.\n  if (goog.isArrayLike(iterable)) {\n    return goog.array.toArray(/** @type {!IArrayLike<?>} */ (iterable));\n  }\n  iterable = goog.iter.toIterator(iterable);\n  const array = [];\n  goog.iter.forEach(iterable, function(val) {\n    'use strict';\n    array.push(val);\n  });\n  return array;\n};\n\n\n/**\n * Iterates over two iterables and returns true if they contain the same\n * sequence of elements and have the same length.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable1 The first\n *     iterable object.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable2 The second\n *     iterable object.\n * @param {function(VALUE,VALUE):boolean=} opt_equalsFn Optional comparison\n *     function.\n *     Should take two arguments to compare, and return true if the arguments\n *     are equal. Defaults to {@link goog.array.defaultCompareEquality} which\n *     compares the elements using the built-in '===' operator.\n * @return {boolean} true if the iterables contain the same sequence of elements\n *     and have the same length.\n * @template VALUE\n */\ngoog.iter.equals = function(iterable1, iterable2, opt_equalsFn) {\n  'use strict';\n  const fillValue = {};\n  const pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);\n  const equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;\n  return goog.iter.every(pairs, function(pair) {\n    'use strict';\n    return equalsFn(pair[0], pair[1]);\n  });\n};\n\n\n/**\n * Advances the iterator to the next position, returning the given default value\n * instead of throwing an exception if the iterator has no more entries.\n * @param {goog.iter.Iterator<VALUE>|goog.iter.Iterable} iterable The iterable\n *     object.\n * @param {VALUE} defaultValue The value to return if the iterator is empty.\n * @return {VALUE} The next item in the iteration, or defaultValue if the\n *     iterator was empty.\n * @template VALUE\n */\ngoog.iter.nextOrValue = function(iterable, defaultValue) {\n  'use strict';\n  const iterator = /** @type {!goog.iter.Iterator<VALUE>} */ (\n      goog.iter.toIterator(iterable));\n  const {done, value} = iterator.next();\n  if (done) return defaultValue;\n  return value;\n};\n\n\n/**\n * Cartesian product of zero or more sets.  Gives an iterator that gives every\n * combination of one element chosen from each set.  For example,\n * ([1, 2], [3, 4]) gives ([1, 3], [1, 4], [2, 3], [2, 4]).\n * @see http://docs.python.org/library/itertools.html#itertools.product\n * @param {...!IArrayLike<VALUE>} var_args Zero or more sets, as\n *     arrays.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} An iterator that gives each\n *     n-tuple (as an array).\n * @template VALUE\n */\ngoog.iter.product = function(var_args) {\n  'use strict';\n  const someArrayEmpty = Array.prototype.some.call(arguments, function(arr) {\n    'use strict';\n    return !arr.length;\n  });\n\n  // An empty set in a cartesian product gives an empty set.\n  if (someArrayEmpty || !arguments.length) {\n    return /** @type {!goog.iter.Iterator<!Array<VALUE>>} */ (\n        new goog.iter.Iterator());\n  }\n\n  const iter =\n      /** @type {!goog.iter.Iterator<VALUE>} */ (new goog.iter.Iterator());\n  const arrays = arguments;\n\n  // The first indices are [0, 0, ...]\n  /** @type {?Array<number>} */\n  let indices = goog.array.repeat(0, arrays.length);\n\n  /**\n   * @return {!IIterableResult<VALUE>}\n   * @override\n   */\n  iter.next = function() {\n    'use strict';\n    if (indices) {\n      const retVal = goog.array.map(indices, function(valueIndex, arrayIndex) {\n        'use strict';\n        return arrays[arrayIndex][valueIndex];\n      });\n\n      // Generate the next-largest indices for the next call.\n      // Increase the rightmost index. If it goes over, increase the next\n      // rightmost (like carry-over addition).\n      for (let i = indices.length - 1; i >= 0; i--) {\n        // Assertion prevents compiler warning below.\n        goog.asserts.assert(indices);\n        if (indices[i] < arrays[i].length - 1) {\n          indices[i]++;\n          break;\n        }\n\n        // We're at the last indices (the last element of every array), so\n        // the iteration is over on the next call.\n        if (i == 0) {\n          indices = null;\n          break;\n        }\n        // Reset the index in this column and loop back to increment the\n        // next one.\n        indices[i] = 0;\n      }\n      return goog.iter.createEs6IteratorYield(retVal);\n    }\n\n    return goog.iter.ES6_ITERATOR_DONE;\n  };\n\n\n  return iter;\n};\n\n\n/**\n * Create an iterator to cycle over the iterable's elements indefinitely.\n * For example, ([1, 2, 3]) would return : 1, 2, 3, 1, 2, 3, ...\n * @see: http://docs.python.org/library/itertools.html#itertools.cycle.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable object.\n * @return {!goog.iter.Iterator<VALUE>} An iterator that iterates indefinitely\n *     over the values in `iterable`.\n * @template VALUE\n */\ngoog.iter.cycle = function(iterable) {\n  'use strict';\n  const baseIterator = /** @type {!goog.iter.Iterator<VALUE>} */ (\n      goog.iter.toIterator(iterable));\n\n  // We maintain a cache to store the iterable elements as we iterate\n  // over them. The cache is used to return elements once we have\n  // iterated over the iterable once.\n  const cache = [];\n  let cacheIndex = 0;\n\n  const iter =\n      /** @type {!goog.iter.Iterator<VALUE>} */ (new goog.iter.Iterator());\n\n  // This flag is set after the iterable is iterated over once\n  let useCache = false;\n\n  /**\n   * @return {!IIterableResult<VALUE>}\n   * @override\n   */\n  iter.next = function() {\n    'use strict';\n    let returnElement = null;\n\n    // Pull elements off the original iterator if not using cache\n    if (!useCache) {\n      const it = baseIterator.next();\n      if (it.done) {\n        if (goog.array.isEmpty(cache)) {\n          return goog.iter.ES6_ITERATOR_DONE;\n        }\n        // set useCache to true after we've exhausted the inner iterator and\n        // there is at least one element in the cache.\n        useCache = true;\n        // Fallthrough to using the cache immediately.\n      } else {\n        cache.push(it.value);\n        return it;\n      }\n    }\n\n    returnElement = cache[cacheIndex];\n    cacheIndex = (cacheIndex + 1) % cache.length;\n\n    return goog.iter.createEs6IteratorYield(returnElement);\n  };\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that counts indefinitely from a starting value.\n * @see http://docs.python.org/2/library/itertools.html#itertools.count\n * @param {number=} opt_start The starting value. Default is 0.\n * @param {number=} opt_step The number to increment with between each call to\n *     next. Negative and floating point numbers are allowed. Default is 1.\n * @return {!goog.iter.Iterator<number>} A new iterator that returns the values\n *     in the series.\n */\ngoog.iter.count = function(opt_start, opt_step) {\n  'use strict';\n  let counter = opt_start || 0;\n  const step = (opt_step !== undefined) ? opt_step : 1;\n  const iter =\n      /** @type {!goog.iter.Iterator<number>} */ (new goog.iter.Iterator());\n\n  /**\n   * @return {!IIterableResult<number>}\n   * @override @see {!goog.iter.Iterator}\n   */\n  iter.next = function() {\n    'use strict';\n    const returnValue = counter;\n    counter += step;\n    return goog.iter.createEs6IteratorYield(returnValue);\n  };\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns the same object or value repeatedly.\n * @param {VALUE} value Any object or value to repeat.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator that returns the\n *     repeated value.\n * @template VALUE\n */\ngoog.iter.repeat = function(value) {\n  'use strict';\n  const iter =\n      /** @type {!goog.iter.Iterator<VALUE>} */ (new goog.iter.Iterator());\n\n  /**\n   * @return {!IIterableResult<VALUE>}\n   * @override\n   */\n  iter.next = function() {\n    return goog.iter.createEs6IteratorYield(value);\n  };\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns running totals from the numbers in\n * `iterable`. For example, the array {@code [1, 2, 3, 4, 5]} yields\n * {@code 1 -> 3 -> 6 -> 10 -> 15}.\n * @see http://docs.python.org/3.2/library/itertools.html#itertools.accumulate\n * @param {!goog.iter.Iterator<number>|!goog.iter.Iterable} iterable The\n *     iterable of numbers to accumulate.\n * @return {!goog.iter.Iterator<number>} A new iterator that returns the\n *     numbers in the series.\n */\ngoog.iter.accumulate = function(iterable) {\n  'use strict';\n  const iterator = goog.iter.toIterator(iterable);\n  let total = 0;\n  const iter =\n      /** @type {!goog.iter.Iterator<number>} */ (new goog.iter.Iterator());\n\n  /**\n   * @return {!IIterableResult<number>}\n   * @override @see {!goog.iter.Iterator}\n   */\n  iter.next = function() {\n    'use strict';\n    const {done, value} = iterator.next();\n    if (done) return goog.iter.ES6_ITERATOR_DONE;\n    total += value;\n    return goog.iter.createEs6IteratorYield(total);\n  };\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns arrays containing the ith elements from the\n * provided iterables. The returned arrays will be the same size as the number\n * of iterables given in `var_args`. Once the shortest iterable is\n * exhausted, subsequent calls to `next()` will return\n * `goog.iter.ES6_ITERATOR_DONE`.\n * @see http://docs.python.org/2/library/itertools.html#itertools.izip\n * @param {...!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} var_args Any\n *     number of iterable objects.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} A new iterator that returns\n *     arrays of elements from the provided iterables.\n * @template VALUE\n */\ngoog.iter.zip = function(var_args) {\n  'use strict';\n  const args = arguments;\n  const iter =\n      /** @type {!goog.iter.Iterator<VALUE>} */ (new goog.iter.Iterator());\n\n  if (args.length > 0) {\n    const iterators = goog.array.map(args, goog.iter.toIterator);\n    let allDone = false;\n    /**\n     * @return {!IIterableResult<VALUE>}\n     * @override\n     */\n    iter.next = function() {\n      'use strict';\n      if (allDone) return goog.iter.ES6_ITERATOR_DONE;\n\n      const arr = [];\n      for (let i = 0, iterator; iterator = iterators[i++];) {\n        const it = /** @type {!IIterableResult<VALUE>} */ (iterator.next());\n        if (it.done) {\n          // One of the iterators being zipped is done, so set allDone and\n          // return.\n          allDone = true;\n          return goog.iter.ES6_ITERATOR_DONE;\n        }\n        arr.push(it.value);\n      }\n      return goog.iter.createEs6IteratorYield(arr);\n    };\n  }\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns arrays containing the ith elements from the\n * provided iterables. The returned arrays will be the same size as the number\n * of iterables given in `var_args`. Shorter iterables will be extended\n * with `fillValue`. Once the longest iterable is exhausted, subsequent\n * calls to `next()` will return `goog.iter.ES6_ITERATOR_DONE`.\n * @see http://docs.python.org/2/library/itertools.html#itertools.izip_longest\n * @param {VALUE} fillValue The object or value used to fill shorter iterables.\n * @param {...!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} var_args Any\n *     number of iterable objects.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} A new iterator that returns\n *     arrays of elements from the provided iterables.\n * @template VALUE\n */\ngoog.iter.zipLongest = function(fillValue, var_args) {\n  'use strict';\n  const args = Array.prototype.slice.call(arguments, 1);\n  const iter =\n      /** @type {!goog.iter.Iterator<VALUE>} */ (new goog.iter.Iterator());\n\n  if (args.length > 0) {\n    const iterators = goog.array.map(args, goog.iter.toIterator);\n\n    let allDone = false;  // set to true once all iterators are empty.\n    /**\n     * @return {!IIterableResult<VALUE>}\n     * @override\n     */\n    iter.next = function() {\n      'use strict';\n      if (allDone) return goog.iter.ES6_ITERATOR_DONE;\n\n      let iteratorsHaveValues = false;\n      const arr = [];\n      for (let i = 0, iterator; iterator = iterators[i++];) {\n        const it = /** @type {!IIterableResult<VALUE>} */ (iterator.next());\n        if (it.done) {\n          // If this iterator is empty, others might not be, so use the\n          // fillValue.\n          arr.push(fillValue);\n          continue;\n        }\n        arr.push(it.value);\n        iteratorsHaveValues = true;\n      }\n\n      if (!iteratorsHaveValues) {\n        allDone = true;\n        return goog.iter.ES6_ITERATOR_DONE;\n      }\n      return goog.iter.createEs6IteratorYield(arr);\n    };\n  }\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that filters `iterable` based on a series of\n * `selectors`. On each call to `next()`, one item is taken from\n * both the `iterable` and `selectors` iterators. If the item from\n * `selectors` evaluates to true, the item from `iterable` is given.\n * Otherwise, it is skipped. Once either `iterable` or `selectors`\n * is exhausted, subsequent calls to `next()` will return\n * `goog.iter.ES6_ITERATOR_DONE`.\n * @see http://docs.python.org/2/library/itertools.html#itertools.compress\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to filter.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} selectors An\n *     iterable of items to be evaluated in a boolean context to determine if\n *     the corresponding element in `iterable` should be included in the\n *     result.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator that returns the\n *     filtered values.\n * @template VALUE\n */\ngoog.iter.compress = function(iterable, selectors) {\n  'use strict';\n  const valueIterator = goog.iter.toIterator(iterable);\n  const selectorIterator = goog.iter.toIterator(selectors);\n\n  const iter =\n      /** @type {!goog.iter.Iterator<VALUE>} */ (new goog.iter.Iterator());\n\n  let allDone = false;\n\n  /**\n   * @return {!IIterableResult<VALUE>}\n   * @override\n   */\n  iter.next = function() {\n    if (allDone) return goog.iter.ES6_ITERATOR_DONE;\n\n    while (true) {\n      const valIt = valueIterator.next();\n      if (valIt.done) {\n        allDone = true;\n        return goog.iter.ES6_ITERATOR_DONE;\n      }\n\n      const selectorIt = selectorIterator.next();\n      if (selectorIt.done) {\n        allDone = true;\n        return goog.iter.ES6_ITERATOR_DONE;\n      }\n\n      const val = valIt.value;\n      const selectorVal = selectorIt.value;\n      if (selectorVal) return goog.iter.createEs6IteratorYield(val);\n    }\n  };\n\n  return iter;\n};\n\n\n\n/**\n * Implements the `goog.iter.groupBy` iterator.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to group.\n * @param {function(VALUE): KEY=} opt_keyFunc  Optional function for\n *     determining the key value for each group in the `iterable`. Default\n *     is the identity function.\n * @constructor\n * @extends {goog.iter.Iterator<!Array<?>>}\n * @template KEY, VALUE\n * @private\n */\ngoog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {\n  'use strict';\n  /**\n   * The iterable to group, coerced to an iterator.\n   * @type {!goog.iter.Iterator}\n   */\n  this.iterator = goog.iter.toIterator(iterable);\n\n  /**\n   * A function for determining the key value for each element in the iterable.\n   * If no function is provided, the identity function is used and returns the\n   * element unchanged.\n   * @type {function(VALUE): KEY}\n   */\n  this.keyFunc = opt_keyFunc || goog.functions.identity;\n\n  /**\n   * The target key for determining the start of a group.\n   * @type {KEY}\n   */\n  this.targetKey;\n\n  /**\n   * The current key visited during iteration.\n   * @type {KEY}\n   */\n  this.currentKey;\n\n  /**\n   * The current value being added to the group.\n   * @type {VALUE}\n   */\n  this.currentValue;\n};\ngoog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);\n\n\n/**\n * @return {!IIterableResult<!Array<?>>}\n * @override\n */\ngoog.iter.GroupByIterator_.prototype.next = function() {\n  'use strict';\n  while (this.currentKey == this.targetKey) {\n    const it = this.iterator.next();\n    if (it.done) return goog.iter.ES6_ITERATOR_DONE;\n    this.currentValue = it.value;\n    this.currentKey = this.keyFunc(this.currentValue);\n  }\n  this.targetKey = this.currentKey;\n  return goog.iter.createEs6IteratorYield(\n      [this.currentKey, this.groupItems_(this.targetKey)]);\n};\n\n\n/**\n * Performs the grouping of objects using the given key.\n * @param {KEY} targetKey  The target key object for the group.\n * @return {!Array<VALUE>} An array of grouped objects.\n * @private\n */\ngoog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {\n  'use strict';\n  const arr = [];\n  while (this.currentKey == targetKey) {\n    arr.push(this.currentValue);\n    const it = this.iterator.next();\n    if (it.done) break;\n    this.currentValue = it.value;\n    this.currentKey = this.keyFunc(this.currentValue);\n  }\n  return arr;\n};\n\n\n/**\n * Creates an iterator that returns arrays containing elements from the\n * `iterable` grouped by a key value. For iterables with repeated\n * elements (i.e. sorted according to a particular key function), this function\n * has a `uniq`-like effect. For example, grouping the array:\n * {@code [A, B, B, C, C, A]} produces\n * {@code [A, [A]], [B, [B, B]], [C, [C, C]], [A, [A]]}.\n * @see http://docs.python.org/2/library/itertools.html#itertools.groupby\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to group.\n * @param {function(VALUE): KEY=} opt_keyFunc  Optional function for\n *     determining the key value for each group in the `iterable`. Default\n *     is the identity function.\n * @return {!goog.iter.Iterator<!Array<?>>} A new iterator that returns\n *     arrays of consecutive key and groups.\n * @template KEY, VALUE\n */\ngoog.iter.groupBy = function(iterable, opt_keyFunc) {\n  'use strict';\n  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);\n};\n\n\n/**\n * Gives an iterator that gives the result of calling the given function\n * <code>f</code> with the arguments taken from the next element from\n * <code>iterable</code> (the elements are expected to also be iterables).\n *\n * Similar to {@see goog.iter.map} but allows the function to accept multiple\n * arguments from the iterable.\n *\n * @param {!goog.iter.Iterator<?>|!goog.iter.Iterable} iterable The iterable of\n *     iterables to iterate over.\n * @param {function(this:THIS,...*):RESULT} f The function to call for every\n *     element.  This function takes N+2 arguments, where N represents the\n *     number of items from the next element of the iterable. The two\n *     additional arguments passed to the function are undefined and the\n *     iterator itself. The function should return a new value.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within\n *     `f`.\n * @return {!goog.iter.Iterator<RESULT>} A new iterator that returns the\n *     results of applying the function to each element in the original\n *     iterator.\n * @template THIS, RESULT\n */\ngoog.iter.starMap = function(iterable, f, opt_obj) {\n  'use strict';\n  const iterator = goog.iter.toIterator(iterable);\n  const iter =\n      /** @type {!goog.iter.Iterator<RESULT>} */ (new goog.iter.Iterator());\n\n  /**\n   * @return {!IIterableResult<RESULT>}\n   * @override\n   */\n  iter.next = function() {\n    'use strict';\n    const it = /** @type {!IIterableResult<!goog.iter.Iterator<?>>} */ (\n        iterator.next());\n    if (it.done) return goog.iter.ES6_ITERATOR_DONE;\n    const args = goog.iter.toArray(it.value);\n    const value = f.apply(opt_obj, [].concat(args, undefined, iterator));\n    return goog.iter.createEs6IteratorYield(value);\n  };\n\n\n  return iter;\n};\n\n\n/**\n * Returns an array of iterators each of which can iterate over the values in\n * `iterable` without advancing the others.\n * @see http://docs.python.org/2/library/itertools.html#itertools.tee\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to tee.\n * @param {number=} opt_num  The number of iterators to create. Default is 2.\n * @return {!Array<goog.iter.Iterator<VALUE>>} An array of iterators.\n * @template VALUE\n */\ngoog.iter.tee = function(iterable, opt_num) {\n  'use strict';\n  const iterator = goog.iter.toIterator(iterable);\n  const num = (typeof opt_num === 'number') ? opt_num : 2;\n  const buffers = goog.array.map(goog.array.range(num), function() {\n    'use strict';\n    return [];\n  });\n\n  /***\n   * @return {boolean} True iff something was added to the buffers, false\n   *     otherwise. Used to signal whether there were any more iterators, or if\n   *     the parent iterator should indicate exhaustion.\n   */\n  function addNextIteratorValueToBuffers() {\n    'use strict';\n    const {done, value} = iterator.next();\n    if (done) return false;\n    for (let i = 0, buffer; buffer = buffers[i++];) {\n      buffer.push(value);\n    }\n    return true;\n  }\n\n  /***\n   * @param {!Array<VALUE>} buffer\n   * @return {!goog.iter.Iterator<VALUE>}\n   */\n  function createIterator(buffer) {\n    'use strict';\n    // Each tee'd iterator has an associated buffer (initially empty). When a\n    // tee'd iterator's buffer is empty, it calls\n    // addNextIteratorValueToBuffers(), adding the next value to all tee'd\n    // iterators' buffers, and then returns that value. This allows each\n    // iterator to be advanced independently.\n    const iter =\n        /** @type {!goog.iter.Iterator<VALUE>} */ (new goog.iter.Iterator());\n\n    /**\n     * @return {!IIterableResult<VALUE>}\n     * @override\n     */\n    iter.next = function() {\n      'use strict';\n      if (goog.array.isEmpty(buffer)) {\n        const added = addNextIteratorValueToBuffers();\n        if (!added) return goog.iter.ES6_ITERATOR_DONE;\n      }\n      goog.asserts.assert(!goog.array.isEmpty(buffer));\n      return goog.iter.createEs6IteratorYield(buffer.shift());\n    };\n\n    return iter;\n  }\n\n  return goog.array.map(buffers, createIterator);\n};\n\n\n/**\n * Creates an iterator that returns arrays containing a count and an element\n * obtained from the given `iterable`.\n * @see http://docs.python.org/2/library/functions.html#enumerate\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to enumerate.\n * @param {number=} opt_start  Optional starting value. Default is 0.\n * @return {!goog.iter.Iterator<!Array<?>>} A new iterator containing\n *     count/item pairs.\n * @template VALUE\n */\ngoog.iter.enumerate = function(iterable, opt_start) {\n  'use strict';\n  return goog.iter.zip(goog.iter.count(opt_start), iterable);\n};\n\n\n/**\n * Creates an iterator that returns the first `limitSize` elements from an\n * iterable. If this number is greater than the number of elements in the\n * iterable, all the elements are returned.\n * @see http://goo.gl/V0sihp Inspired by the limit iterator in Guava.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to limit.\n * @param {number} limitSize  The maximum number of elements to return.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator containing\n *     `limitSize` elements.\n * @template VALUE\n */\ngoog.iter.limit = function(iterable, limitSize) {\n  'use strict';\n  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);\n\n  const iterator = goog.iter.toIterator(iterable);\n\n  const iter =\n      /** @type {!goog.iter.Iterator<VALUE>} */ (new goog.iter.Iterator());\n  let remaining = limitSize;\n\n  /**\n   * @return {!IIterableResult<VALUE>}\n   * @override\n   */\n  iter.next = function() {\n    'use strict';\n    if (remaining-- > 0) {\n      return iterator.next();\n    }\n    return goog.iter.ES6_ITERATOR_DONE;\n  };\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that is advanced `count` steps ahead. Consumed\n * values are silently discarded. If `count` is greater than the number\n * of elements in `iterable`, an empty iterator is returned. Subsequent\n * calls to `next()` will return `goog.iter.ES6_ITERATOR_DONE`.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to consume.\n * @param {number} count  The number of elements to consume from the iterator.\n * @return {!goog.iter.Iterator<VALUE>} An iterator advanced zero or more steps\n *     ahead.\n * @template VALUE\n */\ngoog.iter.consume = function(iterable, count) {\n  'use strict';\n  goog.asserts.assert(goog.math.isInt(count) && count >= 0);\n\n  const iterator = goog.iter.toIterator(iterable);\n\n  while (count-- > 0) {\n    goog.iter.nextOrValue(iterator, null);\n  }\n\n  return iterator;\n};\n\n\n/**\n * Creates an iterator that returns a range of elements from an iterable.\n * Similar to {@see goog.array.slice} but does not support negative indexes.\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to slice.\n * @param {number} start  The index of the first element to return.\n * @param {number=} opt_end  The index after the last element to return. If\n *     defined, must be greater than or equal to `start`.\n * @return {!goog.iter.Iterator<VALUE>} A new iterator containing a slice of\n *     the original.\n * @template VALUE\n */\ngoog.iter.slice = function(iterable, start, opt_end) {\n  'use strict';\n  goog.asserts.assert(goog.math.isInt(start) && start >= 0);\n\n  let iterator = goog.iter.consume(iterable, start);\n\n  if (typeof opt_end === 'number') {\n    goog.asserts.assert(goog.math.isInt(opt_end) && opt_end >= start);\n    iterator = goog.iter.limit(iterator, opt_end - start /* limitSize */);\n  }\n\n  return iterator;\n};\n\n\n/**\n * Checks an array for duplicate elements.\n * @param {?IArrayLike<VALUE>} arr The array to check for\n *     duplicates.\n * @return {boolean} True, if the array contains duplicates, false otherwise.\n * @private\n * @template VALUE\n */\n// TODO(user): Consider moving this into goog.array as a public function.\ngoog.iter.hasDuplicates_ = function(arr) {\n  'use strict';\n  const deduped = [];\n  goog.array.removeDuplicates(arr, deduped);\n  return arr.length != deduped.length;\n};\n\n\n/**\n * Creates an iterator that returns permutations of elements in\n * `iterable`.\n *\n * Permutations are obtained by taking the Cartesian product of\n * `opt_length` iterables and filtering out those with repeated\n * elements. For example, the permutations of {@code [1,2,3]} are\n * {@code [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]}.\n * @see http://docs.python.org/2/library/itertools.html#itertools.permutations\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable from which to generate permutations.\n * @param {number=} opt_length Length of each permutation. If omitted, defaults\n *     to the length of `iterable`.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} A new iterator containing the\n *     permutations of `iterable`.\n * @template VALUE\n */\ngoog.iter.permutations = function(iterable, opt_length) {\n  'use strict';\n  const elements = goog.iter.toArray(iterable);\n  const length =\n      (typeof opt_length === 'number') ? opt_length : elements.length;\n\n  const sets = goog.array.repeat(elements, length);\n  const product = goog.iter.product.apply(undefined, sets);\n\n  return goog.iter.filter(product, function(arr) {\n    'use strict';\n    return !goog.iter.hasDuplicates_(arr);\n  });\n};\n\n\n/**\n * Creates an iterator that returns combinations of elements from\n * `iterable`.\n *\n * Combinations are obtained by taking the {@see goog.iter.permutations} of\n * `iterable` and filtering those whose elements appear in the order they\n * are encountered in `iterable`. For example, the 3-length combinations\n * of {@code [0,1,2,3]} are {@code [[0,1,2], [0,1,3], [0,2,3], [1,2,3]]}.\n * @see http://docs.python.org/2/library/itertools.html#itertools.combinations\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable from which to generate combinations.\n * @param {number} length The length of each combination.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} A new iterator containing\n *     combinations from the `iterable`.\n * @template VALUE\n */\ngoog.iter.combinations = function(iterable, length) {\n  'use strict';\n  const elements = goog.iter.toArray(iterable);\n  const indexes = goog.iter.range(elements.length);\n  const indexIterator = goog.iter.permutations(indexes, length);\n  // sortedIndexIterator will now give arrays of with the given length that\n  // indicate what indexes into \"elements\" should be returned on each iteration.\n  const sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {\n    'use strict';\n    return goog.array.isSorted(arr);\n  });\n\n  const iter =\n      /** @type {!goog.iter.Iterator<VALUE>} */ (new goog.iter.Iterator());\n\n  function getIndexFromElements(index) {\n    return elements[index];\n  }\n  /**\n   * @return {!IIterableResult<!Array<VALUE>>}\n   * @override\n   */\n  iter.next = function() {\n    'use strict';\n    const {done, value} = sortedIndexIterator.next();\n    if (done) return goog.iter.ES6_ITERATOR_DONE;\n    return goog.iter.createEs6IteratorYield(\n        goog.array.map(value, getIndexFromElements));\n  };\n\n  return iter;\n};\n\n\n/**\n * Creates an iterator that returns combinations of elements from\n * `iterable`, with repeated elements possible.\n *\n * Combinations are obtained by taking the Cartesian product of `length`\n * iterables and filtering those whose elements appear in the order they are\n * encountered in `iterable`. For example, the 2-length combinations of\n * {@code [1,2,3]} are {@code [[1,1], [1,2], [1,3], [2,2], [2,3], [3,3]]}.\n * @see https://goo.gl/C0yXe4\n * @see https://goo.gl/djOCsk\n * @param {!goog.iter.Iterator<VALUE>|!goog.iter.Iterable} iterable The\n *     iterable to combine.\n * @param {number} length The length of each combination.\n * @return {!goog.iter.Iterator<!Array<VALUE>>} A new iterator containing\n *     combinations from the `iterable`.\n * @template VALUE\n */\ngoog.iter.combinationsWithReplacement = function(iterable, length) {\n  'use strict';\n  const elements = goog.iter.toArray(iterable);\n  const indexes = goog.array.range(elements.length);\n  const sets = goog.array.repeat(indexes, length);\n  const indexIterator = goog.iter.product.apply(undefined, sets);\n  // sortedIndexIterator will now give arrays of with the given length that\n  // indicate what indexes into \"elements\" should be returned on each iteration.\n  const sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {\n    'use strict';\n    return goog.array.isSorted(arr);\n  });\n\n  const iter =\n      /** @type {!goog.iter.Iterator<VALUE>} */ (new goog.iter.Iterator());\n\n  function getIndexFromElements(index) {\n    return elements[index];\n  }\n\n  /**\n   * @return {!IIterableResult<!Array<VALUE>>}\n   * @override\n   */\n  iter.next = function() {\n    'use strict';\n    const {done, value} = sortedIndexIterator.next();\n    if (done) return goog.iter.ES6_ITERATOR_DONE;\n    return goog.iter.createEs6IteratorYield(goog.array.map(\n        /** @type {!Array<number>} */ (value), getIndexFromElements));\n  };\n\n  return iter;\n};\n"],
"names":["goog","provide","require","iter","Iterable","Iterator","goog.iter.Iterator","prototype","next","goog.iter.Iterator.prototype.next","ES6_ITERATOR_DONE","debug","freeze","done","value","undefined","createEs6IteratorYield","goog.iter.createEs6IteratorYield","__iterator__","goog.iter.Iterator.prototype.__iterator__","opt_keys","toIterator","goog.iter.toIterator","iterable","isArrayLike","like","i","newIter","newIter.next","length","Error","forEach","goog.iter.forEach","f","opt_obj","array","iterator","call","filter","goog.iter.filter","filterFalse","goog.iter.filterFalse","functions","not","range","goog.iter.range","startOrStop","opt_stop","opt_step","start","stop","step","arguments","rv","join","goog.iter.join","deliminator","toArray","map","goog.iter.map","mappedVal","reduce","goog.iter.reduce","val","rval","some","goog.iter.some","every","goog.iter.every","chain","goog.iter.chain","var_args","chainFromIterable","goog.iter.chainFromIterable","iteratorOfIterators","current","iter.next","it","dropWhile","goog.iter.dropWhile","dropping","takeWhile","goog.iter.takeWhile","goog.iter.toArray","push","equals","goog.iter.equals","iterable1","iterable2","opt_equalsFn","fillValue","pairs","zipLongest","equalsFn","defaultCompareEquality","pair","nextOrValue","goog.iter.nextOrValue","defaultValue","product","goog.iter.product","someArrayEmpty","Array","arr","arrays","indices","repeat","retVal","valueIndex","arrayIndex","asserts","assert","cycle","goog.iter.cycle","baseIterator","cache","cacheIndex","useCache","returnElement","isEmpty","count","goog.iter.count","opt_start","counter","returnValue","goog.iter.repeat","accumulate","goog.iter.accumulate","total","zip","goog.iter.zip","args","iterators","allDone","goog.iter.zipLongest","slice","iteratorsHaveValues","compress","goog.iter.compress","selectors","valueIterator","selectorIterator","valIt","selectorIt","selectorVal","GroupByIterator_","goog.iter.GroupByIterator_","opt_keyFunc","keyFunc","identity","targetKey","currentKey","currentValue","inherits","goog.iter.GroupByIterator_.prototype.next","groupItems_","goog.iter.GroupByIterator_.prototype.groupItems_","groupBy","goog.iter.groupBy","starMap","goog.iter.starMap","apply","concat","tee","goog.iter.tee","opt_num","addNextIteratorValueToBuffers","buffer","buffers","createIterator","added","shift","num","enumerate","goog.iter.enumerate","limit","goog.iter.limit","limitSize","math","isInt","remaining","consume","goog.iter.consume","goog.iter.slice","opt_end","hasDuplicates_","goog.iter.hasDuplicates_","deduped","removeDuplicates","permutations","goog.iter.permutations","opt_length","elements","sets","combinations","goog.iter.combinations","getIndexFromElements","index","indexes","indexIterator","sortedIndexIterator","isSorted","combinationsWithReplacement","goog.iter.combinationsWithReplacement"]
}
