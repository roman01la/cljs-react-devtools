{"version":3,"sources":["uix/compiler/alpha.cljs"],"mappings":"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","names":["uix.compiler.alpha/reagent-component?","component-type","js/Object","p1__28851#","cljs.core/some","clojure.string/starts-with?","uix.compiler.alpha.goog$module$goog$object.get","uix.compiler.alpha/validate-component","and__5043__auto__","cljs.core/not","name-str","or__5045__auto__","js/Error","uix.compiler.alpha/normalise-args","js-props","props-children","cljs.core._EQ_","uix.compiler.alpha/pojo?","x","G__28866","uix.compiler.alpha/js-props?","tag","props","uix.compiler.alpha/create-element","args","children","child","js/module$node_modules$react$index.createElement","js/Object.assign","uix.compiler.alpha/uix-component-element","temp__5825__auto__","key","cljs.core.dissoc","uix.compiler.alpha/react-component-element","uix.compiler.attributes/interpret-attrs","uix.compiler.alpha/dynamic-element","tag-id-class","uix.compiler.attributes/parse-tag","uix.compiler.alpha/component-element","js/goog.DEBUG","cljs.core/Keyword"],"sourcesContent":["(ns uix.compiler.alpha\n  (:require [react]\n            [goog.object :as gobj]\n            [uix.compiler.attributes :as attrs]\n            [clojure.string :as str]))\n\n(defn- reagent-component? [^js component-type]\n  (->> (.keys js/Object component-type)\n       (some #(when (str/starts-with? % \"G_\")\n                (identical? component-type (gobj/get component-type %))))))\n\n(defn validate-component [^js component-type]\n  (when (and (not (.-uix-component? component-type))\n             (reagent-component? component-type))\n    (let [name-str (or (.-displayName component-type)\n                       (.-name component-type))]\n      (throw (js/Error. (str \"Invalid use of Reagent component \" name-str \" in `$` form.\\n\"\n                             \"UIx doesn't know how to render Reagent components.\\n\"\n                             \"Reagent element should be Hiccup wrapped with r/as-element, i.e. (r/as-element [\" name-str \"])\")))))\n  true)\n\n(defn- normalise-args [component-type js-props props-children]\n  (if (= 2 (.-length ^js props-children))\n    #js [component-type js-props (aget props-children 1)]\n    #js [component-type js-props]))\n\n(defn- pojo? [x]\n  (and (not (.hasOwnProperty x \"$$typeof\"))\n       (some-> x .-constructor (identical? js/Object))))\n\n(defn- js-props? [tag props]\n  (and (or (string? tag) (not (.-uix-component? ^js tag)))\n       props (pojo? props)))\n\n(defn create-element [args children]\n  (let [tag (aget args 0)\n        props (aget args 1)\n        child (aget args 2)]\n    (if (js-props? tag child)\n      ;; merge dynamic js props onto static ones\n      (.apply react/createElement nil (.concat #js [tag (js/Object.assign props child)] children))\n      (.apply react/createElement nil (.concat args children)))))\n\n(defn- uix-component-element [component-type ^js props-children children]\n  (let [props (aget props-children 0)\n        js-props (if-some [key (:key props)]\n                   #js {:key key :argv (dissoc props :key)}\n                   #js {:argv props})\n        args (normalise-args component-type js-props props-children)]\n    (create-element args children)))\n\n(defn- react-component-element [component-type ^js props-children children]\n  (let [js-props (-> (aget props-children 0)\n                     (attrs/interpret-attrs #js [] true)\n                     (aget 0))\n        args (normalise-args component-type js-props props-children)]\n    (create-element args children)))\n\n(defn- dynamic-element [component-type ^js props-children children]\n  (let [tag-id-class (attrs/parse-tag component-type)\n        js-props (-> (aget props-children 0)\n                     (attrs/interpret-attrs tag-id-class false)\n                     (aget 0))\n        tag (aget tag-id-class 0)\n        args (normalise-args tag js-props props-children)]\n    (create-element args children)))\n\n(defn component-element [^clj component-type props-children children]\n  (when ^boolean goog.DEBUG\n    (validate-component component-type))\n  (cond\n    (.-uix-component? component-type)\n    (uix-component-element component-type props-children children)\n\n    (keyword? component-type)\n    (dynamic-element component-type props-children children)\n\n    :else (react-component-element component-type props-children children)))\n"],"x_google_ignoreList":[0]}