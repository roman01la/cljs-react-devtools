{"version":3,"sources":["shadow/remote/runtime/shared.cljc"],"mappings":"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","names":["shadow.remote.runtime.shared/init-state","client-info","shadow.remote.runtime.shared/now","js/Date.now","p__30791","map__30792","cljs.core/--destructure-map","cljs.core.get","shadow.remote.runtime.shared/get-client-id","state-ref","runtime","or__5045__auto__","cljs.core/deref","cljs.core.ex_info","shadow.remote.runtime.shared/relay-msg","msg","self-id","cljs.core.not_EQ_","shadow.remote.runtime.api/relay-msg","js/Promise.resolve","G__30801","G__30802","shadow.remote.runtime.shared/process","cljs.core.assoc","p__30804","map__30805","shadow.remote.runtime.shared/reply","call-id","from","res","G__30806","var_args","G__30811","shadow.remote.runtime.shared/call","js/Error","p__30813","map__30814","handlers","shadow.remote.runtime.shared.call","timeout-after-ms","cljs.core/map?","cljs.core/nat-int?","cljs.core.swap_BANG_","cljs.core/update","cljs.core/inc","cljs.core/assoc-in","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","shadow.remote.runtime.shared/trigger!","p__30827","map__30828","seq30815","G__30816","cljs.core/first","cljs.core/next","G__30817","self__5754__auto__","ev","args","seq__30829","cljs.core/seq","chunk__30832","count__30833","i__30834","temp__5823__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","ext","cljs.core/vals","ev-fn","cljs.core.apply","p__30851","p__30852","map__30853","map__30855","shadow.remote.runtime.shared/welcome","client-id","cljs.core/assoc","map__30857","extensions","shadow.remote.runtime.shared/ping","p__30864","map__30865","shadow.remote.runtime.shared/request-supported-ops","cljs.core/keys","cljs.core/set","cljs.core.disj","shadow.remote.runtime.shared/unknown-relay-op","js/console.warn","shadow.remote.runtime.shared/unknown-op","p__30869","p__30870","map__30871","map__30872","shadow.remote.runtime.shared/add-extension*","state","key","ops","transit-write-handlers","spec","cljs.core/contains?","cljs.core/reduce-kv","op-kw","op-handler","cljs.core.get_in","p__30880","map__30881","shadow.remote.runtime.shared/add-extension","temp__5827__auto__","on-welcome","shadow.remote.runtime.shared/add-defaults","p1__30882#","p1__30883#","p1__30884#","p1__30885#","p1__30886#","shadow.remote.runtime.shared/del-extension*","cljs.core/not","cljs.core.update_in","cljs.core/dissoc","cljs.core.update","p__30892","map__30893","shadow.remote.runtime.shared/del-extension","shadow.remote.runtime.shared/unhandled-call-result","call-config","p__30898","map__30900","shadow.remote.runtime.shared/unhandled-client-not-found","shadow.remote.runtime.shared.trigger_BANG_","shadow.remote.runtime.shared/reply-unknown-op","p__30910","p__30911","map__30912","map__30913","op","cfg","call-handler","cljs.core._EQ_","shadow.remote.runtime.shared/run-on-idle","seq__30951","chunk__30953","count__30954","i__30955","map__30984","map__30992","on-idle"],"sourcesContent":["(ns shadow.remote.runtime.shared\n  (:require\n    [shadow.remote.runtime.api :as p]\n    #?@(:clj\n        [[shadow.jvm-log :as log]]\n        :cljs\n        [])))\n\n(defn init-state [client-info]\n  {:extensions {}\n   :ops {}\n   :client-info client-info\n   :call-id-seq 0\n   :call-handlers {}})\n\n(declare process)\n\n(defn now []\n  #?(:cljs (js/Date.now)\n     :clj (System/currentTimeMillis)))\n\n(defn get-client-id [{:keys [state-ref] :as runtime}]\n  (or (:client-id @state-ref)\n      (throw (ex-info \"runtime has no assigned runtime-id\" {:runtime runtime}))))\n\n(defn relay-msg [runtime msg]\n  (let [self-id (get-client-id runtime)]\n    ;; check if sending msg to ourselves, then we don't need to bother the relay\n    ;; FIXME: might be better to do this in p/relay-msg?\n    (if (not= (:to msg) self-id)\n      (p/relay-msg runtime msg)\n      ;; don't immediately process, the relay hop is async, so preserve that\n      ;; this is sort of hacky for messages that we are actually sending ourselves\n      ;; should at least send to the same queue the ws messages end up in?\n      #?(:clj\n         (future (process runtime (assoc msg :from self-id)))\n         :cljs\n         (-> (js/Promise.resolve 1)\n             (.then #(process runtime (assoc msg :from self-id)))))))\n\n  ;; just so nobody assumes this has a useful return value\n  msg)\n\n(defn reply [runtime {:keys [call-id from]} res]\n  (let [res (-> res\n                (cond->\n                  call-id\n                  (assoc :call-id call-id)\n                  from\n                  (assoc :to from)))]\n    (p/relay-msg runtime res)))\n\n(defn call\n  ([runtime msg handlers]\n   (call runtime msg handlers 0))\n  ([{:keys [state-ref] :as runtime}\n    msg\n    handlers\n    timeout-after-ms]\n   {:pre [(map? msg)\n          (map? handlers)\n          (nat-int? timeout-after-ms)]}\n   (let [call-id (:call-id-seq @state-ref)]\n     (swap! state-ref update :call-id-seq inc)\n     (swap! state-ref assoc-in [:call-handlers call-id]\n       {:handlers handlers\n        :called-at (now)\n        :msg msg\n        :timeout timeout-after-ms})\n     (p/relay-msg runtime (assoc msg :call-id call-id)))))\n\n(defn trigger! [{:keys [state-ref] :as runtime} ev & args]\n  (doseq [ext (vals (:extensions @state-ref))\n          :let [ev-fn (get ext ev)]\n          :when ev-fn]\n    (apply ev-fn args)))\n\n(defn welcome\n  [{:keys [state-ref] :as runtime} {:keys [client-id] :as msg}]\n  ;; #?(:cljs (js/console.log \"shadow.remote - runtime-id:\" rid))\n  (swap! state-ref assoc :client-id client-id :welcome true)\n\n  (let [{:keys [client-info extensions]} @state-ref]\n    (relay-msg runtime\n      {:op :hello\n       :client-info client-info})\n\n    (trigger! runtime :on-welcome)))\n\n(defn ping\n  [runtime msg]\n  (reply runtime msg {:op :pong}))\n\n(defn request-supported-ops\n  [{:keys [state-ref] :as runtime} msg]\n  (reply runtime msg\n    {:op :supported-ops\n     :ops (-> (:ops @state-ref)\n              (keys)\n              (set)\n              (disj :welcome :unknown-relay-op :unknown-op :request-supported-ops :tool-disconnect))}))\n\n(defn unknown-relay-op [msg]\n  #?(:cljs (js/console.warn \"unknown-relay-op\" msg)\n     :clj (log/warn ::unknown-relay-op msg)))\n\n(defn unknown-op [msg]\n  #?(:cljs (js/console.warn \"unknown-op\" msg)\n     :clj (log/warn ::unknown-op msg)))\n\n(defn add-extension*\n  [{:keys [extensions] :as state} key {:keys [ops transit-write-handlers] :as spec}]\n  (when (contains? extensions key)\n    (throw (ex-info \"extension already registered\" {:key key :spec spec})))\n\n  (reduce-kv\n    (fn [state op-kw op-handler]\n      (when (get-in state [:ops op-kw])\n        (throw (ex-info \"op already registered\" {:key key :op op-kw})))\n      (assoc-in state [:ops op-kw] op-handler))\n\n    (assoc-in state [:extensions key] spec)\n    ops))\n\n(defn add-extension [{:keys [state-ref] :as runtime} key spec]\n  (swap! state-ref add-extension* key spec)\n\n  ;; trigger on-welcome immediately if already welcome was already received\n  (when-some [on-welcome (:on-welcome spec)]\n    (when (:welcome @state-ref)\n      (on-welcome)))\n\n  runtime)\n\n(defn add-defaults [runtime]\n  (add-extension runtime\n    ::defaults\n    {:ops\n     {:welcome #(welcome runtime %)\n      :unknown-relay-op #(unknown-relay-op %)\n      :unknown-op #(unknown-op %)\n      :ping #(ping runtime %)\n      :request-supported-ops #(request-supported-ops runtime %)\n      }}))\n\n(defn del-extension* [state key]\n  (let [ext (get-in state [:extensions key])]\n    (if-not ext\n      state\n      (reduce-kv\n        (fn [state op-kw op-handler]\n          (update-in state [:ops] dissoc op-kw))\n\n        (update state :extensions dissoc key)\n        (:ops ext)))))\n\n(defn del-extension [{:keys [state-ref]} key]\n  (swap! state-ref del-extension* key))\n\n(defn unhandled-call-result [call-config msg]\n  #?(:cljs (js/console.warn \"unhandled call result\" msg call-config)\n     :clj (log/warn ::unhandled-call-result msg)))\n\n(defn unhandled-client-not-found\n  [{:keys [state-ref] :as runtime} msg]\n  (trigger! runtime :on-client-not-found msg))\n\n(defn reply-unknown-op [runtime msg]\n  (reply runtime msg {:op :unknown-op\n                      :msg msg}))\n\n(defn process [{:keys [state-ref] :as runtime} {:keys [op call-id] :as msg}]\n  ;; (js/console.log \"received from relay\" msg)\n  (let [state @state-ref\n        op-handler (get-in state [:ops op])]\n\n    (cond\n      ;; expecting rpc reply when mid is set\n      call-id\n      (let [cfg (get-in state [:call-handlers call-id])\n            call-handler (get-in cfg [:handlers op])]\n\n        ;; replies may either go to registered call handler\n        ;; or if that is missing to a global op handler\n        (cond\n          call-handler\n          (do (swap! state-ref update :call-handlers dissoc call-id)\n              (call-handler msg))\n\n          op-handler\n          (op-handler msg)\n\n          ;; nothing here to handle it\n          :else\n          (unhandled-call-result cfg msg)))\n\n      op-handler\n      (op-handler msg)\n\n      ;; don't want to reply with unknown-op to client-not-found\n      (= :client-not-found op)\n      (unhandled-client-not-found runtime msg)\n\n      :else\n      (reply-unknown-op runtime msg))))\n\n(defn run-on-idle [state-ref]\n  (doseq [{:keys [on-idle]} (-> @state-ref :extensions vals)\n          :when on-idle]\n    (on-idle)))"],"x_google_ignoreList":[0]}