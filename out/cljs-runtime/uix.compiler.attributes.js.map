{"version":3,"sources":["uix/compiler/attributes.cljs"],"mappings":"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","names":["uix.compiler.attributes/js-val?","x","goog/typeOf","uix.compiler.attributes/prop-name-cache","uix.compiler.attributes/custom-prop-name-cache","uix.compiler.attributes/cc-regexp","js/RegExp","uix.compiler.attributes/cc-fn","s","clojure.string/upper-case","uix.compiler.attributes/dash-to-camel","name-str","clojure.string/starts-with?","uix.compiler.attributes/keyword->string","cljs.core/Keyword","uix.compiler.attributes/cached-prop-name","k","temp__5825__auto__","k'","v","uix.compiler.attributes/cached-custom-prop-name","uix.compiler.attributes/convert-interop-prop-value","cljs.core._EQ_","cljs.core/vector?","a","uix.compiler.attributes/convert-prop-value-shallow","uix.compiler.attributes/kv-conv","o","uix.compiler.attributes.goog$module$goog$object.set","uix.compiler.attributes/convert-prop-value","uix.compiler.attributes/kv-conv-shallow","uix.compiler.attributes/custom-kv-conv","rest__28218#","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","cljs.core/ifn?","cljs.core.apply","uix.compiler.attributes/convert-custom-prop-value","rest__28225#","uix.compiler.attributes/class-names-coll","classes","cljs.core.reduce","c","uix.compiler.attributes/class-names","var_args","G__28279","args-arr__5794__auto__","len__5769__auto__","i__5770__auto__","argseq__5795__auto__","cljs.core/IndexedSeq","seq28269","G__28277","cljs.core/first","cljs.core/next","G__28278","self__5754__auto__","cljs.core/array?","b","uix.compiler.attributes.class_names","rst","uix.compiler.attributes/re-tag","uix.compiler.attributes/parse-tag","tag","tag-str","cljs.core/name","and__5043__auto__","cljs.core/not","cljs.core/re-matches","cljs.core/re-find","js/Error","vec__28305","cljs.core.nth","id","class-name","clojure.string/replace","uix.compiler.attributes/set-id-class","props","id-class","props-class","cljs.core.get","class","G__28317","cljs.core.assoc","or__5045__auto__","uix.compiler.attributes/convert-props","shallow?","uix.compiler.attributes/interpret-attrs","maybe-attrs","uix.compiler.attributes/interpret-props"],"sourcesContent":["(ns uix.compiler.attributes\n  (:require [clojure.string :as str]\n            [goog.object :as gobj]))\n\n(declare convert-prop-value)\n(declare convert-prop-value-shallow)\n\n(defn js-val? [x]\n  (not (identical? \"object\" (goog/typeOf x))))\n\n(def prop-name-cache\n  #js {:class \"className\"\n       :for \"htmlFor\"\n       :charset \"charSet\"\n       :class-id \"classID\"\n       :item-id \"itemID\"})\n\n(def custom-prop-name-cache #js {})\n\n(def ^:private cc-regexp (js/RegExp. \"-(\\\\w)\" \"g\"))\n\n(defn- cc-fn [s]\n  (str/upper-case (aget s 1)))\n\n(defn ^string dash-to-camel [^string name-str]\n  (if (or (str/starts-with? name-str \"aria-\")\n          (str/starts-with? name-str \"data-\"))\n    name-str\n    (.replace name-str cc-regexp cc-fn)))\n\n(defn keyword->string [x]\n  (if (keyword? x)\n    (-name ^not-native x)\n    x))\n\n(defn cached-prop-name [k]\n  (if (keyword? k)\n    (let [name-str (-name ^not-native k)]\n      (if-some [k' (aget prop-name-cache name-str)]\n        k'\n        (let [v (dash-to-camel name-str)]\n          (aset prop-name-cache name-str v)\n          v)))\n    k))\n\n(defn cached-custom-prop-name [k]\n  (if (keyword? k)\n    (let [name-str (-name ^not-native k)]\n      (if-some [k' (aget custom-prop-name-cache name-str)]\n        k'\n        (let [v (dash-to-camel name-str)]\n          (aset custom-prop-name-cache name-str v)\n          v)))\n    k))\n\n(defn convert-interop-prop-value [k v]\n  (cond\n    (= k :style) (if (vector? v)\n                   (-reduce ^not-native v\n                            (fn [a v]\n                              (.push a (convert-prop-value-shallow v))\n                              a)\n                            #js [])\n                   (convert-prop-value-shallow v))\n    (keyword? v) (-name ^not-native v)\n    :else v))\n\n(defn kv-conv [o k v]\n  (gobj/set o (cached-prop-name k) (convert-prop-value v))\n  o)\n\n(defn kv-conv-shallow [o k v]\n  (gobj/set o (cached-prop-name k) (convert-interop-prop-value k v))\n  o)\n\n(defn custom-kv-conv [o k v]\n  (gobj/set o (cached-custom-prop-name k) (convert-prop-value v))\n  o)\n\n(defn convert-prop-value [x]\n  (cond\n    (js-val? x) x\n    (keyword? x) (-name ^not-native x)\n    (map? x) (reduce-kv kv-conv #js {} x)\n    (coll? x) (clj->js x)\n    (ifn? x) #(apply x %&)\n    :else (clj->js x)))\n\n(defn convert-custom-prop-value [x]\n  (cond\n    (js-val? x) x\n    (keyword? x) (-name ^not-native x)\n    (map? x) (reduce-kv custom-kv-conv #js {} x)\n    (coll? x) (clj->js x)\n    (ifn? x) #(apply x %&)\n    :else (clj->js x)))\n\n(defn convert-prop-value-shallow [x]\n  (if (map? x)\n    (reduce-kv kv-conv-shallow #js {} x)\n    x))\n\n(declare class-names)\n\n(defn class-names-coll [classes]\n  (let [^js/Array classes (reduce (fn [^js/Array a c]\n                                    (when ^boolean c\n                                      (->> (if (keyword? c) (-name ^not-native c) (class-names c))\n                                           (.push a)))\n                                    a)\n                                  #js []\n                                  classes)]\n    (when (pos? (.-length classes))\n      (.join classes \" \"))))\n\n(defn ^string class-names\n  \"Merges a collection of class names into a string\"\n  ([a]\n   (cond\n     (or (array? a) (coll? a)) (class-names-coll a)\n     (keyword? a) (-name ^not-native a)\n     :else a))\n  ([a b]\n   (if ^boolean a\n     (if ^boolean b\n       (str (class-names a) \" \" (class-names b))\n       (class-names a))\n     (class-names b)))\n  ([a b & rst]\n   (reduce class-names (class-names a b) rst)))\n\n(def re-tag\n  \"HyperScript tag pattern :div :div#id.class etc.\"\n  #\"([^\\.#]*)(?:#([^\\.#]+))?(?:\\.([^#]+))?\")\n\n(defn parse-tag\n  \"Takes HyperScript tag (:div#id.class) and returns parsed tag, id and class fields,\n  and boolean indicating if tag name is a custom element (a custom DOM element that has hyphen in the name)\"\n  [tag]\n  (let [tag-str (name tag)]\n    (when (and (not (re-matches re-tag tag-str))\n               (re-find #\"[#\\.]\" tag-str))\n      ;; Throwing NPE here because shadow catches those to bring up error view in a browser\n      (throw (js/Error. (str \"Invalid tag name (found: \" tag-str \"). Make sure that the name matches the format and ordering is correct `:tag#id.class`\"))))\n    (let [[tag id class-name] (next (re-matches re-tag tag-str))\n          tag (if (= \"\" tag) \"div\" tag)\n          class-name (when-not (nil? class-name)\n                       (str/replace class-name #\"\\.\" \" \"))]\n      #js [tag id class-name (some? (re-find #\"-\" tag))])))\n\n(defn- set-id-class\n  \"Takes attributes map and parsed tag, and returns attributes merged with class names and id\"\n  [props id-class]\n  (let [props-class (get props :class)\n        id (aget id-class 1)\n        class (aget id-class 2)]\n    (cond-> props\n            ;; Only use ID from tag keyword if no :id in props already\n      (and (some? id) (nil? (get props :id)))\n      (assoc :id id)\n\n              ;; Merge classes\n      (or class props-class)\n      (assoc :class (class-names class props-class)))))\n\n(defn ^js convert-props\n  \"Converts `props` Clojure map into JS object suitable for\n  passing as `props` object into `React.createElement`\n\n  - `props` \u2014 Clojure map of props\n  - `id-class` \u2014 a triplet of parsed tag, id and class names\n  - `shallow?` \u2014 indicates whether `props` map should be converted shallowly or not\"\n  [props id-class ^boolean shallow?]\n  (let [props (set-id-class props id-class)]\n    (cond\n      ^boolean (aget id-class 3)\n      (convert-custom-prop-value props)\n\n      shallow?\n      (convert-prop-value-shallow props)\n\n      :else (convert-prop-value props))))\n\n(defn interpret-attrs\n  \"Returns a tuple of attributes and a child element\n\n  - [attrs] when `attrs` is actually a map of attributes\n  - [nil attrs] when `attrs` is not a map, thus a child element\"\n  [maybe-attrs id-class shallow?]\n  (if (map? maybe-attrs)\n    #js [(convert-props maybe-attrs id-class shallow?)]\n    #js [(convert-props {} id-class shallow?) maybe-attrs]))\n\n(defn interpret-props\n  \"Returns a tuple of component props and a child element\n\n  - [props] when `props` is actually a map of attributes\n  - [nil props] when `props` is not a map, thus a child element\"\n  [props]\n  (if (map? props)\n    #js [props]\n    #js [nil props]))\n"],"x_google_ignoreList":[0]}