{"version":3,"sources":["cljs_bean/from/cljs/core.cljs"],"mappings":"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","names":["var_args","G__37559","cljs-bean.from.cljs.core/-indexOf","js/Error","coll","x","cljs_bean.from.cljs.core._indexOf","start","len","cljs.core/count","idx","x__5130__auto__","y__5131__auto__","cljs.core._EQ_","cljs.core.nth","G__37567","cljs-bean.from.cljs.core/-lastIndexOf","cljs_bean.from.cljs.core._lastIndexOf","x__5133__auto__","y__5134__auto__","G__37594","cljs-bean.from.cljs.core/compare-indexed","xs","ys","xl","yl","cljs_bean.from.cljs.core.compare_indexed","n","d","cljs.core/compare","cljs-bean.from.cljs.core/equiv-sequential","y","cljs.core/boolean","cljs.core/sequential?","cljs.core/counted?","cljs.core/seq","cljs.core/first","cljs.core/next","G__37614","cljs-bean.from.cljs.core/ci-reduce","cicoll","f","cnt","val","nval","G__37635","G__37636","cljs.core/deref","cljs.core/reduced?","G__37657","G__37658","G__37664","G__37665","cljs-bean.from.cljs.core/TransientArrayMap-conj!","tcoll","o","editable?","cljs.core/map-entry?","cljs.core/key","cljs.core/val","cljs.core/vector?","es","temp__5821__auto__","e","cljs.core/-assoc!","cljs-bean.from.cljs.core/PersistentArrayMap-conj","entry","cljs.core/-nth","ret","cljs.core/-assoc","cljs-bean.from.cljs.core/TransientVector-assoc!","key","type-name","cljs-bean.from.cljs.core/PersistentVector-equiv","other","type","me-iter","you-iter","cljs.core/-iterator","cljs-bean.from.cljs.core/PersistentVector-lookup","k","not-found","cljs-bean.from.cljs.core/PersistentVector-assoc","v","cljs-bean.from.cljs.core/PersistentVector-contains-key?","cljs.core/integer?"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^:no-doc cljs-bean.from.cljs.core)\n\n;; Copied and made public, adding ^not-native hints\n(defn -indexOf\n  ([^not-native coll x]\n   (-indexOf coll x 0))\n  ([^not-native coll x start]\n   (let [len (count coll)]\n     (if (>= start len)\n       -1\n       (loop [idx (cond\n                    (pos? start) start\n                    (neg? start) (max 0 (+ start len))\n                    :else start)]\n         (if (< idx len)\n           (if (= (nth coll idx) x)\n             idx\n             (recur (inc idx)))\n           -1))))))\n\n;; Copied and made public, adding ^not-native hints\n(defn -lastIndexOf\n  ([^not-native coll x]\n   (-lastIndexOf coll x (count coll)))\n  ([^not-native coll x start]\n   (let [len (count coll)]\n     (if (zero? len)\n       -1\n       (loop [idx (cond\n                    (pos? start) (min (dec len) start)\n                    (neg? start) (+ len start)\n                    :else start)]\n         (if (>= idx 0)\n           (if (= (nth coll idx) x)\n             idx\n             (recur (dec idx)))\n           -1))))))\n\n;; Copied and made public, adding ^not-native hints\n(defn compare-indexed\n  \"Compare indexed collection.\"\n  ([^not-native xs ys]\n   (let [xl (count xs)\n         yl (count ys)]\n     (cond\n       (< xl yl) -1\n       (> xl yl) 1\n       (== xl 0) 0\n       :else (compare-indexed xs ys xl 0))))\n  ([^not-native xs ys len n]\n   (let [d (compare (nth xs n) (nth ys n))]\n     (if (and (zero? d) (< (+ n 1) len))\n       (recur xs ys len (inc n))\n       d))))\n\n;; Copied and made public, adding ^not-native hint\n(defn equiv-sequential\n  \"Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.\"\n  [^not-native x y]\n  (boolean\n    (when (sequential? y)\n      (if (and (counted? x) (counted? y)\n            (not (== (count x) (count y))))\n        false\n        (loop [xs (seq x) ys (seq y)]\n          (cond (nil? xs) (nil? ys)\n                (nil? ys) false\n                (= (first xs) (first ys)) (recur (next xs) (next ys))\n                :else false))))))\n\n;; Copied and made public, adding ^not-native hints\n(defn ci-reduce\n  \"Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization\"\n  ([^not-native cicoll f]\n   (let [cnt (-count cicoll)]\n     (if (zero? cnt)\n       (f)\n       (loop [val (-nth cicoll 0), n 1]\n         (if (< n cnt)\n           (let [nval (f val (-nth cicoll n))]\n             (if (reduced? nval)\n               @nval\n               (recur nval (inc n))))\n           val)))))\n  ([^not-native cicoll f val]\n   (let [cnt (-count cicoll)]\n     (loop [val val, n 0]\n       (if (< n cnt)\n         (let [nval (f val (-nth cicoll n))]\n           (if (reduced? nval)\n             @nval\n             (recur nval (inc n))))\n         val))))\n  ([^not-native cicoll f val idx]\n   (let [cnt (-count cicoll)]\n     (loop [val val, n idx]\n       (if (< n cnt)\n         (let [nval (f val (-nth cicoll n))]\n           (if (reduced? nval)\n             @nval\n             (recur nval (inc n))))\n         val)))))\n\n;; Copied from TransientArrayMap and modified with editable? param, adding ^not-native hint\n(defn TransientArrayMap-conj! [^not-native tcoll o editable?]\n  (if editable?\n    (cond\n      (map-entry? o)\n      (-assoc! tcoll (key o) (val o))\n\n      (vector? o)\n      (-assoc! tcoll (o 0) (o 1))\n\n      :else\n      (loop [es (seq o) tcoll tcoll]\n        (if-let [e (first es)]\n          (recur (next es)\n            (-assoc! tcoll (key e) (val e)))\n          tcoll)))\n    (throw (js/Error. \"conj! after persistent!\"))))\n\n;; Copied from PersistentArrayMap, adding ^not-native hint\n(defn PersistentArrayMap-conj [^not-native coll entry]\n  (if (vector? entry)\n    (-assoc coll (-nth entry 0) (-nth entry 1))\n    (loop [ret coll es (seq entry)]\n      (if (nil? es)\n        ret\n        (let [e (first es)]\n          (if (vector? e)\n            (recur (-assoc ret (-nth e 0) (-nth e 1))\n              (next es))\n            (throw (js/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))\n\n;; Copied from TransientVector and parameterized on type-name, adding ^not-native hint\n(defn TransientVector-assoc! [^not-native tcoll key val type-name]\n  (if (number? key)\n    (-assoc-n! tcoll key val)\n    (throw (js/Error. (str type-name \"'s key for assoc! must be a number.\")))))\n\n;; Copied from PersistentVector and parameterized on type and cnt, adding ^not-native hint\n(defn PersistentVector-equiv [^not-native coll other type cnt]\n  (if (instance? type other)\n    (if (== cnt (count other))\n      (let [me-iter  (-iterator coll)\n            you-iter (-iterator other)]\n        (loop []\n          (if ^boolean (.hasNext me-iter)\n            (let [x (.next me-iter)\n                  y (.next you-iter)]\n              (if (= x y)\n                (recur)\n                false))\n            true)))\n      false)\n    (equiv-sequential coll other)))\n\n;; Copied from PersistentVector, adding ^not-native hint\n(defn PersistentVector-lookup [^not-native coll k not-found]\n  (if (number? k)\n    (-nth coll k not-found)\n    not-found))\n\n;; Copied from PersistentVector, adding ^not-native hint\n(defn PersistentVector-assoc [^not-native coll k v]\n  (if (number? k)\n    (-assoc-n coll k v)\n    (throw (js/Error. \"Vector's key for assoc must be a number.\"))))\n\n;; Copied from PersistentVector an parameterized on cnt\n(defn PersistentVector-contains-key? [coll k cnt]\n  (if (integer? k)\n    (and (<= 0 k) (< k cnt))\n    false))\n"],"x_google_ignoreList":[0]}