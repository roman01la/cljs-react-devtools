{"version":3,"sources":["re_frame/settings.cljc"],"mappings":";AAKA,6BAAA,2CAAA,4DAAA,MAAA,1IAAKA,8NAEmBC;AAExB,AAAKC,0BACH,AAACC,6CAAKH;AAER,yBAAA,zBAACI;AAAD,AACE,OAACC,mDAAMH,wBAAM,WAAKI;AAAL,AAAQ,uDAAA,4DAAA,5GAACC,8CAAMD;;;AAE9B,kCAAA,lCAAME;AAAN,AAEE,OAAA,0FAAA,AAAAC,gBAAWP;;AAEb,gDAAA,hDAAMQ,wGACHC,oBAAoBC;AADvB,AAEE,OAACC,+CACA,WAAKC,IAAIC;AAAT,AACE,GAAI,AAACC,6CAAE,AAAA,gFAAKJ,aACL,AAAA,gFAAKG;AACV,AACE,GAAME;AAAN,AACE,GAAM,AAACC,cAAI,AAACV;AAAZ,AACE,8DAAA,uGAAA,rKAACW,6NAAsE,AAAA,gFAAKP;;AAD9E;;AADF;;AAGA,OAACQ,6CAAKN,IAAIF;;AACZ,OAACQ,6CAAKN,IAAIC;;GACdd,6BACAU;;AAEH,2CAAA,mDAAAU,9FAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;kBAAAA,dACmBV;SADnB,AAAAY,4CAAAF,eAAA,hEACWI;AADX,AAEE,mGAAA,5FAACrB,mDAAMH,wBAAMyB,qGACN,WAAKhB;AAAL,AACE,IAAMiB,MAAI,4CAAA,5CAACC,8FAAQlB;AAAnB,AACE,oBAAI,eAAA,fAACmB,8DAAOJ,KAAIE;AAGd,OAAClB,8CAA4BC,oBAAoBC;;AACjD,OAACQ,6CAAKT,oBAAoBC;;;;AAEzC,4CAAA,5CAAMmB;AAAN,AAEE,OAAA,kHAAA,AAAAtB,gBAAuBP;;AAEzB,AAAA,8CAAA,sDAAA8B,pGAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,0EAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4EAAA,5EAAMD;AAAN,AAEG,kGAAA,3FAAC7B,mDAAMH,wBAAMkC,oGAA2BnC;;;AAF3C,CAAA,4EAAA,5EAAMiC,uFAGFR;AAHJ,AAIG,mGAAA,5FAACrB,mDAAMH,wBAAMyB,qGACN,WAAKhB;AAAL,AACE,OAAC0B,6CAAKpC,6BAAoB,+CAAA,WAAAqC,1DAACC;AAAD,AAAS,OAACvB,6CAAEU,GAAG,AAAA,gFAAAY;GAAS3B;;;;AAN9D,CAAA,sEAAA,tEAAMuB;;AAAN","names":["re-frame.settings/defaults","re-frame.interop/empty-queue","re-frame.settings/store","cljs.core.atom","re-frame.interop/on-load","cljs.core.swap_BANG_","m","cljs.core.assoc","re-frame.settings/loaded?","cljs.core/deref","re-frame.settings/-replace-global-interceptor","global-interceptors","interceptor","cljs.core.reduce","ret","existing-interceptor","cljs.core._EQ_","re-frame.interop/debug-enabled?","cljs.core/not","re_frame.loggers.console","cljs.core.conj","p__40212","map__40213","cljs.core/--destructure-map","cljs.core.get","re-frame.settings/reg-global-interceptor","id","cljs.core/update","ids","cljs.core.map","cljs.core/some","re-frame.settings/get-global-interceptors","var_args","G__40216","re-frame.settings/clear-global-interceptors","js/Error","cljs.core/assoc","cljs.core.into","p1__40214#","cljs.core.remove"],"sourcesContent":["(ns re-frame.settings\n  (:require\n   [re-frame.interop :as interop]\n   [re-frame.loggers :refer [console]]))\n\n(def defaults\n  {:loaded?             false\n   :global-interceptors interop/empty-queue})\n\n(def store\n  (atom defaults))\n\n(interop/on-load\n #(swap! store (fn [m] (assoc m :loaded? true))))\n\n(defn loaded?\n  []\n  (:loaded? @store))\n\n(defn -replace-global-interceptor\n  [global-interceptors interceptor]\n  (reduce\n   (fn [ret existing-interceptor]\n     (if (= (:id interceptor)\n            (:id existing-interceptor))\n       (do\n         (when interop/debug-enabled?\n           (when (not (loaded?))\n             (console :warn \"re-frame: replacing duplicate global interceptor id: \" (:id interceptor))))\n         (conj ret interceptor))\n       (conj ret existing-interceptor)))\n   interop/empty-queue\n   global-interceptors))\n\n(defn reg-global-interceptor\n  [{:keys [id] :as interceptor}]\n  (swap! store update :global-interceptors\n         (fn [global-interceptors]\n           (let [ids (map :id global-interceptors)]\n             (if (some #{id} ids)\n               ;; If the id already exists we replace it in-place to maintain the ordering of\n               ;; global interceptors esp during hot-code reloading in development.\n               (-replace-global-interceptor global-interceptors interceptor)\n               (conj global-interceptors interceptor))))))\n\n(defn get-global-interceptors\n  []\n  (:global-interceptors @store))\n\n(defn clear-global-interceptors\n  ([]\n   (swap! store assoc :global-interceptors interop/empty-queue))\n  ([id]\n   (swap! store update :global-interceptors\n          (fn [global-interceptors]\n            (into interop/empty-queue (remove #(= id (:id %)) global-interceptors))))))\n"],"x_google_ignoreList":[0]}