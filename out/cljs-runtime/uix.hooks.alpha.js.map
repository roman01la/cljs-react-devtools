{"version":3,"sources":["uix/hooks/alpha.cljs"],"mappings":";;AAIA,+BAAA,/BAAOA,sEAAcC,GAAGC;AAAxB,AACE,GAAI,AAACC,6CAAEF,GAAGC;AACRA;;AACAD;;;AAEJ;;;;4CAAA,5CAAOG,gGAGJC;AAHH,AAIE,OAACC,4CACA;mCAAKC,EAAIC;AAAT,AACE,IAAAC,WACC,WAAKP;AAAL,AACE,GAAI,AAACQ,oBAAIH;AACP,OAACP,6BAAa,AAACW,8CAAMJ,EAAEL,GAAGM,MAAMN;;AAChC,OAACF,6BAAaO,EAAEL;;;AAJrB,AAAA,sFAAAO,+BAAAA,7GAACJ,wCAAAA,kDAAAA;;yBADEE;IAAIC;;;;EAAAA;;oCAAJD,EAAIC;;;IAAJD;IAAIC;0BAAJD,EAAIC;;;;;CADV,CAOMH;;AAIR,4BAAA,5BAAMO,gEAAWC;AAAjB,AACE,IAAAC,aAAwB,AAACI,yCAAWL;YAApC,AAAAE,4CAAAD,WAAA,IAAA,nEAAOE;gBAAP,AAAAD,4CAAAD,WAAA,IAAA,vEAAaG;IACPA,gBAAU,AAACb,0CAA0Ba;AAD3C,AAAA,QAEOD,MAAMC;;AAEf;;;gDAAA,hDAAOE,wGAEJC;AAFH,AAGE,kBAAKJ,MAAMK;AAAX,AACE,OAACrB,6BAAa,CAACoB,kCAAAA,gDAAAA,hBAAEJ,6BAAAA,vBAAMK,6BAAAA,SAAQL;;;AAEnC,AAAA,8BAAA,sCAAAM,pEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4DAAA,5DAAMD,uEACFJ,EAAEP;AADN,AAEG,IAAMR,UAAQ,AAACc,8CAA8BC;AAA7C,AACE,OAACM,2CAAarB,QAAQQ;;;AAH3B,CAAA,4DAAA,5DAAMW,uEAIFJ,EAAEP,MAAMc;AAJZ,AAKG,IAAMtB,UAAQ,AAACc,8CAA8BC;AAA7C,AACE,OAACM,2CAAarB,QAAQQ,MAAMc;;;AANjC,CAAA,sDAAA,tDAAMH;;AAAN,AAUA,0BAAA,1BAAMI,4DAASf;AAAf,AACE,OAACgB,uCAAShB;;AAGZ,0CAAA,1CAAMiB,4FAAyBV;AAA/B,AAAA;AAAA,AACG,IAAMW,MAAI,CAACX,kCAAAA,oCAAAA;AAAX,AACE,GAAI,AAACV,oBAAIqB;AAAKA;;AAAIC;;;;AAEvB,+BAAA,/BAAMC,sEAAcC;AAApB,AACE,IAAMC,MAAI,AAACN,uCAASK;AAApB,AACE,GAAM,AAACE,gDAAK,AAAWD,YAAKD;AAA5B,AACE,CAAM,AAAWC,cAAKD;;AADxB;;AAEA,OAAWC;;AAEf,AAAA,6BAAA,qCAAAb,lEAAMgB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAb,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2DAAA,3DAAMa,sEACFC;AADJ,AAEG,OAACC,0CAAY,AAACV,wCAAwBS;;;AAFzC,CAAA,2DAAA,3DAAMD,sEAGFC,SAASL;AAHb,AAIG,OAACM,0CACA,AAACV,wCAAwBS,UACzBL;;;AANJ,CAAA,qDAAA,rDAAMI;;AAAN,AASA,AAAA,oCAAA,4CAAAhB,hFAAMoB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,gEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,gEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAjB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,kEAAA,lEAAMiB,6EACFH;AADJ,AAEG,OAACI,gDACA,AAACb,wCAAwBS;;;AAH7B,CAAA,kEAAA,lEAAMG,6EAIFH,SAASL;AAJb,AAKG,OAACS,gDACA,AAACb,wCAAwBS,UACzBL;;;AAPJ,CAAA,4DAAA,5DAAMQ;;AAAN,AAUA,AAAA,uCAAA,+CAAApB,tFAAMuB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,mEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAApB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,qEAAA,rEAAMoB,gFACFzB;AADJ,AAEG,OAAC0B,mDACA,AAAChB,wCAAwBV;;;AAH7B,CAAA,qEAAA,rEAAMyB,gFAIFzB,EAAEc;AAJN,AAKG,OAACY,mDACA,AAAChB,wCAAwBV,GACzBc;;;AAPJ,CAAA,+DAAA,/DAAMW;;AAAN,AAUA,+BAAA,/BAAME,sEACH3B,EAAEc;AADL,AAEE,OAAC5B,4CAAcc,EAAEc;;AAGnB,2BAAA,3BAAMc,8DACH5B,EAAEc;AADL,AAEE,OAACe,wCAAU7B,EAAEc;;AAGf,8BAAA,9BAAMgB,oEAAa3C;AAAnB,AACE,OAAC4C,2CAAa5C;;AAGhB,AAAA,wCAAA,gDAAAe,xFAAM+B;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA5B,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,sEAAA,tEAAM4B,iFACFlB,IAAImB;AADR,AAEG,OAACC,oDAAsBpB,IAAImB;;;AAF9B,CAAA,sEAAA,tEAAMD,iFAGFlB,IAAImB,cAAcpB;AAHtB,AAIG,OAACqB,oDAAsBpB,IAAImB,cAAcpB;;;AAJ5C,CAAA,gEAAA,hEAAMmB;;AAAN,AAOA,AAAA,4BAAA,oCAAA/B,hEAAMmC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAhC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0DAAA,1DAAMgC,qEACFlD;AADJ,AAEG,iEAAA,1DAACmD,wDAAUnD;;;AAFd,CAAA,0DAAA,1DAAMkD,qEAGFlD,EAAEoD;AAHN,AAIG,OAACC,8CAAgBrD,EAAEoD;;;AAJtB,CAAA,oDAAA,pDAAMF;;AAAN,AAMA,qCAAA,rCAAMI,kFAAoBtD;AAA1B,AACE,OAACuD,iDAAmBvD;;AAEtB,iCAAA,jCAAMwD;AAAN,AACE,OAACC;;AAEH,yBAAA,zBAAMC;AAAN,AACE,OAACC;;AAEH,AAAA,0CAAA,kDAAA5C,5FAAM8C;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA3C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,wEAAA,xEAAM2C,mFACFC,UAAUC;AADd,AAEG,OAACC,qDAAuBF,UAAUC;;;AAFrC,CAAA,wEAAA,xEAAMF,mFAGFC,UAAUC,aAAaE;AAH3B,AAIG,OAACD,qDAAuBF,UAAUC,aAAaE;;;AAJlD,CAAA,kEAAA,lEAAMJ;;AAAN","names":["uix.hooks.alpha/choose-value","nv","cv","cljs.core._EQ_","uix.hooks.alpha/use-clojure-aware-updater","updater","js/module$node_modules$react$index.useCallback","v","args","G__28144","cljs.core/fn?","cljs.core.apply","uix.hooks.alpha/use-state","value","vec__28145","cljs.core.nth","state","set-state","js/module$node_modules$react$index.useState","uix.hooks.alpha/clojure-aware-reducer-updater","f","action","var_args","G__28174","uix.hooks.alpha/use-reducer","js/Error","js/module$node_modules$react$index.useReducer","init-state","uix.hooks.alpha/use-ref","js/module$node_modules$react$index.useRef","uix.hooks.alpha/with-return-value-check","ret","js/undefined","uix.hooks.alpha/use-clj-deps","deps","ref","cljs.core.not_EQ_","G__28235","uix.hooks.alpha/use-effect","setup-fn","js/module$node_modules$react$index.useEffect","G__28264","uix.hooks.alpha/use-layout-effect","js/module$node_modules$react$index.useLayoutEffect","G__28274","uix.hooks.alpha/use-insertion-effect","js/module$node_modules$react$index.useInsertionEffect","uix.hooks.alpha/use-callback","uix.hooks.alpha/use-memo","js/module$node_modules$react$index.useMemo","uix.hooks.alpha/use-context","js/module$node_modules$react$index.useContext","G__28282","uix.hooks.alpha/use-imperative-handle","create-handle","js/module$node_modules$react$index.useImperativeHandle","G__28289","uix.hooks.alpha/use-debug","uix.hooks.alpha.use_debug","fmt","js/module$node_modules$react$index.useDebugValue","uix.hooks.alpha/use-deferred-value","js/module$node_modules$react$index.useDeferredValue","uix.hooks.alpha/use-transition","js/module$node_modules$react$index.useTransition","uix.hooks.alpha/use-id","js/module$node_modules$react$index.useId","G__28303","uix.hooks.alpha/use-sync-external-store","subscribe","get-snapshot","js/module$node_modules$react$index.useSyncExternalStore","get-server-snapshot"],"sourcesContent":["(ns uix.hooks.alpha\n  \"Wrappers for React Hooks\"\n  (:require [react :as r]))\n\n(defn- choose-value [nv cv]\n  (if (= nv cv)\n    cv\n    nv))\n\n(defn- use-clojure-aware-updater\n  \"Replicates React's behaviour when updating state with identical JS value,\n  but using Clojure's value equality here\"\n  [updater]\n  (react/useCallback\n   (fn [v & args]\n     (updater\n      (fn [cv]\n        (if (fn? v)\n          (choose-value (apply v cv args) cv)\n          (choose-value v cv)))))\n   #js [updater]))\n\n;; == State hook ==\n\n(defn use-state [value]\n  (let [[state set-state] (r/useState value)\n        set-state (use-clojure-aware-updater set-state)]\n    #js [state set-state]))\n\n(defn- clojure-aware-reducer-updater\n  \"Same as `use-clojure-primitive-aware-updater` but for `use-reducer`\"\n  [f]\n  (fn [state action]\n    (choose-value (f state action) state)))\n\n(defn use-reducer\n  ([f value]\n   (let [updater (clojure-aware-reducer-updater f)]\n     (r/useReducer updater value)))\n  ([f value init-state]\n   (let [updater (clojure-aware-reducer-updater f)]\n     (r/useReducer updater value init-state))))\n\n;; == Ref hook\n\n(defn use-ref [value]\n  (r/useRef value))\n\n;; == Effect hook ==\n(defn with-return-value-check [f]\n  #(let [ret (f)]\n     (if (fn? ret) ret js/undefined)))\n\n(defn use-clj-deps [deps]\n  (let [ref (r/useRef deps)]\n    (when (not= (.-current ref) deps)\n      (set! (.-current ref) deps))\n    (.-current ref)))\n\n(defn use-effect\n  ([setup-fn]\n   (r/useEffect (with-return-value-check setup-fn)))\n  ([setup-fn deps]\n   (r/useEffect\n    (with-return-value-check setup-fn)\n    deps)))\n\n;; == Layout effect hook ==\n(defn use-layout-effect\n  ([setup-fn]\n   (r/useLayoutEffect\n    (with-return-value-check setup-fn)))\n  ([setup-fn deps]\n   (r/useLayoutEffect\n    (with-return-value-check setup-fn)\n    deps)))\n\n;; == Insertion effect hook ==\n(defn use-insertion-effect\n  ([f]\n   (r/useInsertionEffect\n    (with-return-value-check f)))\n  ([f deps]\n   (r/useInsertionEffect\n    (with-return-value-check f)\n    deps)))\n\n;; == Callback hook ==\n(defn use-callback\n  [f deps]\n  (r/useCallback f deps))\n\n;; == Memo hook ==\n(defn use-memo\n  [f deps]\n  (r/useMemo f deps))\n\n;; == Context hook ==\n(defn use-context [v]\n  (r/useContext v))\n\n;; == Imperative Handle hook ==\n(defn use-imperative-handle\n  ([ref create-handle]\n   (r/useImperativeHandle ref create-handle))\n  ([ref create-handle deps]\n   (r/useImperativeHandle ref create-handle deps)))\n\n;; == Debug hook ==\n(defn use-debug\n  ([v]\n   (use-debug v nil))\n  ([v fmt]\n   (r/useDebugValue v fmt)))\n\n(defn use-deferred-value [v]\n  (r/useDeferredValue v))\n\n(defn use-transition []\n  (r/useTransition))\n\n(defn use-id []\n  (r/useId))\n\n(defn use-sync-external-store\n  ([subscribe get-snapshot]\n   (r/useSyncExternalStore subscribe get-snapshot))\n  ([subscribe get-snapshot get-server-snapshot]\n   (r/useSyncExternalStore subscribe get-snapshot get-server-snapshot)))\n"],"x_google_ignoreList":[0]}