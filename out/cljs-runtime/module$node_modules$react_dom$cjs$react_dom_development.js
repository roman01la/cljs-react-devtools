shadow$provide.module$node_modules$react_dom$cjs$react_dom_development = function(global, require, module, exports) {
  (function() {
    function warn(format) {
      if (!suppressWarning) {
        for (var _len = arguments.length, args = Array(1 < _len ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        printWarning("warn", format, args);
      }
    }
    function error(format) {
      if (!suppressWarning) {
        for (var _len2 = arguments.length, args = Array(1 < _len2 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        printWarning("error", format, args);
      }
    }
    function printWarning(level, format, args) {
      var stack = ReactSharedInternals.ReactDebugCurrentFrame.getStackAddendum();
      "" !== stack && (format += "%s", args = args.concat([stack]));
      args = args.map(function(item) {
        return String(item);
      });
      args.unshift("Warning: " + format);
      Function.prototype.apply.call(console[level], console, args);
    }
    function registerTwoPhaseEvent(registrationName, dependencies) {
      registerDirectEvent(registrationName, dependencies);
      registerDirectEvent(registrationName + "Capture", dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
      registrationNameDependencies[registrationName] && error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
      registrationNameDependencies[registrationName] = dependencies;
      var lowerCasedName = registrationName.toLowerCase();
      possibleRegistrationNames[lowerCasedName] = registrationName;
      "onDoubleClick" === registrationName && (possibleRegistrationNames.ondblclick = registrationName);
      for (registrationName = 0; registrationName < dependencies.length; registrationName++) {
        allNativeEvents.add(dependencies[registrationName]);
      }
    }
    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
        return !0;
      }
      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
        return !1;
      }
      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
        return validatedAttributeNameCache[attributeName] = !0;
      }
      illegalAttributeNameCache[attributeName] = !0;
      error("Invalid attribute name: `%s`", attributeName);
      return !1;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
      return null !== propertyInfo ? 0 === propertyInfo.type : isCustomComponentTag ? !1 : !(2 < name.length) || "o" !== name[0] && "O" !== name[0] || "n" !== name[1] && "N" !== name[1] ? !1 : !0;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
      if (null !== propertyInfo && 0 === propertyInfo.type) {
        return !1;
      }
      switch(typeof value) {
        case "function":
        case "symbol":
          return !0;
        case "boolean":
          if (isCustomComponentTag) {
            return !1;
          }
          if (null !== propertyInfo) {
            return !propertyInfo.acceptsBooleans;
          }
          name = name.toLowerCase().slice(0, 5);
          return "data-" !== name && "aria-" !== name;
        default:
          return !1;
      }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
      if (null === value || "undefined" === typeof value || shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
        return !0;
      }
      if (isCustomComponentTag) {
        return !1;
      }
      if (null !== propertyInfo) {
        switch(propertyInfo.type) {
          case 3:
            return !value;
          case 4:
            return !1 === value;
          case 5:
            return isNaN(value);
          case 6:
            return isNaN(value) || 1 > value;
        }
      }
      return !1;
    }
    function getPropertyInfo(name) {
      return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
      this.acceptsBooleans = 2 === type || 3 === type || 4 === type;
      this.attributeName = attributeName;
      this.attributeNamespace = attributeNamespace;
      this.mustUseProperty = mustUseProperty;
      this.propertyName = name;
      this.type = type;
      this.sanitizeURL = sanitizeURL;
      this.removeEmptyString = removeEmptyString;
    }
    function sanitizeURL(url) {
      !didWarn && isJavaScriptProtocol.test(url) && (didWarn = !0, error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url)));
    }
    function getValueForAttribute(node, name, expected, isCustomComponentTag) {
      if (isAttributeNameSafe(name)) {
        if (!node.hasAttribute(name)) {
          return void 0 === expected ? void 0 : null;
        }
        node = node.getAttribute(name);
        return node === "" + expected ? expected : node;
      }
    }
    function setValueForProperty(node, name, value, isCustomComponentTag) {
      var propertyInfo = getPropertyInfo(name);
      if (!shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) && (value = null), isCustomComponentTag || null === propertyInfo) {
          isAttributeNameSafe(name) && (null === value ? node.removeAttribute(name) : node.setAttribute(name, "" + value));
        } else {
          if (propertyInfo.mustUseProperty) {
            node[propertyInfo.propertyName] = null === value ? 3 === propertyInfo.type ? !1 : "" : value;
          } else {
            if (name = propertyInfo.attributeName, isCustomComponentTag = propertyInfo.attributeNamespace, null === value) {
              node.removeAttribute(name);
            } else {
              var _type = propertyInfo.type;
              3 === _type || 4 === _type && !0 === value ? value = "" : (value = "" + value, propertyInfo.sanitizeURL && sanitizeURL(value.toString()));
              isCustomComponentTag ? node.setAttributeNS(isCustomComponentTag, name, value) : node.setAttribute(name, value);
            }
          }
        }
      }
    }
    function getIteratorFn(maybeIterable) {
      if (null === maybeIterable || "object" !== typeof maybeIterable) {
        return null;
      }
      maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
      return "function" === typeof maybeIterable ? maybeIterable : null;
    }
    function disabledLog() {
    }
    function disableLogs() {
      if (0 === disabledDepth) {
        prevLog = console.log;
        prevInfo = console.info;
        prevWarn = console.warn;
        prevError = console.error;
        prevGroup = console.group;
        prevGroupCollapsed = console.groupCollapsed;
        prevGroupEnd = console.groupEnd;
        var props = {configurable:!0, enumerable:!0, value:disabledLog, writable:!0};
        Object.defineProperties(console, {info:props, log:props, warn:props, error:props, group:props, groupCollapsed:props, groupEnd:props});
      }
      disabledDepth++;
    }
    function reenableLogs() {
      disabledDepth--;
      if (0 === disabledDepth) {
        var props = {configurable:!0, enumerable:!0, writable:!0};
        Object.defineProperties(console, {log:assign({}, props, {value:prevLog}), info:assign({}, props, {value:prevInfo}), warn:assign({}, props, {value:prevWarn}), error:assign({}, props, {value:prevError}), group:assign({}, props, {value:prevGroup}), groupCollapsed:assign({}, props, {value:prevGroupCollapsed}), groupEnd:assign({}, props, {value:prevGroupEnd})});
      }
      0 > disabledDepth && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      if (void 0 === prefix) {
        try {
          throw Error();
        } catch (x) {
          prefix = (source = x.stack.trim().match(/\n( *(at )?)/)) && source[1] || "";
        }
      }
      return "\n" + prefix + name;
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry) {
        return "";
      }
      var frame = componentFrameCache.get(fn);
      if (void 0 !== frame) {
        return frame;
      }
      reentry = !0;
      frame = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var previousDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = null;
      disableLogs();
      try {
        if (construct) {
          if (construct = function() {
            throw Error();
          }, Object.defineProperty(construct.prototype, "props", {set:function() {
            throw Error();
          }}), "object" === typeof Reflect && Reflect.construct) {
            try {
              Reflect.construct(construct, []);
            } catch (x) {
              var control = x;
            }
            Reflect.construct(fn, [], construct);
          } else {
            try {
              construct.call();
            } catch (x) {
              control = x;
            }
            fn.call(construct.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        if (sample && control && "string" === typeof sample.stack) {
          for (var sampleLines = sample.stack.split("\n"), controlLines = control.stack.split("\n"), s = sampleLines.length - 1, c = controlLines.length - 1; 1 <= s && 0 <= c && sampleLines[s] !== controlLines[c];) {
            c--;
          }
          for (; 1 <= s && 0 <= c; s--, c--) {
            if (sampleLines[s] !== controlLines[c]) {
              if (1 !== s || 1 !== c) {
                do {
                  if (s--, c--, 0 > c || sampleLines[s] !== controlLines[c]) {
                    var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                    fn.displayName && _frame.includes("\x3canonymous\x3e") && (_frame = _frame.replace("\x3canonymous\x3e", fn.displayName));
                    "function" === typeof fn && componentFrameCache.set(fn, _frame);
                    return _frame;
                  }
                } while (1 <= s && 0 <= c);
              }
              break;
            }
          }
        }
      } finally {
        reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = frame;
      }
      control = (control = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(control) : "";
      "function" === typeof fn && componentFrameCache.set(fn, control);
      return control;
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (null == type) {
        return "";
      }
      if ("function" === typeof type) {
        return source = type.prototype, describeNativeComponentFrame(type, !(!source || !source.isReactComponent));
      }
      if ("string" === typeof type) {
        return describeBuiltInComponentFrame(type);
      }
      switch(type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame("Suspense");
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame("SuspenseList");
      }
      if ("object" === typeof type) {
        switch(type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return type = describeNativeComponentFrame(type.render, !1), type;
          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_LAZY_TYPE:
            var payload = type._payload;
            type = type._init;
            try {
              return describeUnknownElementTypeFrameInDEV(type(payload), source, ownerFn);
            } catch (x) {
            }
        }
      }
      return "";
    }
    function describeFiber(fiber) {
      switch(fiber.tag) {
        case 5:
          return describeBuiltInComponentFrame(fiber.type);
        case 16:
          return describeBuiltInComponentFrame("Lazy");
        case 13:
          return describeBuiltInComponentFrame("Suspense");
        case 19:
          return describeBuiltInComponentFrame("SuspenseList");
        case 0:
        case 2:
        case 15:
          return fiber = describeNativeComponentFrame(fiber.type, !1), fiber;
        case 11:
          return fiber = describeNativeComponentFrame(fiber.type.render, !1), fiber;
        case 1:
          return fiber = describeNativeComponentFrame(fiber.type, !0), fiber;
        default:
          return "";
      }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
      try {
        var info = "";
        do {
          info += describeFiber(workInProgress), workInProgress = workInProgress.return;
        } while (workInProgress);
        return info;
      } catch (x) {
        return "\nError generating stack: " + x.message + "\n" + x.stack;
      }
    }
    function getComponentNameFromType(type) {
      if (null == type) {
        return null;
      }
      "number" === typeof type.tag && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
      if ("function" === typeof type) {
        return type.displayName || type.name || null;
      }
      if ("string" === typeof type) {
        return type;
      }
      switch(type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if ("object" === typeof type) {
        switch(type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Consumer";
          case REACT_PROVIDER_TYPE:
            return (type._context.displayName || "Context") + ".Provider";
          case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
            return type;
          case REACT_MEMO_TYPE:
            return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
              return getComponentNameFromType(type(innerType));
            } catch (x) {
            }
        }
      }
      return null;
    }
    function getComponentNameFromFiber(fiber) {
      var type = fiber.type;
      switch(fiber.tag) {
        case 24:
          return "Cache";
        case 9:
          return (type.displayName || "Context") + ".Consumer";
        case 10:
          return (type._context.displayName || "Context") + ".Provider";
        case 18:
          return "DehydratedFragment";
        case 11:
          return fiber = type.render, fiber = fiber.displayName || fiber.name || "", type.displayName || ("" !== fiber ? "ForwardRef(" + fiber + ")" : "ForwardRef");
        case 7:
          return "Fragment";
        case 5:
          return type;
        case 4:
          return "Portal";
        case 3:
          return "Root";
        case 6:
          return "Text";
        case 16:
          return getComponentNameFromType(type);
        case 8:
          return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
        case 22:
          return "Offscreen";
        case 12:
          return "Profiler";
        case 21:
          return "Scope";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 25:
          return "TracingMarker";
        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
          if ("function" === typeof type) {
            return type.displayName || type.name || null;
          }
          if ("string" === typeof type) {
            return type;
          }
      }
      return null;
    }
    function getCurrentFiberOwnerNameInDevOrNull() {
      if (null === current) {
        return null;
      }
      var owner = current._debugOwner;
      return null !== owner && "undefined" !== typeof owner ? getComponentNameFromFiber(owner) : null;
    }
    function getCurrentFiberStackInDev() {
      return null === current ? "" : getStackByFiberInDevAndProd(current);
    }
    function resetCurrentFiber() {
      current = ReactDebugCurrentFrame.getCurrentStack = null;
      isRendering = !1;
    }
    function setCurrentFiber(fiber) {
      ReactDebugCurrentFrame.getCurrentStack = null === fiber ? null : getCurrentFiberStackInDev;
      current = fiber;
      isRendering = !1;
    }
    function getToStringValue(value) {
      switch(typeof value) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return value;
        case "object":
          return value;
        default:
          return "";
      }
    }
    function checkControlledValueProps(tagName, props) {
      hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || null == props.value || error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
      props.onChange || props.readOnly || props.disabled || null == props.checked || error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCheckable(elem) {
      var type = elem.type;
      return (elem = elem.nodeName) && "input" === elem.toLowerCase() && ("checkbox" === type || "radio" === type);
    }
    function trackValueOnNode(node) {
      var valueField = isCheckable(node) ? "checked" : "value", descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField), currentValue = "" + node[valueField];
      if (!node.hasOwnProperty(valueField) && "undefined" !== typeof descriptor && "function" === typeof descriptor.get && "function" === typeof descriptor.set) {
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {configurable:!0, get:function() {
          return get.call(this);
        }, set:function(value) {
          currentValue = "" + value;
          set.call(this, value);
        }});
        Object.defineProperty(node, valueField, {enumerable:descriptor.enumerable});
        return {getValue:function() {
          return currentValue;
        }, setValue:function(value) {
          currentValue = "" + value;
        }, stopTracking:function() {
          node._valueTracker = null;
          delete node[valueField];
        }};
      }
    }
    function track(node) {
      node._valueTracker || (node._valueTracker = trackValueOnNode(node));
    }
    function updateValueIfChanged(node) {
      if (!node) {
        return !1;
      }
      var tracker = node._valueTracker;
      if (!tracker) {
        return !0;
      }
      var lastValue = tracker.getValue();
      var value = "";
      node && (value = isCheckable(node) ? node.checked ? "true" : "false" : node.value);
      node = value;
      return node !== lastValue ? (tracker.setValue(node), !0) : !1;
    }
    function getActiveElement(doc) {
      doc = doc || ("undefined" !== typeof document ? document : void 0);
      if ("undefined" === typeof doc) {
        return null;
      }
      try {
        return doc.activeElement || doc.body;
      } catch (e) {
        return doc.body;
      }
    }
    function isControlled(props) {
      return "checkbox" === props.type || "radio" === props.type ? null != props.checked : null != props.value;
    }
    function getHostProps(element, props) {
      var checked = props.checked;
      return assign({}, props, {defaultChecked:void 0, defaultValue:void 0, value:void 0, checked:null != checked ? checked : element._wrapperState.initialChecked});
    }
    function initWrapperState(element, props) {
      checkControlledValueProps("input", props);
      void 0 === props.checked || void 0 === props.defaultChecked || didWarnCheckedDefaultChecked || (error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 
      "A component", props.type), didWarnCheckedDefaultChecked = !0);
      void 0 === props.value || void 0 === props.defaultValue || didWarnValueDefaultValue || (error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", 
      props.type), didWarnValueDefaultValue = !0);
      var defaultValue = null == props.defaultValue ? "" : props.defaultValue;
      element._wrapperState = {initialChecked:null != props.checked ? props.checked : props.defaultChecked, initialValue:getToStringValue(null != props.value ? props.value : defaultValue), controlled:isControlled(props)};
    }
    function updateChecked(element, props) {
      props = props.checked;
      null != props && setValueForProperty(element, "checked", props, !1);
    }
    function updateWrapper(element, props) {
      var controlled = isControlled(props);
      element._wrapperState.controlled || !controlled || didWarnUncontrolledToControlled || (error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), didWarnUncontrolledToControlled = !0);
      !element._wrapperState.controlled || controlled || didWarnControlledToUncontrolled || (error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"), didWarnControlledToUncontrolled = !0);
      updateChecked(element, props);
      controlled = getToStringValue(props.value);
      var type = props.type;
      if (null != controlled) {
        if ("number" === type) {
          if (0 === controlled && "" === element.value || element.value != controlled) {
            element.value = "" + controlled;
          }
        } else {
          element.value !== "" + controlled && (element.value = "" + controlled);
        }
      } else if ("submit" === type || "reset" === type) {
        element.removeAttribute("value");
        return;
      }
      props.hasOwnProperty("value") ? setDefaultValue(element, props.type, controlled) : props.hasOwnProperty("defaultValue") && setDefaultValue(element, props.type, getToStringValue(props.defaultValue));
      null == props.checked && null != props.defaultChecked && (element.defaultChecked = !!props.defaultChecked);
    }
    function postMountWrapper(element, props, isHydrating) {
      if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
        var type = props.type;
        if (!("submit" !== type && "reset" !== type || void 0 !== props.value && null !== props.value)) {
          return;
        }
        props = "" + element._wrapperState.initialValue;
        isHydrating || props === element.value || (element.value = props);
        element.defaultValue = props;
      }
      isHydrating = element.name;
      "" !== isHydrating && (element.name = "");
      element.defaultChecked = !element.defaultChecked;
      element.defaultChecked = !!element._wrapperState.initialChecked;
      "" !== isHydrating && (element.name = isHydrating);
    }
    function setDefaultValue(node, type, value) {
      if ("number" !== type || getActiveElement(node.ownerDocument) !== node) {
        null == value ? node.defaultValue = "" + node._wrapperState.initialValue : node.defaultValue !== "" + value && (node.defaultValue = "" + value);
      }
    }
    function validateProps(element, props) {
      null == props.value && ("object" === typeof props.children && null !== props.children ? React.Children.forEach(props.children, function(child) {
        null == child || "string" === typeof child || "number" === typeof child || didWarnInvalidChild || (didWarnInvalidChild = !0, error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to \x3coption\x3e."));
      }) : null == props.dangerouslySetInnerHTML || didWarnInvalidInnerHTML || (didWarnInvalidInnerHTML = !0, error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.")));
      null == props.selected || didWarnSelectedSetOnOption || (error("Use the `defaultValue` or `value` props on \x3cselect\x3e instead of setting `selected` on \x3coption\x3e."), didWarnSelectedSetOnOption = !0);
    }
    function getDeclarationErrorAddendum() {
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();
      return ownerName ? "\n\nCheck the render method of `" + ownerName + "`." : "";
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
      node = node.options;
      if (multiple) {
        multiple = {};
        for (var i = 0; i < propValue.length; i++) {
          multiple["$" + propValue[i]] = !0;
        }
        for (propValue = 0; propValue < node.length; propValue++) {
          i = multiple.hasOwnProperty("$" + node[propValue].value), node[propValue].selected !== i && (node[propValue].selected = i), i && setDefaultSelected && (node[propValue].defaultSelected = !0);
        }
      } else {
        propValue = "" + getToStringValue(propValue);
        multiple = null;
        for (i = 0; i < node.length; i++) {
          if (node[i].value === propValue) {
            node[i].selected = !0;
            setDefaultSelected && (node[i].defaultSelected = !0);
            return;
          }
          null !== multiple || node[i].disabled || (multiple = node[i]);
        }
        null !== multiple && (multiple.selected = !0);
      }
    }
    function initWrapperState$1(element, props) {
      checkControlledValueProps("select", props);
      for (var i = 0; i < valuePropNames.length; i++) {
        var propName = valuePropNames[i];
        if (null != props[propName]) {
          var propNameIsArray = isArrayImpl(props[propName]);
          props.multiple && !propNameIsArray ? error("The `%s` prop supplied to \x3cselect\x3e must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum()) : !props.multiple && propNameIsArray && error("The `%s` prop supplied to \x3cselect\x3e must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
      }
      element._wrapperState = {wasMultiple:!!props.multiple};
      void 0 === props.value || void 0 === props.defaultValue || didWarnValueDefaultValue$1 || (error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnValueDefaultValue$1 = !0);
    }
    function getHostProps$2(element, props) {
      if (null != props.dangerouslySetInnerHTML) {
        throw Error("`dangerouslySetInnerHTML` does not make sense on \x3ctextarea\x3e.");
      }
      return assign({}, props, {value:void 0, defaultValue:void 0, children:"" + element._wrapperState.initialValue});
    }
    function initWrapperState$2(element, props) {
      checkControlledValueProps("textarea", props);
      void 0 === props.value || void 0 === props.defaultValue || didWarnValDefaultVal || (error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component"), didWarnValDefaultVal = 
      !0);
      var initialValue = props.value;
      if (null == initialValue) {
        initialValue = props.children;
        props = props.defaultValue;
        if (null != initialValue) {
          error("Use the `defaultValue` or `value` props instead of setting children on \x3ctextarea\x3e.");
          if (null != props) {
            throw Error("If you supply `defaultValue` on a \x3ctextarea\x3e, do not pass children.");
          }
          if (isArrayImpl(initialValue)) {
            if (1 < initialValue.length) {
              throw Error("\x3ctextarea\x3e can only have at most one child.");
            }
            initialValue = initialValue[0];
          }
          props = initialValue;
        }
        null == props && (props = "");
        initialValue = props;
      }
      element._wrapperState = {initialValue:getToStringValue(initialValue)};
    }
    function updateWrapper$1(element, props) {
      var value = getToStringValue(props.value), defaultValue = getToStringValue(props.defaultValue);
      null != value && (value = "" + value, value !== element.value && (element.value = value), null == props.defaultValue && element.defaultValue !== value && (element.defaultValue = value));
      null != defaultValue && (element.defaultValue = "" + defaultValue);
    }
    function postMountWrapper$3(element, props) {
      props = element.textContent;
      props === element._wrapperState.initialValue && "" !== props && null !== props && (element.value = props);
    }
    function getIntrinsicNamespace(type) {
      switch(type) {
        case "svg":
          return "http://www.w3.org/2000/svg";
        case "math":
          return "http://www.w3.org/1998/Math/MathML";
        default:
          return "http://www.w3.org/1999/xhtml";
      }
    }
    function getChildNamespace(parentNamespace, type) {
      return null == parentNamespace || "http://www.w3.org/1999/xhtml" === parentNamespace ? getIntrinsicNamespace(type) : "http://www.w3.org/2000/svg" === parentNamespace && "foreignObject" === type ? "http://www.w3.org/1999/xhtml" : parentNamespace;
    }
    function dangerousStyleValue(name, value, isCustomProperty) {
      return null == value || "boolean" === typeof value || "" === value ? "" : isCustomProperty || "number" !== typeof value || 0 === value || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name] ? ("" + value).trim() : value + "px";
    }
    function setValueForStyles(node, styles) {
      node = node.style;
      for (var styleName in styles) {
        if (styles.hasOwnProperty(styleName)) {
          var isCustomProperty = 0 === styleName.indexOf("--");
          isCustomProperty || warnValidStyle$1(styleName, styles[styleName]);
          var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
          "float" === styleName && (styleName = "cssFloat");
          isCustomProperty ? node.setProperty(styleName, styleValue) : node[styleName] = styleValue;
        }
      }
    }
    function expandShorthandMap(styles) {
      var expanded = {}, key;
      for (key in styles) {
        styles = shorthandToLonghand[key] || [key];
        for (var i = 0; i < styles.length; i++) {
          expanded[styles[i]] = key;
        }
      }
      return expanded;
    }
    function assertValidProps(tag, props) {
      if (props) {
        if (voidElementTags[tag] && (null != props.children || null != props.dangerouslySetInnerHTML)) {
          throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        }
        if (null != props.dangerouslySetInnerHTML) {
          if (null != props.children) {
            throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          }
          if ("object" !== typeof props.dangerouslySetInnerHTML || !("__html" in props.dangerouslySetInnerHTML)) {
            throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          }
        }
        !props.suppressContentEditableWarning && props.contentEditable && null != props.children && error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (null != props.style && "object" !== typeof props.style) {
          throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style\x3d{{marginRight: spacing + 'em'}} when using JSX.");
        }
      }
    }
    function isCustomComponent(tagName, props) {
      if (-1 === tagName.indexOf("-")) {
        return "string" === typeof props.is;
      }
      switch(tagName) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return !1;
        default:
          return !0;
      }
    }
    function validateProperty(tagName, name) {
      if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
        return !0;
      }
      if (rARIACamel.test(name)) {
        tagName = "aria-" + name.slice(4).toLowerCase();
        tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
        if (null == tagName) {
          return error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties[name] = !0;
        }
        if (name !== tagName) {
          return error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, tagName), warnedProperties[name] = !0;
        }
      }
      if (rARIA.test(name)) {
        tagName = name.toLowerCase();
        tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
        if (null == tagName) {
          return warnedProperties[name] = !0, !1;
        }
        name !== tagName && (error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, tagName), warnedProperties[name] = !0);
      }
      return !0;
    }
    function warnInvalidARIAProps(type, props) {
      var invalidProps = [], key;
      for (key in props) {
        validateProperty(type, key) || invalidProps.push(key);
      }
      props = invalidProps.map(function(prop) {
        return "`" + prop + "`";
      }).join(", ");
      1 === invalidProps.length ? error("Invalid aria prop %s on \x3c%s\x3e tag. For details, see https://reactjs.org/link/invalid-aria-props", props, type) : 1 < invalidProps.length && error("Invalid aria props %s on \x3c%s\x3e tag. For details, see https://reactjs.org/link/invalid-aria-props", props, type);
    }
    function getEventTarget(nativeEvent) {
      nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
      nativeEvent.correspondingUseElement && (nativeEvent = nativeEvent.correspondingUseElement);
      return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;
    }
    function restoreStateOfTarget(target) {
      if (target = getInstanceFromNode(target)) {
        if ("function" !== typeof restoreImpl) {
          throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        }
        var stateNode = target.stateNode;
        stateNode && (stateNode = getFiberCurrentPropsFromNode(stateNode), restoreImpl(target.stateNode, target.type, stateNode));
      }
    }
    function enqueueStateRestore(target) {
      restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
    }
    function restoreStateIfNeeded() {
      if (restoreTarget) {
        var target = restoreTarget, queuedTargets = restoreQueue;
        restoreQueue = restoreTarget = null;
        restoreStateOfTarget(target);
        if (queuedTargets) {
          for (target = 0; target < queuedTargets.length; target++) {
            restoreStateOfTarget(queuedTargets[target]);
          }
        }
      }
    }
    function batchedUpdates(fn, a, b) {
      if (isInsideEventHandler) {
        return fn(a, b);
      }
      isInsideEventHandler = !0;
      try {
        return batchedUpdatesImpl(fn, a, b);
      } finally {
        if (isInsideEventHandler = !1, null !== restoreTarget || null !== restoreQueue) {
          flushSyncImpl(), restoreStateIfNeeded();
        }
      }
    }
    function getListener(inst, registrationName) {
      var stateNode = inst.stateNode;
      if (null === stateNode) {
        return null;
      }
      var props = getFiberCurrentPropsFromNode(stateNode);
      if (null === props) {
        return null;
      }
      stateNode = props[registrationName];
      a: {
        switch(registrationName) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
            inst = !props;
            break a;
          default:
            inst = !1;
        }
      }
      if (inst) {
        return null;
      }
      if (stateNode && "function" !== typeof stateNode) {
        throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof stateNode + "` type.");
      }
      return stateNode;
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
      var funcArgs = Array.prototype.slice.call(arguments, 3);
      try {
        func.apply(context, funcArgs);
      } catch (error) {
        this.onError(error);
      }
    }
    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      hasError = !1;
      caughtError = null;
      invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      invokeGuardedCallback.apply(this, arguments);
      if (hasError) {
        var error = clearCaughtError();
        hasRethrowError || (hasRethrowError = !0, rethrowError = error);
      }
    }
    function clearCaughtError() {
      if (hasError) {
        var error = caughtError;
        hasError = !1;
        caughtError = null;
        return error;
      }
      throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    function getNearestMountedFiber(fiber) {
      var node = fiber, nearestMounted = fiber;
      if (fiber.alternate) {
        for (; node.return;) {
          node = node.return;
        }
      } else {
        fiber = node;
        do {
          node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return;
        } while (fiber);
      }
      return 3 === node.tag ? nearestMounted : null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
      if (13 === fiber.tag) {
        var suspenseState = fiber.memoizedState;
        null === suspenseState && (fiber = fiber.alternate, null !== fiber && (suspenseState = fiber.memoizedState));
        if (null !== suspenseState) {
          return suspenseState.dehydrated;
        }
      }
      return null;
    }
    function assertIsMounted(fiber) {
      if (getNearestMountedFiber(fiber) !== fiber) {
        throw Error("Unable to find node on an unmounted component.");
      }
    }
    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;
      if (!alternate) {
        alternate = getNearestMountedFiber(fiber);
        if (null === alternate) {
          throw Error("Unable to find node on an unmounted component.");
        }
        return alternate !== fiber ? null : fiber;
      }
      for (var a = fiber, b = alternate;;) {
        var parentA = a.return;
        if (null === parentA) {
          break;
        }
        var parentB = parentA.alternate;
        if (null === parentB) {
          b = parentA.return;
          if (null !== b) {
            a = b;
            continue;
          }
          break;
        }
        if (parentA.child === parentB.child) {
          for (parentB = parentA.child; parentB;) {
            if (parentB === a) {
              return assertIsMounted(parentA), fiber;
            }
            if (parentB === b) {
              return assertIsMounted(parentA), alternate;
            }
            parentB = parentB.sibling;
          }
          throw Error("Unable to find node on an unmounted component.");
        }
        if (a.return !== b.return) {
          a = parentA, b = parentB;
        } else {
          for (var didFindChild = !1, _child = parentA.child; _child;) {
            if (_child === a) {
              didFindChild = !0;
              a = parentA;
              b = parentB;
              break;
            }
            if (_child === b) {
              didFindChild = !0;
              b = parentA;
              a = parentB;
              break;
            }
            _child = _child.sibling;
          }
          if (!didFindChild) {
            for (_child = parentB.child; _child;) {
              if (_child === a) {
                didFindChild = !0;
                a = parentB;
                b = parentA;
                break;
              }
              if (_child === b) {
                didFindChild = !0;
                b = parentB;
                a = parentA;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
            }
          }
        }
        if (a.alternate !== b) {
          throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      if (3 !== a.tag) {
        throw Error("Unable to find node on an unmounted component.");
      }
      return a.stateNode.current === a ? fiber : alternate;
    }
    function findCurrentHostFiber(parent) {
      parent = findCurrentFiberUsingSlowPath(parent);
      return null !== parent ? findCurrentHostFiberImpl(parent) : null;
    }
    function findCurrentHostFiberImpl(node) {
      if (5 === node.tag || 6 === node.tag) {
        return node;
      }
      for (node = node.child; null !== node;) {
        var match = findCurrentHostFiberImpl(node);
        if (null !== match) {
          return match;
        }
        node = node.sibling;
      }
      return null;
    }
    function findCurrentHostFiberWithNoPortalsImpl(node) {
      if (5 === node.tag || 6 === node.tag) {
        return node;
      }
      for (node = node.child; null !== node;) {
        if (4 !== node.tag) {
          var match = findCurrentHostFiberWithNoPortalsImpl(node);
          if (null !== match) {
            return match;
          }
        }
        node = node.sibling;
      }
      return null;
    }
    function injectInternals(internals) {
      if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
        return !1;
      }
      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (hook.isDisabled) {
        return !0;
      }
      if (!hook.supportsFiber) {
        return error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"), !0;
      }
      try {
        internals = assign({}, internals, {getLaneLabelMap, injectProfilingHooks}), rendererID = hook.inject(internals), injectedHook = hook;
      } catch (err) {
        error("React instrumentation encountered an error: %s.", err);
      }
      return hook.checkDCE ? !0 : !1;
    }
    function onCommitRoot(root, eventPriority) {
      if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot) {
        try {
          var didError = 128 === (root.current.flags & 128);
          switch(eventPriority) {
            case DiscreteEventPriority:
              var schedulerPriority = ImmediatePriority;
              break;
            case ContinuousEventPriority:
              schedulerPriority = UserBlockingPriority;
              break;
            case DefaultEventPriority:
              schedulerPriority = NormalPriority;
              break;
            case IdleEventPriority:
              schedulerPriority = IdlePriority;
              break;
            default:
              schedulerPriority = NormalPriority;
          }
          injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
        } catch (err) {
          hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
        }
      }
    }
    function setIsStrictModeForDevtools(newIsStrictMode) {
      "function" === typeof unstable_yieldValue && (unstable_setDisableYieldValue(newIsStrictMode), suppressWarning = newIsStrictMode);
      if (injectedHook && "function" === typeof injectedHook.setStrictMode) {
        try {
          injectedHook.setStrictMode(rendererID, newIsStrictMode);
        } catch (err) {
          hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
        }
      }
    }
    function injectProfilingHooks(profilingHooks) {
      injectedProfilingHooks = profilingHooks;
    }
    function getLaneLabelMap() {
      for (var map = new Map(), lane = 1, index = 0; index < TotalLanes; index++) {
        var label = getLabelForLane(lane);
        map.set(lane, label);
        lane *= 2;
      }
      return map;
    }
    function markCommitStopped() {
      null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markCommitStopped && injectedProfilingHooks.markCommitStopped();
    }
    function markComponentRenderStarted(fiber) {
      null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentRenderStarted && injectedProfilingHooks.markComponentRenderStarted(fiber);
    }
    function markComponentRenderStopped() {
      null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentRenderStopped && injectedProfilingHooks.markComponentRenderStopped();
    }
    function markComponentLayoutEffectUnmountStarted(fiber) {
      null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted && injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
    }
    function markComponentLayoutEffectUnmountStopped() {
      null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped && injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
    }
    function markRenderStarted(lanes) {
      null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderStarted && injectedProfilingHooks.markRenderStarted(lanes);
    }
    function markRenderStopped() {
      null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderStopped && injectedProfilingHooks.markRenderStopped();
    }
    function markStateUpdateScheduled(fiber, lane) {
      null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markStateUpdateScheduled && injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
    }
    function clz32Fallback(x) {
      x >>>= 0;
      return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
    }
    function getLabelForLane(lane) {
      if (lane & SyncLane) {
        return "Sync";
      }
      if (lane & InputContinuousHydrationLane) {
        return "InputContinuousHydration";
      }
      if (lane & InputContinuousLane) {
        return "InputContinuous";
      }
      if (lane & DefaultHydrationLane) {
        return "DefaultHydration";
      }
      if (lane & DefaultLane) {
        return "Default";
      }
      if (lane & TransitionHydrationLane) {
        return "TransitionHydration";
      }
      if (lane & TransitionLanes) {
        return "Transition";
      }
      if (lane & RetryLanes) {
        return "Retry";
      }
      if (lane & SelectiveHydrationLane) {
        return "SelectiveHydration";
      }
      if (lane & IdleHydrationLane) {
        return "IdleHydration";
      }
      if (lane & IdleLane) {
        return "Idle";
      }
      if (lane & OffscreenLane) {
        return "Offscreen";
      }
    }
    function getHighestPriorityLanes(lanes) {
      switch(lanes & -lanes) {
        case SyncLane:
          return SyncLane;
        case InputContinuousHydrationLane:
          return InputContinuousHydrationLane;
        case InputContinuousLane:
          return InputContinuousLane;
        case DefaultHydrationLane:
          return DefaultHydrationLane;
        case DefaultLane:
          return DefaultLane;
        case TransitionHydrationLane:
          return TransitionHydrationLane;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return lanes & TransitionLanes;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return lanes & RetryLanes;
        case SelectiveHydrationLane:
          return SelectiveHydrationLane;
        case IdleHydrationLane:
          return IdleHydrationLane;
        case IdleLane:
          return IdleLane;
        case OffscreenLane:
          return OffscreenLane;
        default:
          return error("Should have found matching lanes. This is a bug in React."), lanes;
      }
    }
    function getNextLanes(root, wipLanes) {
      var pendingLanes = root.pendingLanes;
      if (0 === pendingLanes) {
        return 0;
      }
      var nextLanes = 0, suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, nonIdlePendingLanes = pendingLanes & 268435455;
      if (0 !== nonIdlePendingLanes) {
        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
        0 !== nonIdleUnblockedLanes ? nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes && (nextLanes = getHighestPriorityLanes(pingedLanes)));
      } else {
        nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes && (nextLanes = getHighestPriorityLanes(pingedLanes));
      }
      if (0 === nextLanes) {
        return 0;
      }
      if (0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, pingedLanes = wipLanes & -wipLanes, suspendedLanes >= pingedLanes || suspendedLanes === DefaultLane && 0 !== (pingedLanes & TransitionLanes))) {
        return wipLanes;
      }
      0 !== (nextLanes & InputContinuousLane) && (nextLanes |= pendingLanes & DefaultLane);
      wipLanes = root.entangledLanes;
      if (0 !== wipLanes) {
        for (root = root.entanglements, wipLanes &= nextLanes; 0 < wipLanes;) {
          pendingLanes = 31 - clz32(wipLanes), suspendedLanes = 1 << pendingLanes, nextLanes |= root[pendingLanes], wipLanes &= ~suspendedLanes;
        }
      }
      return nextLanes;
    }
    function computeExpirationTime(lane, currentTime) {
      switch(lane) {
        case SyncLane:
        case InputContinuousHydrationLane:
        case InputContinuousLane:
          return currentTime + 250;
        case DefaultHydrationLane:
        case DefaultLane:
        case TransitionHydrationLane:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return currentTime + 5000;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return -1;
        case SelectiveHydrationLane:
        case IdleHydrationLane:
        case IdleLane:
        case OffscreenLane:
          return -1;
        default:
          return error("Should have found matching lanes. This is a bug in React."), -1;
      }
    }
    function markStarvedLanesAsExpired(root, currentTime) {
      for (var suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, expirationTimes = root.expirationTimes, lanes = root.pendingLanes; 0 < lanes;) {
        var index = 31 - clz32(lanes), lane = 1 << index, expirationTime = expirationTimes[index];
        if (-1 === expirationTime) {
          if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes)) {
            expirationTimes[index] = computeExpirationTime(lane, currentTime);
          }
        } else {
          expirationTime <= currentTime && (root.expiredLanes |= lane);
        }
        lanes &= ~lane;
      }
    }
    function getLanesToRetrySynchronouslyOnError(root) {
      root = root.pendingLanes & ~OffscreenLane;
      return 0 !== root ? root : root & OffscreenLane ? OffscreenLane : 0;
    }
    function claimNextTransitionLane() {
      var lane = nextTransitionLane;
      nextTransitionLane <<= 1;
      0 === (nextTransitionLane & TransitionLanes) && (nextTransitionLane = 64);
      return lane;
    }
    function createLaneMap(initial) {
      for (var laneMap = [], i = 0; i < TotalLanes; i++) {
        laneMap.push(initial);
      }
      return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
      root.pendingLanes |= updateLane;
      updateLane !== IdleLane && (root.suspendedLanes = 0, root.pingedLanes = 0);
      root = root.eventTimes;
      updateLane = 31 - clz32(updateLane);
      root[updateLane] = eventTime;
    }
    function markRootFinished(root, remainingLanes) {
      var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
      root.pendingLanes = remainingLanes;
      root.suspendedLanes = 0;
      root.pingedLanes = 0;
      root.expiredLanes &= remainingLanes;
      root.mutableReadLanes &= remainingLanes;
      root.entangledLanes &= remainingLanes;
      remainingLanes = root.entanglements;
      var eventTimes = root.eventTimes;
      for (root = root.expirationTimes; 0 < noLongerPendingLanes;) {
        var index = 31 - clz32(noLongerPendingLanes), lane = 1 << index;
        remainingLanes[index] = 0;
        eventTimes[index] = -1;
        root[index] = -1;
        noLongerPendingLanes &= ~lane;
      }
    }
    function markRootEntangled(root, entangledLanes) {
      var rootEntangledLanes = root.entangledLanes |= entangledLanes;
      for (root = root.entanglements; rootEntangledLanes;) {
        var index = 31 - clz32(rootEntangledLanes), lane = 1 << index;
        lane & entangledLanes | root[index] & entangledLanes && (root[index] |= entangledLanes);
        rootEntangledLanes &= ~lane;
      }
    }
    function addFiberToLanesMap(root, fiber, lanes) {
      if (isDevToolsPresent) {
        for (root = root.pendingUpdatersLaneMap; 0 < lanes;) {
          var index = 31 - clz32(lanes), lane = 1 << index;
          root[index].add(fiber);
          lanes &= ~lane;
        }
      }
    }
    function movePendingFibersToMemoized(root, lanes) {
      if (isDevToolsPresent) {
        for (var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap, memoizedUpdaters = root.memoizedUpdaters; 0 < lanes;) {
          var index = 31 - clz32(lanes);
          root = 1 << index;
          index = pendingUpdatersLaneMap[index];
          0 < index.size && (index.forEach(function(fiber) {
            var alternate = fiber.alternate;
            null !== alternate && memoizedUpdaters.has(alternate) || memoizedUpdaters.add(fiber);
          }), index.clear());
          lanes &= ~root;
        }
      }
    }
    function lanesToEventPriority(lanes) {
      lanes &= -lanes;
      return 0 !== DiscreteEventPriority && DiscreteEventPriority < lanes ? 0 !== ContinuousEventPriority && ContinuousEventPriority < lanes ? 0 !== (lanes & 268435455) ? DefaultEventPriority : IdleEventPriority : ContinuousEventPriority : DiscreteEventPriority;
    }
    function clearIfContinuousEvent(domEventName, nativeEvent) {
      switch(domEventName) {
        case "focusin":
        case "focusout":
          queuedFocus = null;
          break;
        case "dragenter":
        case "dragleave":
          queuedDrag = null;
          break;
        case "mouseover":
        case "mouseout":
          queuedMouse = null;
          break;
        case "pointerover":
        case "pointerout":
          queuedPointers.delete(nativeEvent.pointerId);
          break;
        case "gotpointercapture":
        case "lostpointercapture":
          queuedPointerCaptures.delete(nativeEvent.pointerId);
      }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (null === existingQueuedEvent || existingQueuedEvent.nativeEvent !== nativeEvent) {
        return existingQueuedEvent = {blockedOn, domEventName, eventSystemFlags, nativeEvent, targetContainers:[targetContainer]}, null !== blockedOn && (blockedOn = getInstanceFromNode(blockedOn), null !== blockedOn && attemptContinuousHydration(blockedOn)), existingQueuedEvent;
      }
      existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
      blockedOn = existingQueuedEvent.targetContainers;
      null !== targetContainer && -1 === blockedOn.indexOf(targetContainer) && blockedOn.push(targetContainer);
      return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      switch(domEventName) {
        case "focusin":
          return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent), !0;
        case "dragenter":
          return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent), !0;
        case "mouseover":
          return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent), !0;
        case "pointerover":
          var pointerId = nativeEvent.pointerId;
          queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent));
          return !0;
        case "gotpointercapture":
          return pointerId = nativeEvent.pointerId, queuedPointerCaptures.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)), !0;
      }
      return !1;
    }
    function attemptExplicitHydrationTarget(queuedTarget) {
      var targetInst = getClosestInstanceFromNode(queuedTarget.target);
      if (null !== targetInst) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (null !== nearestMounted) {
          if (targetInst = nearestMounted.tag, 13 === targetInst) {
            if (targetInst = getSuspenseInstanceFromFiber(nearestMounted), null !== targetInst) {
              queuedTarget.blockedOn = targetInst;
              attemptHydrationAtPriority(queuedTarget.priority, function() {
                attemptHydrationAtCurrentPriority(nearestMounted);
              });
              return;
            }
          } else if (3 === targetInst && nearestMounted.stateNode.current.memoizedState.isDehydrated) {
            queuedTarget.blockedOn = 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
            return;
          }
        }
      }
      queuedTarget.blockedOn = null;
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
      if (null !== queuedEvent.blockedOn) {
        return !1;
      }
      for (var targetContainers = queuedEvent.targetContainers; 0 < targetContainers.length;) {
        var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainers[0], queuedEvent.nativeEvent);
        if (null === nextBlockedOn) {
          nextBlockedOn = queuedEvent.nativeEvent;
          var nativeEventClone = new nextBlockedOn.constructor(nextBlockedOn.type, nextBlockedOn), event = nativeEventClone;
          null !== currentReplayingEvent && error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
          currentReplayingEvent = event;
          nextBlockedOn.target.dispatchEvent(nativeEventClone);
          null === currentReplayingEvent && error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
          currentReplayingEvent = null;
        } else {
          return targetContainers = getInstanceFromNode(nextBlockedOn), null !== targetContainers && attemptContinuousHydration(targetContainers), queuedEvent.blockedOn = nextBlockedOn, !1;
        }
        targetContainers.shift();
      }
      return !0;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
      attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
    }
    function replayUnblockedEvents() {
      hasScheduledReplayAttempt = !1;
      null !== queuedFocus && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null);
      null !== queuedDrag && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null);
      null !== queuedMouse && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null);
      queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
      queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
      queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = !0, Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents)));
    }
    function retryIfBlockedOn(unblocked) {
      if (0 < queuedDiscreteEvents.length) {
        scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
        for (var i = 1; i < queuedDiscreteEvents.length; i++) {
          var queuedEvent = queuedDiscreteEvents[i];
          queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null);
        }
      }
      null !== queuedFocus && scheduleCallbackIfUnblocked(queuedFocus, unblocked);
      null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
      null !== queuedMouse && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
      i = function(queuedEvent) {
        return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
      };
      queuedPointers.forEach(i);
      queuedPointerCaptures.forEach(i);
      for (i = 0; i < queuedExplicitHydrationTargets.length; i++) {
        queuedEvent = queuedExplicitHydrationTargets[i], queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null);
      }
      for (; 0 < queuedExplicitHydrationTargets.length && (i = queuedExplicitHydrationTargets[0], null === i.blockedOn);) {
        attemptExplicitHydrationTarget(i), null === i.blockedOn && queuedExplicitHydrationTargets.shift();
      }
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      var previousPriority = currentUpdatePriority, prevTransition = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition = null;
      try {
        currentUpdatePriority = DiscreteEventPriority, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        currentUpdatePriority = previousPriority, ReactCurrentBatchConfig.transition = prevTransition;
      }
    }
    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      var previousPriority = currentUpdatePriority, prevTransition = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition = null;
      try {
        currentUpdatePriority = ContinuousEventPriority, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        currentUpdatePriority = previousPriority, ReactCurrentBatchConfig.transition = prevTransition;
      }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (_enabled) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (null === blockedOn) {
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer), clearIfContinuousEvent(domEventName, nativeEvent);
        } else {
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
          } else {
            if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & 4 && -1 < discreteReplayableEvents.indexOf(domEventName)) {
              for (; null !== blockedOn;) {
                var fiber = getInstanceFromNode(blockedOn);
                null !== fiber && _attemptSynchronousHydration(fiber);
                fiber = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                null === fiber && dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                if (fiber === blockedOn) {
                  break;
                }
                blockedOn = fiber;
              }
              null !== blockedOn && nativeEvent.stopPropagation();
            } else {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
            }
          }
        }
      }
    }
    function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      return_targetInst = null;
      domEventName = getEventTarget(nativeEvent);
      domEventName = getClosestInstanceFromNode(domEventName);
      if (null !== domEventName) {
        if (eventSystemFlags = getNearestMountedFiber(domEventName), null === eventSystemFlags) {
          domEventName = null;
        } else {
          if (targetContainer = eventSystemFlags.tag, 13 === targetContainer) {
            domEventName = getSuspenseInstanceFromFiber(eventSystemFlags);
            if (null !== domEventName) {
              return domEventName;
            }
            domEventName = null;
          } else if (3 === targetContainer) {
            if (eventSystemFlags.stateNode.current.memoizedState.isDehydrated) {
              return 3 === eventSystemFlags.tag ? eventSystemFlags.stateNode.containerInfo : null;
            }
            domEventName = null;
          } else {
            eventSystemFlags !== domEventName && (domEventName = null);
          }
        }
      }
      return_targetInst = domEventName;
      return null;
    }
    function getEventPriority(domEventName) {
      switch(domEventName) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return DiscreteEventPriority;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return ContinuousEventPriority;
        case "message":
          switch(getCurrentPriorityLevel()) {
            case ImmediatePriority:
              return DiscreteEventPriority;
            case UserBlockingPriority:
              return ContinuousEventPriority;
            case NormalPriority:
            case LowPriority:
              return DefaultEventPriority;
            case IdlePriority:
              return IdleEventPriority;
            default:
              return DefaultEventPriority;
          }default:
          return DefaultEventPriority;
      }
    }
    function getData() {
      if (fallbackText) {
        return fallbackText;
      }
      var start, startValue = startText, startLength = startValue.length, end, endValue = "value" in root ? root.value : root.textContent, endLength = endValue.length;
      for (start = 0; start < startLength && startValue[start] === endValue[start]; start++) {
      }
      var minEnd = startLength - start;
      for (end = 1; end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++) {
      }
      return fallbackText = endValue.slice(start, 1 < end ? 1 - end : void 0);
    }
    function getEventCharCode(nativeEvent) {
      var keyCode = nativeEvent.keyCode;
      "charCode" in nativeEvent ? (nativeEvent = nativeEvent.charCode, 0 === nativeEvent && 13 === keyCode && (nativeEvent = 13)) : nativeEvent = keyCode;
      10 === nativeEvent && (nativeEvent = 13);
      return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;
    }
    function functionThatReturnsTrue() {
      return !0;
    }
    function functionThatReturnsFalse() {
      return !1;
    }
    function createSyntheticEvent(Interface) {
      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
        this._reactName = reactName;
        this._targetInst = targetInst;
        this.type = reactEventType;
        this.nativeEvent = nativeEvent;
        this.target = nativeEventTarget;
        this.currentTarget = null;
        for (var _propName in Interface) {
          Interface.hasOwnProperty(_propName) && (reactName = Interface[_propName], this[_propName] = reactName ? reactName(nativeEvent) : nativeEvent[_propName]);
        }
        this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
      }
      assign(SyntheticBaseEvent.prototype, {preventDefault:function() {
        this.defaultPrevented = !0;
        var event = this.nativeEvent;
        event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = functionThatReturnsTrue);
      }, stopPropagation:function() {
        var event = this.nativeEvent;
        event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = functionThatReturnsTrue);
      }, persist:function() {
      }, isPersistent:functionThatReturnsTrue});
      return SyntheticBaseEvent;
    }
    function modifierStateGetter(keyArg) {
      var nativeEvent = this.nativeEvent;
      return nativeEvent.getModifierState ? nativeEvent.getModifierState(keyArg) : (keyArg = modifierKeyToProp[keyArg]) ? !!nativeEvent[keyArg] : !1;
    }
    function getEventModifierState(nativeEvent) {
      return modifierStateGetter;
    }
    function isFallbackCompositionEnd(domEventName, nativeEvent) {
      switch(domEventName) {
        case "keyup":
          return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);
        case "keydown":
          return nativeEvent.keyCode !== START_KEYCODE;
        case "keypress":
        case "mousedown":
        case "focusout":
          return !0;
        default:
          return !1;
      }
    }
    function getDataFromCustomEvent(nativeEvent) {
      nativeEvent = nativeEvent.detail;
      return "object" === typeof nativeEvent && "data" in nativeEvent ? nativeEvent.data : null;
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
      switch(domEventName) {
        case "compositionend":
          return getDataFromCustomEvent(nativeEvent);
        case "keypress":
          if (nativeEvent.which !== SPACEBAR_CODE) {
            return null;
          }
          hasSpaceKeypress = !0;
          return SPACEBAR_CHAR;
        case "textInput":
          return domEventName = nativeEvent.data, domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName;
        default:
          return null;
      }
    }
    function getFallbackBeforeInputChars(domEventName, nativeEvent) {
      if (isComposing) {
        return "compositionend" === domEventName || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent) ? (domEventName = getData(), fallbackText = startText = root = null, isComposing = !1, domEventName) : null;
      }
      switch(domEventName) {
        case "paste":
          return null;
        case "keypress":
          if (!(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) || nativeEvent.ctrlKey && nativeEvent.altKey) {
            if (nativeEvent.char && 1 < nativeEvent.char.length) {
              return nativeEvent.char;
            }
            if (nativeEvent.which) {
              return String.fromCharCode(nativeEvent.which);
            }
          }
          return null;
        case "compositionend":
          return useFallbackCompositionData && "ko" !== nativeEvent.locale ? null : nativeEvent.data;
        default:
          return null;
      }
    }
    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return "input" === nodeName ? !!supportedInputTypes[elem.type] : "textarea" === nodeName ? !0 : !1;
    }
    function isEventSupported(eventNameSuffix) {
      if (!canUseDOM) {
        return !1;
      }
      eventNameSuffix = "on" + eventNameSuffix;
      var isSupported = eventNameSuffix in document;
      isSupported || (isSupported = document.createElement("div"), isSupported.setAttribute(eventNameSuffix, "return;"), isSupported = "function" === typeof isSupported[eventNameSuffix]);
      return isSupported;
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
      enqueueStateRestore(target);
      inst = accumulateTwoPhaseListeners(inst, "onChange");
      0 < inst.length && (nativeEvent = new SyntheticEvent("onChange", "change", null, nativeEvent, target), dispatchQueue.push({event:nativeEvent, listeners:inst}));
    }
    function runEventInBatch(dispatchQueue) {
      processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
      var targetNode = getNodeFromInstance(targetInst);
      if (updateValueIfChanged(targetNode)) {
        return targetInst;
      }
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
      if ("change" === domEventName) {
        return targetInst;
      }
    }
    function stopWatchingForValueChange() {
      activeElement && (activeElement.detachEvent("onpropertychange", handlePropertyChange), activeElementInst = activeElement = null);
    }
    function handlePropertyChange(nativeEvent) {
      if ("value" === nativeEvent.propertyName && getInstIfValueChanged(activeElementInst)) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
        batchedUpdates(runEventInBatch, dispatchQueue);
      }
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
      "focusin" === domEventName ? (stopWatchingForValueChange(), activeElement = target, activeElementInst = targetInst, activeElement.attachEvent("onpropertychange", handlePropertyChange)) : "focusout" === domEventName && stopWatchingForValueChange();
    }
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
      if ("selectionchange" === domEventName || "keyup" === domEventName || "keydown" === domEventName) {
        return getInstIfValueChanged(activeElementInst);
      }
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
      if ("click" === domEventName) {
        return getInstIfValueChanged(targetInst);
      }
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
      if ("input" === domEventName || "change" === domEventName) {
        return getInstIfValueChanged(targetInst);
      }
    }
    function is(x, y) {
      return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
    }
    function shallowEqual(objA, objB) {
      if (objectIs(objA, objB)) {
        return !0;
      }
      if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) {
        return !1;
      }
      var keysA = Object.keys(objA), keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return !1;
      }
      for (keysB = 0; keysB < keysA.length; keysB++) {
        var currentKey = keysA[keysB];
        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
          return !1;
        }
      }
      return !0;
    }
    function getLeafNode(node) {
      for (; node && node.firstChild;) {
        node = node.firstChild;
      }
      return node;
    }
    function getNodeForCharacterOffset(root, offset) {
      var node = getLeafNode(root);
      root = 0;
      for (var nodeEnd; node;) {
        if (3 === node.nodeType) {
          nodeEnd = root + node.textContent.length;
          if (root <= offset && nodeEnd >= offset) {
            return {node, offset:offset - root};
          }
          root = nodeEnd;
        }
        a: {
          for (; node;) {
            if (node.nextSibling) {
              node = node.nextSibling;
              break a;
            }
            node = node.parentNode;
          }
          node = void 0;
        }
        node = getLeafNode(node);
      }
    }
    function containsNode(outerNode, innerNode) {
      return outerNode && innerNode ? outerNode === innerNode ? !0 : outerNode && 3 === outerNode.nodeType ? !1 : innerNode && 3 === innerNode.nodeType ? containsNode(outerNode, innerNode.parentNode) : "contains" in outerNode ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : !1 : !1;
    }
    function getActiveElementDeep() {
      for (var win = window, element = getActiveElement(); element instanceof win.HTMLIFrameElement;) {
        try {
          var JSCompiler_inline_result = "string" === typeof element.contentWindow.location.href;
        } catch (err) {
          JSCompiler_inline_result = !1;
        }
        if (JSCompiler_inline_result) {
          win = element.contentWindow;
        } else {
          break;
        }
        element = getActiveElement(win.document);
      }
      return element;
    }
    function hasSelectionCapabilities(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && ("input" === nodeName && ("text" === elem.type || "search" === elem.type || "tel" === elem.type || "url" === elem.type || "password" === elem.type) || "textarea" === nodeName || "true" === elem.contentEditable);
    }
    function restoreSelection(priorSelectionInformation) {
      var curFocusedElem = getActiveElementDeep(), priorFocusedElem = priorSelectionInformation.focusedElem, priorSelectionRange = priorSelectionInformation.selectionRange;
      if (curFocusedElem !== priorFocusedElem && priorFocusedElem && priorFocusedElem.ownerDocument && containsNode(priorFocusedElem.ownerDocument.documentElement, priorFocusedElem)) {
        if (null !== priorSelectionRange && hasSelectionCapabilities(priorFocusedElem)) {
          if (curFocusedElem = priorSelectionRange.start, priorSelectionInformation = priorSelectionRange.end, void 0 === priorSelectionInformation && (priorSelectionInformation = curFocusedElem), "selectionStart" in priorFocusedElem) {
            priorFocusedElem.selectionStart = curFocusedElem, priorFocusedElem.selectionEnd = Math.min(priorSelectionInformation, priorFocusedElem.value.length);
          } else {
            if (priorSelectionInformation = (curFocusedElem = priorFocusedElem.ownerDocument || document) && curFocusedElem.defaultView || window, priorSelectionInformation.getSelection) {
              priorSelectionInformation = priorSelectionInformation.getSelection();
              var length = priorFocusedElem.textContent.length, start = Math.min(priorSelectionRange.start, length);
              priorSelectionRange = void 0 === priorSelectionRange.end ? start : Math.min(priorSelectionRange.end, length);
              !priorSelectionInformation.extend && start > priorSelectionRange && (length = priorSelectionRange, priorSelectionRange = start, start = length);
              length = getNodeForCharacterOffset(priorFocusedElem, start);
              var endMarker = getNodeForCharacterOffset(priorFocusedElem, priorSelectionRange);
              length && endMarker && (1 !== priorSelectionInformation.rangeCount || priorSelectionInformation.anchorNode !== length.node || priorSelectionInformation.anchorOffset !== length.offset || priorSelectionInformation.focusNode !== endMarker.node || priorSelectionInformation.focusOffset !== endMarker.offset) && (curFocusedElem = curFocusedElem.createRange(), curFocusedElem.setStart(length.node, length.offset), priorSelectionInformation.removeAllRanges(), start > priorSelectionRange ? (priorSelectionInformation.addRange(curFocusedElem), 
              priorSelectionInformation.extend(endMarker.node, endMarker.offset)) : (curFocusedElem.setEnd(endMarker.node, endMarker.offset), priorSelectionInformation.addRange(curFocusedElem)));
            }
          }
        }
        curFocusedElem = [];
        for (priorSelectionInformation = priorFocusedElem; priorSelectionInformation = priorSelectionInformation.parentNode;) {
          1 === priorSelectionInformation.nodeType && curFocusedElem.push({element:priorSelectionInformation, left:priorSelectionInformation.scrollLeft, top:priorSelectionInformation.scrollTop});
        }
        "function" === typeof priorFocusedElem.focus && priorFocusedElem.focus();
        for (priorFocusedElem = 0; priorFocusedElem < curFocusedElem.length; priorFocusedElem++) {
          priorSelectionInformation = curFocusedElem[priorFocusedElem], priorSelectionInformation.element.scrollLeft = priorSelectionInformation.left, priorSelectionInformation.element.scrollTop = priorSelectionInformation.top;
        }
      }
    }
    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
      var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : 9 === nativeEventTarget.nodeType ? nativeEventTarget : nativeEventTarget.ownerDocument;
      mouseDown || null == activeElement$1 || activeElement$1 !== getActiveElement(doc) || (doc = activeElement$1, "selectionStart" in doc && hasSelectionCapabilities(doc) ? doc = {start:doc.selectionStart, end:doc.selectionEnd} : (doc = (doc.ownerDocument && doc.ownerDocument.defaultView || window).getSelection(), doc = {anchorNode:doc.anchorNode, anchorOffset:doc.anchorOffset, focusNode:doc.focusNode, focusOffset:doc.focusOffset}), lastSelection && shallowEqual(lastSelection, doc) || (lastSelection = 
      doc, doc = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect"), 0 < doc.length && (nativeEvent = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget), dispatchQueue.push({event:nativeEvent, listeners:doc}), nativeEvent.target = activeElement$1)));
    }
    function makePrefixMap(styleProp, eventName) {
      var prefixes = {};
      prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
      prefixes["Webkit" + styleProp] = "webkit" + eventName;
      prefixes["Moz" + styleProp] = "moz" + eventName;
      return prefixes;
    }
    function getVendorPrefixedEventName(eventName) {
      if (prefixedEventNames[eventName]) {
        return prefixedEventNames[eventName];
      }
      if (!vendorPrefixes[eventName]) {
        return eventName;
      }
      var prefixMap = vendorPrefixes[eventName], styleProp;
      for (styleProp in prefixMap) {
        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
          return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
      }
      return eventName;
    }
    function registerSimpleEvent(domEventName, reactName) {
      topLevelEventsToReactNames.set(domEventName, reactName);
      registerTwoPhaseEvent(reactName, [domEventName]);
    }
    function executeDispatch(event, listener, currentTarget) {
      var type = event.type || "unknown-event";
      event.currentTarget = currentTarget;
      invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
      event.currentTarget = null;
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
      eventSystemFlags = 0 !== (eventSystemFlags & 4);
      for (var i = 0; i < dispatchQueue.length; i++) {
        var _dispatchQueue$i = dispatchQueue[i];
        a: {
          var previousInstance = void 0, event = _dispatchQueue$i.event;
          _dispatchQueue$i = _dispatchQueue$i.listeners;
          if (eventSystemFlags) {
            for (var i$jscomp$0 = _dispatchQueue$i.length - 1; 0 <= i$jscomp$0; i$jscomp$0--) {
              var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget;
              _dispatchListeners$i = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                break a;
              }
              executeDispatch(event, _dispatchListeners$i, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (i$jscomp$0 = 0; i$jscomp$0 < _dispatchQueue$i.length; i$jscomp$0++) {
              _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
              instance = _dispatchListeners$i.instance;
              currentTarget = _dispatchListeners$i.currentTarget;
              _dispatchListeners$i = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                break a;
              }
              executeDispatch(event, _dispatchListeners$i, currentTarget);
              previousInstance = instance;
            }
          }
        }
      }
      if (hasRethrowError) {
        throw dispatchQueue = rethrowError, hasRethrowError = !1, rethrowError = null, dispatchQueue;
      }
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
      nonDelegatedEvents.has(domEventName) || error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
      var listenerSet = targetElement[internalEventHandlersKey];
      void 0 === listenerSet && (listenerSet = targetElement[internalEventHandlersKey] = new Set());
      var listenerSetKey = domEventName + "__bubble";
      listenerSet.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, 2, !1), listenerSet.add(listenerSetKey));
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
      nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener && error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
      var eventSystemFlags = 0;
      isCapturePhaseListener && (eventSystemFlags |= 4);
      addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
    }
    function listenToAllSupportedEvents(rootContainerElement) {
      if (!rootContainerElement[listeningMarker]) {
        rootContainerElement[listeningMarker] = !0;
        allNativeEvents.forEach(function(domEventName) {
          "selectionchange" !== domEventName && (nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, !1, rootContainerElement), listenToNativeEvent(domEventName, !0, rootContainerElement));
        });
        var ownerDocument = 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
        null === ownerDocument || ownerDocument[listeningMarker] || (ownerDocument[listeningMarker] = !0, listenToNativeEvent("selectionchange", !1, ownerDocument));
      }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
      switch(getEventPriority(domEventName)) {
        case DiscreteEventPriority:
          isDeferredListenerForLegacyFBSupport = dispatchDiscreteEvent;
          break;
        case ContinuousEventPriority:
          isDeferredListenerForLegacyFBSupport = dispatchContinuousEvent;
          break;
        default:
          isDeferredListenerForLegacyFBSupport = dispatchEvent;
      }
      eventSystemFlags = isDeferredListenerForLegacyFBSupport.bind(null, domEventName, eventSystemFlags, targetContainer);
      isDeferredListenerForLegacyFBSupport = void 0;
      !passiveBrowserEventsSupported || "touchstart" !== domEventName && "touchmove" !== domEventName && "wheel" !== domEventName || (isDeferredListenerForLegacyFBSupport = !0);
      isCapturePhaseListener ? void 0 !== isDeferredListenerForLegacyFBSupport ? targetContainer.addEventListener(domEventName, eventSystemFlags, {capture:!0, passive:isDeferredListenerForLegacyFBSupport}) : targetContainer.addEventListener(domEventName, eventSystemFlags, !0) : void 0 !== isDeferredListenerForLegacyFBSupport ? targetContainer.addEventListener(domEventName, eventSystemFlags, {passive:isDeferredListenerForLegacyFBSupport}) : targetContainer.addEventListener(domEventName, eventSystemFlags, 
      !1);
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
      var ancestorInst = targetInst;
      if (0 === (eventSystemFlags & 1) && 0 === (eventSystemFlags & 2) && null !== targetInst) {
        a: for (;;) {
          if (null === targetInst) {
            return;
          }
          var nodeTag = targetInst.tag;
          if (3 === nodeTag || 4 === nodeTag) {
            var container = targetInst.stateNode.containerInfo;
            if (container === targetContainer || 8 === container.nodeType && container.parentNode === targetContainer) {
              break;
            }
            if (4 === nodeTag) {
              for (nodeTag = targetInst.return; null !== nodeTag;) {
                var grandTag = nodeTag.tag;
                if (3 === grandTag || 4 === grandTag) {
                  if (grandTag = nodeTag.stateNode.containerInfo, grandTag === targetContainer || 8 === grandTag.nodeType && grandTag.parentNode === targetContainer) {
                    return;
                  }
                }
                nodeTag = nodeTag.return;
              }
            }
            for (; null !== container;) {
              nodeTag = getClosestInstanceFromNode(container);
              if (null === nodeTag) {
                return;
              }
              grandTag = nodeTag.tag;
              if (5 === grandTag || 6 === grandTag) {
                targetInst = ancestorInst = nodeTag;
                continue a;
              }
              container = container.parentNode;
            }
          }
          targetInst = targetInst.return;
        }
      }
      batchedUpdates(function() {
        var targetInst = ancestorInst, nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
        a: {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (void 0 !== reactName) {
            var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
            switch(domEventName) {
              case "keypress":
                if (0 === getEventCharCode(nativeEvent)) {
                  break a;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (2 === nativeEvent.button) {
                  break a;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
            }
            var inCapturePhase = 0 !== (eventSystemFlags & 4), accumulateTargetOnly = !inCapturePhase && "scroll" === domEventName, reactEventName = inCapturePhase ? null !== reactName ? reactName + "Capture" : null : reactName;
            inCapturePhase = [];
            for (var instance = targetInst, lastHostComponent; null !== instance;) {
              lastHostComponent = instance;
              var stateNode = lastHostComponent.stateNode;
              5 === lastHostComponent.tag && null !== stateNode && (lastHostComponent = stateNode, null !== reactEventName && (stateNode = getListener(instance, reactEventName), null != stateNode && inCapturePhase.push(createDispatchListener(instance, stateNode, lastHostComponent))));
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            0 < inCapturePhase.length && (reactName = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget), dispatchQueue.push({event:reactName, listeners:inCapturePhase}));
          }
        }
        if (0 === (eventSystemFlags & 7)) {
          a: {
            reactName = "mouseover" === domEventName || "pointerover" === domEventName;
            SyntheticEventCtor = "mouseout" === domEventName || "pointerout" === domEventName;
            if (reactName && nativeEvent !== currentReplayingEvent && (reactEventType = nativeEvent.relatedTarget || nativeEvent.fromElement) && (getClosestInstanceFromNode(reactEventType) || reactEventType[internalContainerInstanceKey])) {
              break a;
            }
            if (SyntheticEventCtor || reactName) {
              reactName = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget : (reactName = nativeEventTarget.ownerDocument) ? reactName.defaultView || reactName.parentWindow : window;
              if (SyntheticEventCtor) {
                if (reactEventType = nativeEvent.relatedTarget || nativeEvent.toElement, SyntheticEventCtor = targetInst, reactEventType = reactEventType ? getClosestInstanceFromNode(reactEventType) : null, null !== reactEventType && (accumulateTargetOnly = getNearestMountedFiber(reactEventType), reactEventType !== accumulateTargetOnly || 5 !== reactEventType.tag && 6 !== reactEventType.tag)) {
                  reactEventType = null;
                }
              } else {
                SyntheticEventCtor = null, reactEventType = targetInst;
              }
              if (SyntheticEventCtor !== reactEventType) {
                inCapturePhase = SyntheticMouseEvent;
                stateNode = "onMouseLeave";
                reactEventName = "onMouseEnter";
                instance = "mouse";
                if ("pointerout" === domEventName || "pointerover" === domEventName) {
                  inCapturePhase = SyntheticPointerEvent, stateNode = "onPointerLeave", reactEventName = "onPointerEnter", instance = "pointer";
                }
                accumulateTargetOnly = null == SyntheticEventCtor ? reactName : getNodeFromInstance(SyntheticEventCtor);
                lastHostComponent = null == reactEventType ? reactName : getNodeFromInstance(reactEventType);
                reactName = new inCapturePhase(stateNode, instance + "leave", SyntheticEventCtor, nativeEvent, nativeEventTarget);
                reactName.target = accumulateTargetOnly;
                reactName.relatedTarget = lastHostComponent;
                stateNode = null;
                getClosestInstanceFromNode(nativeEventTarget) === targetInst && (inCapturePhase = new inCapturePhase(reactEventName, instance + "enter", reactEventType, nativeEvent, nativeEventTarget), inCapturePhase.target = lastHostComponent, inCapturePhase.relatedTarget = accumulateTargetOnly, stateNode = inCapturePhase);
                accumulateTargetOnly = stateNode;
                if (SyntheticEventCtor && reactEventType) {
                  b: {
                    inCapturePhase = SyntheticEventCtor;
                    reactEventName = reactEventType;
                    instance = 0;
                    for (lastHostComponent = inCapturePhase; lastHostComponent; lastHostComponent = getParent(lastHostComponent)) {
                      instance++;
                    }
                    lastHostComponent = 0;
                    for (stateNode = reactEventName; stateNode; stateNode = getParent(stateNode)) {
                      lastHostComponent++;
                    }
                    for (; 0 < instance - lastHostComponent;) {
                      inCapturePhase = getParent(inCapturePhase), instance--;
                    }
                    for (; 0 < lastHostComponent - instance;) {
                      reactEventName = getParent(reactEventName), lastHostComponent--;
                    }
                    for (; instance--;) {
                      if (inCapturePhase === reactEventName || null !== reactEventName && inCapturePhase === reactEventName.alternate) {
                        break b;
                      }
                      inCapturePhase = getParent(inCapturePhase);
                      reactEventName = getParent(reactEventName);
                    }
                    inCapturePhase = null;
                  }
                } else {
                  inCapturePhase = null;
                }
                null !== SyntheticEventCtor && accumulateEnterLeaveListenersForEvent(dispatchQueue, reactName, SyntheticEventCtor, inCapturePhase, !1);
                null !== reactEventType && null !== accumulateTargetOnly && accumulateEnterLeaveListenersForEvent(dispatchQueue, accumulateTargetOnly, reactEventType, inCapturePhase, !0);
              }
            }
          }
          a: {
            reactName = targetInst ? getNodeFromInstance(targetInst) : window;
            SyntheticEventCtor = reactName.nodeName && reactName.nodeName.toLowerCase();
            if ("select" === SyntheticEventCtor || "input" === SyntheticEventCtor && "file" === reactName.type) {
              var getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(reactName)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                var handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else {
              (SyntheticEventCtor = reactName.nodeName) && "input" === SyntheticEventCtor.toLowerCase() && ("checkbox" === reactName.type || "radio" === reactName.type) && (getTargetInstFunc = getTargetInstForClickEvent);
            }
            if (getTargetInstFunc && (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))) {
              createAndAccumulateChangeEvent(dispatchQueue, getTargetInstFunc, nativeEvent, nativeEventTarget);
              break a;
            }
            handleEventFunc && handleEventFunc(domEventName, reactName, targetInst);
            "focusout" === domEventName && (handleEventFunc = reactName._wrapperState) && handleEventFunc.controlled && "number" === reactName.type && setDefaultValue(reactName, "number", reactName.value);
          }
          handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window;
          switch(domEventName) {
            case "focusin":
              if (isTextInputElement(handleEventFunc) || "true" === handleEventFunc.contentEditable) {
                activeElement$1 = handleEventFunc, activeElementInst$1 = targetInst, lastSelection = null;
              }
              break;
            case "focusout":
              lastSelection = activeElementInst$1 = activeElement$1 = null;
              break;
            case "mousedown":
              mouseDown = !0;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = !1;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
          var fallbackData;
          if (canUseCompositionEvent) {
            b: {
              switch(domEventName) {
                case "compositionstart":
                  var eventType = "onCompositionStart";
                  break b;
                case "compositionend":
                  eventType = "onCompositionEnd";
                  break b;
                case "compositionupdate":
                  eventType = "onCompositionUpdate";
                  break b;
              }
              eventType = void 0;
            }
          } else {
            isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : "keydown" === domEventName && nativeEvent.keyCode === START_KEYCODE && (eventType = "onCompositionStart");
          }
          eventType && (useFallbackCompositionData && "ko" !== nativeEvent.locale && (isComposing || "onCompositionStart" !== eventType ? "onCompositionEnd" === eventType && isComposing && (fallbackData = getData()) : (root = nativeEventTarget, startText = "value" in root ? root.value : root.textContent, isComposing = !0)), handleEventFunc = accumulateTwoPhaseListeners(targetInst, eventType), 0 < handleEventFunc.length && (eventType = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, 
          nativeEventTarget), dispatchQueue.push({event:eventType, listeners:handleEventFunc}), fallbackData ? eventType.data = fallbackData : (fallbackData = getDataFromCustomEvent(nativeEvent), null !== fallbackData && (eventType.data = fallbackData))));
          if (fallbackData = canUseTextInputEvent ? getNativeBeforeInputChars(domEventName, nativeEvent) : getFallbackBeforeInputChars(domEventName, nativeEvent)) {
            targetInst = accumulateTwoPhaseListeners(targetInst, "onBeforeInput"), 0 < targetInst.length && (nativeEventTarget = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget), dispatchQueue.push({event:nativeEventTarget, listeners:targetInst}), nativeEventTarget.data = fallbackData);
          }
        }
        processDispatchQueue(dispatchQueue, eventSystemFlags);
      });
    }
    function createDispatchListener(instance, listener, currentTarget) {
      return {instance, listener, currentTarget};
    }
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
      for (var captureName = reactName + "Capture", listeners = []; null !== targetFiber;) {
        var _instance3 = targetFiber, stateNode = _instance3.stateNode;
        5 === _instance3.tag && null !== stateNode && (_instance3 = stateNode, stateNode = getListener(targetFiber, captureName), null != stateNode && listeners.unshift(createDispatchListener(targetFiber, stateNode, _instance3)), stateNode = getListener(targetFiber, reactName), null != stateNode && listeners.push(createDispatchListener(targetFiber, stateNode, _instance3)));
        targetFiber = targetFiber.return;
      }
      return listeners;
    }
    function getParent(inst) {
      if (null === inst) {
        return null;
      }
      do {
        inst = inst.return;
      } while (inst && 5 !== inst.tag);
      return inst ? inst : null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
      for (var registrationName = event._reactName, listeners = []; null !== target && target !== common;) {
        var _instance4 = target, alternate = _instance4.alternate, stateNode = _instance4.stateNode;
        if (null !== alternate && alternate === common) {
          break;
        }
        5 === _instance4.tag && null !== stateNode && (_instance4 = stateNode, inCapturePhase ? (alternate = getListener(target, registrationName), null != alternate && listeners.unshift(createDispatchListener(target, alternate, _instance4))) : inCapturePhase || (alternate = getListener(target, registrationName), null != alternate && listeners.push(createDispatchListener(target, alternate, _instance4))));
        target = target.return;
      }
      0 !== listeners.length && dispatchQueue.push({event, listeners});
    }
    function normalizeMarkupForTextOrAttribute(markup) {
      return ("string" === typeof markup ? markup : "" + markup).replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
    }
    function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
      clientText = normalizeMarkupForTextOrAttribute(clientText);
      serverText = normalizeMarkupForTextOrAttribute(serverText);
      if (serverText !== clientText && (shouldWarnDev && !didWarnInvalidHydration && (didWarnInvalidHydration = !0, error('Text content did not match. Server: "%s" Client: "%s"', serverText, clientText)), isConcurrentMode)) {
        throw Error("Text content does not match server-rendered HTML.");
      }
    }
    function noop() {
    }
    function warnForDeletedHydratableElement(parentNode, child) {
      didWarnInvalidHydration || (didWarnInvalidHydration = !0, error("Did not expect server HTML to contain a \x3c%s\x3e in \x3c%s\x3e.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase()));
    }
    function warnForDeletedHydratableText(parentNode, child) {
      didWarnInvalidHydration || (didWarnInvalidHydration = !0, error('Did not expect server HTML to contain the text node "%s" in \x3c%s\x3e.', child.nodeValue, parentNode.nodeName.toLowerCase()));
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
      didWarnInvalidHydration || (didWarnInvalidHydration = !0, error("Expected server HTML to contain a matching \x3c%s\x3e in \x3c%s\x3e.", tag, parentNode.nodeName.toLowerCase()));
    }
    function warnForInsertedHydratedText(parentNode, text) {
      "" === text || didWarnInvalidHydration || (didWarnInvalidHydration = !0, error('Expected server HTML to contain a matching text node for "%s" in \x3c%s\x3e.', text, parentNode.nodeName.toLowerCase()));
    }
    function shouldSetTextContent(type, props) {
      return "textarea" === type || "noscript" === type || "string" === typeof props.children || "number" === typeof props.children || "object" === typeof props.dangerouslySetInnerHTML && null !== props.dangerouslySetInnerHTML && null != props.dangerouslySetInnerHTML.__html;
    }
    function handleErrorInNextTick(error) {
      setTimeout(function() {
        throw error;
      });
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
      var node = suspenseInstance, depth = 0;
      do {
        var nextNode = node.nextSibling;
        parentInstance.removeChild(node);
        if (nextNode && 8 === nextNode.nodeType) {
          if (node = nextNode.data, node === SUSPENSE_END_DATA) {
            if (0 === depth) {
              parentInstance.removeChild(nextNode);
              retryIfBlockedOn(suspenseInstance);
              return;
            }
            depth--;
          } else {
            node !== SUSPENSE_START_DATA && node !== SUSPENSE_PENDING_START_DATA && node !== SUSPENSE_FALLBACK_START_DATA || depth++;
          }
        }
        node = nextNode;
      } while (node);
      retryIfBlockedOn(suspenseInstance);
    }
    function getNextHydratable(node) {
      for (; null != node; node = node.nextSibling) {
        var nodeType = node.nodeType;
        if (1 === nodeType || 3 === nodeType) {
          break;
        }
        if (8 === nodeType) {
          nodeType = node.data;
          if (nodeType === SUSPENSE_START_DATA || nodeType === SUSPENSE_FALLBACK_START_DATA || nodeType === SUSPENSE_PENDING_START_DATA) {
            break;
          }
          if (nodeType === SUSPENSE_END_DATA) {
            return null;
          }
        }
      }
      return node;
    }
    function getParentSuspenseInstance(targetInstance) {
      targetInstance = targetInstance.previousSibling;
      for (var depth = 0; targetInstance;) {
        if (8 === targetInstance.nodeType) {
          var data = targetInstance.data;
          if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
            if (0 === depth) {
              return targetInstance;
            }
            depth--;
          } else {
            data === SUSPENSE_END_DATA && depth++;
          }
        }
        targetInstance = targetInstance.previousSibling;
      }
      return null;
    }
    function getClosestInstanceFromNode(targetNode) {
      var targetInst = targetNode[internalInstanceKey];
      if (targetInst) {
        return targetInst;
      }
      for (var parentNode = targetNode.parentNode; parentNode;) {
        if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey]) {
          parentNode = targetInst.alternate;
          if (null !== targetInst.child || null !== parentNode && null !== parentNode.child) {
            for (targetNode = getParentSuspenseInstance(targetNode); null !== targetNode;) {
              if (parentNode = targetNode[internalInstanceKey]) {
                return parentNode;
              }
              targetNode = getParentSuspenseInstance(targetNode);
            }
          }
          return targetInst;
        }
        targetNode = parentNode;
        parentNode = targetNode.parentNode;
      }
      return null;
    }
    function getInstanceFromNode(node) {
      node = node[internalInstanceKey] || node[internalContainerInstanceKey];
      return !node || 5 !== node.tag && 6 !== node.tag && 13 !== node.tag && 3 !== node.tag ? null : node;
    }
    function getNodeFromInstance(inst) {
      if (5 === inst.tag || 6 === inst.tag) {
        return inst.stateNode;
      }
      throw Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node) {
      return node[internalPropsKey] || null;
    }
    function setCurrentlyValidatingElement(element) {
      if (element) {
        var owner = element._owner;
        element = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
        ReactDebugCurrentFrame$1.setExtraStackFrame(element);
      } else {
        ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      var has = Function.call.bind(hasOwnProperty), typeSpecName;
      for (typeSpecName in typeSpecs) {
        if (has(typeSpecs, typeSpecName)) {
          var error$1 = void 0;
          try {
            if ("function" !== typeof typeSpecs[typeSpecName]) {
              var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
              err.name = "Invariant Violation";
              throw err;
            }
            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
          } catch (ex) {
            error$1 = ex;
          }
          !error$1 || error$1 instanceof Error || (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null));
          error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
        }
      }
    }
    function createCursor(defaultValue) {
      return {current:defaultValue};
    }
    function pop(cursor, fiber) {
      0 > index ? error("Unexpected pop.") : (fiber !== fiberStack[index] && error("Unexpected Fiber popped."), cursor.current = valueStack[index], valueStack[index] = null, fiberStack[index] = null, index--);
    }
    function push(cursor, value, fiber) {
      index++;
      valueStack[index] = cursor.current;
      fiberStack[index] = fiber;
      cursor.current = value;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
      var contextTypes = workInProgress.type.contextTypes;
      if (!contextTypes) {
        return emptyContextObject;
      }
      var instance = workInProgress.stateNode;
      if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
        return instance.__reactInternalMemoizedMaskedChildContext;
      }
      var context = {};
      for (key in contextTypes) {
        context[key] = unmaskedContext[key];
      }
      var key = getComponentNameFromFiber(workInProgress) || "Unknown";
      checkPropTypes(contextTypes, context, "context", key);
      instance && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
      return context;
    }
    function isContextProvider(type) {
      type = type.childContextTypes;
      return null !== type && void 0 !== type;
    }
    function popContext(fiber) {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
      if (contextStackCursor.current !== emptyContextObject) {
        throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
      }
      push(contextStackCursor, context, fiber);
      push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
      var instance = fiber.stateNode;
      type = type.childContextTypes;
      if ("function" !== typeof instance.getChildContext) {
        return fiber = getComponentNameFromFiber(fiber) || "Unknown", warnedAboutMissingGetChildContext[fiber] || (warnedAboutMissingGetChildContext[fiber] = !0, error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", fiber, fiber)), parentContext;
      }
      instance = instance.getChildContext();
      for (var contextKey in instance) {
        if (!(contextKey in type)) {
          throw Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
        }
      }
      fiber = getComponentNameFromFiber(fiber) || "Unknown";
      checkPropTypes(type, instance, "child context", fiber);
      return assign({}, parentContext, instance);
    }
    function pushContextProvider(workInProgress) {
      var instance = workInProgress.stateNode;
      instance = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
      previousContext = contextStackCursor.current;
      push(contextStackCursor, instance, workInProgress);
      push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
      return !0;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
      var instance = workInProgress.stateNode;
      if (!instance) {
        throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
      }
      didChange ? (type = processChildContext(workInProgress, type, previousContext), instance.__reactInternalMemoizedMergedChildContext = type, pop(didPerformWorkStackCursor, workInProgress), pop(contextStackCursor, workInProgress), push(contextStackCursor, type, workInProgress)) : pop(didPerformWorkStackCursor, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    }
    function scheduleSyncCallback(callback) {
      null === syncQueue ? syncQueue = [callback] : syncQueue.push(callback);
    }
    function scheduleLegacySyncCallback(callback) {
      includesLegacySyncCallbacks = !0;
      scheduleSyncCallback(callback);
    }
    function flushSyncCallbacks() {
      if (!isFlushingSyncQueue && null !== syncQueue) {
        isFlushingSyncQueue = !0;
        var i = 0, previousUpdatePriority = currentUpdatePriority;
        try {
          var queue = syncQueue;
          for (currentUpdatePriority = DiscreteEventPriority; i < queue.length; i++) {
            var callback = queue[i];
            do {
              callback = callback(!0);
            } while (null !== callback);
          }
          syncQueue = null;
          includesLegacySyncCallbacks = !1;
        } catch (error) {
          throw null !== syncQueue && (syncQueue = syncQueue.slice(i + 1)), scheduleCallback(ImmediatePriority, flushSyncCallbacks), error;
        } finally {
          currentUpdatePriority = previousUpdatePriority, isFlushingSyncQueue = !1;
        }
      }
      return null;
    }
    function pushTreeFork(workInProgress, totalChildren) {
      warnIfNotHydrating();
      forkStack[forkStackIndex++] = treeForkCount;
      forkStack[forkStackIndex++] = treeForkProvider;
      treeForkProvider = workInProgress;
      treeForkCount = totalChildren;
    }
    function pushTreeId(workInProgress, totalChildren, index) {
      warnIfNotHydrating();
      idStack[idStackIndex++] = treeContextId;
      idStack[idStackIndex++] = treeContextOverflow;
      idStack[idStackIndex++] = treeContextProvider;
      treeContextProvider = workInProgress;
      var baseIdWithLeadingBit = treeContextId;
      workInProgress = treeContextOverflow;
      var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
      baseIdWithLeadingBit &= ~(1 << baseLength);
      index += 1;
      var length = 32 - clz32(totalChildren) + baseLength;
      if (30 < length) {
        var numberOfOverflowBits = baseLength - baseLength % 5;
        length = (baseIdWithLeadingBit & (1 << numberOfOverflowBits) - 1).toString(32);
        baseIdWithLeadingBit >>= numberOfOverflowBits;
        baseLength -= numberOfOverflowBits;
        treeContextId = 1 << 32 - clz32(totalChildren) + baseLength | index << baseLength | baseIdWithLeadingBit;
        treeContextOverflow = length + workInProgress;
      } else {
        treeContextId = 1 << length | index << baseLength | baseIdWithLeadingBit, treeContextOverflow = workInProgress;
      }
    }
    function pushMaterializedTreeId(workInProgress) {
      warnIfNotHydrating();
      null !== workInProgress.return && (pushTreeFork(workInProgress, 1), pushTreeId(workInProgress, 1, 0));
    }
    function popTreeContext(workInProgress) {
      for (; workInProgress === treeForkProvider;) {
        treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
      }
      for (; workInProgress === treeContextProvider;) {
        treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
      }
    }
    function warnIfNotHydrating() {
      isHydrating || error("Expected to be hydrating. This is a bug in React. Please file an issue.");
    }
    function warnUnhydratedInstance(returnFiber, instance) {
      switch(returnFiber.tag) {
        case 3:
          returnFiber = returnFiber.stateNode.containerInfo;
          1 === instance.nodeType ? warnForDeletedHydratableElement(returnFiber, instance) : 8 !== instance.nodeType && warnForDeletedHydratableText(returnFiber, instance);
          break;
        case 5:
          var parentProps = returnFiber.memoizedProps, parentInstance = returnFiber.stateNode;
          if (0 !== (returnFiber.mode & 1) || !0 !== parentProps.suppressHydrationWarning) {
            1 === instance.nodeType ? warnForDeletedHydratableElement(parentInstance, instance) : 8 !== instance.nodeType && warnForDeletedHydratableText(parentInstance, instance);
          }
          break;
        case 13:
          returnFiber = returnFiber.memoizedState, null !== returnFiber.dehydrated && (returnFiber = returnFiber.dehydrated.parentNode, null !== returnFiber && (1 === instance.nodeType ? warnForDeletedHydratableElement(returnFiber, instance) : 8 !== instance.nodeType && warnForDeletedHydratableText(returnFiber, instance)));
      }
    }
    function deleteHydratableInstance(returnFiber, instance) {
      warnUnhydratedInstance(returnFiber, instance);
      var fiber = createFiber(5, null, null, 0);
      fiber.elementType = "DELETED";
      fiber.stateNode = instance;
      fiber.return = returnFiber;
      instance = returnFiber.deletions;
      null === instance ? (returnFiber.deletions = [fiber], returnFiber.flags |= 16) : instance.push(fiber);
    }
    function warnNonhydratedInstance(returnFiber, fiber) {
      if (!didSuspendOrErrorDEV) {
        switch(returnFiber.tag) {
          case 3:
            returnFiber = returnFiber.stateNode.containerInfo;
            switch(fiber.tag) {
              case 5:
                warnForInsertedHydratedElement(returnFiber, fiber.type);
                break;
              case 6:
                warnForInsertedHydratedText(returnFiber, fiber.pendingProps);
            }break;
          case 5:
            var parentProps = returnFiber.memoizedProps, parentInstance = returnFiber.stateNode;
            switch(fiber.tag) {
              case 5:
                fiber = fiber.type;
                0 === (returnFiber.mode & 1) && !0 === parentProps.suppressHydrationWarning || warnForInsertedHydratedElement(parentInstance, fiber);
                break;
              case 6:
                fiber = fiber.pendingProps, 0 === (returnFiber.mode & 1) && !0 === parentProps.suppressHydrationWarning || warnForInsertedHydratedText(parentInstance, fiber);
            }break;
          case 13:
            if (returnFiber = returnFiber.memoizedState.dehydrated, null !== returnFiber) {
              switch(fiber.tag) {
                case 5:
                  fiber = fiber.type;
                  returnFiber = returnFiber.parentNode;
                  null !== returnFiber && warnForInsertedHydratedElement(returnFiber, fiber);
                  break;
                case 6:
                  fiber = fiber.pendingProps, returnFiber = returnFiber.parentNode, null !== returnFiber && warnForInsertedHydratedText(returnFiber, fiber);
              }
            }
        }
      }
    }
    function tryHydrate(fiber, nextInstance) {
      switch(fiber.tag) {
        case 5:
          var type = fiber.type;
          nextInstance = 1 !== nextInstance.nodeType || type.toLowerCase() !== nextInstance.nodeName.toLowerCase() ? null : nextInstance;
          return null !== nextInstance ? (fiber.stateNode = nextInstance, hydrationParentFiber = fiber, nextHydratableInstance = getNextHydratable(nextInstance.firstChild), !0) : !1;
        case 6:
          return nextInstance = "" === fiber.pendingProps || 3 !== nextInstance.nodeType ? null : nextInstance, null !== nextInstance ? (fiber.stateNode = nextInstance, hydrationParentFiber = fiber, nextHydratableInstance = null, !0) : !1;
        case 13:
          return nextInstance = 8 !== nextInstance.nodeType ? null : nextInstance, null !== nextInstance ? (warnIfNotHydrating(), type = null !== treeContextProvider ? {id:treeContextId, overflow:treeContextOverflow} : null, fiber.memoizedState = {dehydrated:nextInstance, treeContext:type, retryLane:OffscreenLane}, type = createFiber(18, null, null, 0), type.stateNode = nextInstance, type.return = fiber, fiber.child = type, hydrationParentFiber = fiber, nextHydratableInstance = null, !0) : !1;
        default:
          return !1;
      }
    }
    function shouldClientRenderOnMismatch(fiber) {
      return 0 !== (fiber.mode & 1) && 0 === (fiber.flags & 128);
    }
    function throwOnHydrationMismatch(fiber) {
      throw Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function tryToClaimNextHydratableInstance(fiber) {
      if (isHydrating) {
        var nextInstance = nextHydratableInstance;
        if (nextInstance) {
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            shouldClientRenderOnMismatch(fiber) && (warnNonhydratedInstance(hydrationParentFiber, fiber), throwOnHydrationMismatch());
            nextInstance = getNextHydratable(firstAttemptedInstance.nextSibling);
            var prevHydrationParentFiber = hydrationParentFiber;
            nextInstance && tryHydrate(fiber, nextInstance) ? deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance) : (nextInstance = hydrationParentFiber, fiber.flags = fiber.flags & -4097 | 2, warnNonhydratedInstance(nextInstance, fiber), isHydrating = !1, hydrationParentFiber = fiber);
          }
        } else {
          shouldClientRenderOnMismatch(fiber) && (warnNonhydratedInstance(hydrationParentFiber, fiber), throwOnHydrationMismatch()), nextInstance = hydrationParentFiber, fiber.flags = fiber.flags & -4097 | 2, warnNonhydratedInstance(nextInstance, fiber), isHydrating = !1, hydrationParentFiber = fiber;
        }
      }
    }
    function popToNextHostParent(fiber) {
      for (fiber = fiber.return; null !== fiber && 5 !== fiber.tag && 3 !== fiber.tag && 13 !== fiber.tag;) {
        fiber = fiber.return;
      }
      hydrationParentFiber = fiber;
    }
    function popHydrationState(fiber) {
      if (fiber !== hydrationParentFiber) {
        return !1;
      }
      if (!isHydrating) {
        return popToNextHostParent(fiber), isHydrating = !0, !1;
      }
      var JSCompiler_temp;
      (JSCompiler_temp = 3 !== fiber.tag) && !(JSCompiler_temp = 5 !== fiber.tag) && (JSCompiler_temp = fiber.type, JSCompiler_temp = "head" !== JSCompiler_temp && "body" !== JSCompiler_temp && !shouldSetTextContent(fiber.type, fiber.memoizedProps));
      if (JSCompiler_temp && (JSCompiler_temp = nextHydratableInstance)) {
        if (shouldClientRenderOnMismatch(fiber)) {
          warnIfUnhydratedTailNodes(fiber), throwOnHydrationMismatch();
        } else {
          for (; JSCompiler_temp;) {
            deleteHydratableInstance(fiber, JSCompiler_temp), JSCompiler_temp = getNextHydratable(JSCompiler_temp.nextSibling);
          }
        }
      }
      popToNextHostParent(fiber);
      if (13 === fiber.tag) {
        fiber = fiber.memoizedState;
        fiber = null !== fiber ? fiber.dehydrated : null;
        if (!fiber) {
          throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        }
        a: {
          fiber = fiber.nextSibling;
          for (JSCompiler_temp = 0; fiber;) {
            if (8 === fiber.nodeType) {
              var data = fiber.data;
              if (data === SUSPENSE_END_DATA) {
                if (0 === JSCompiler_temp) {
                  nextHydratableInstance = getNextHydratable(fiber.nextSibling);
                  break a;
                }
                JSCompiler_temp--;
              } else {
                data !== SUSPENSE_START_DATA && data !== SUSPENSE_FALLBACK_START_DATA && data !== SUSPENSE_PENDING_START_DATA || JSCompiler_temp++;
              }
            }
            fiber = fiber.nextSibling;
          }
          nextHydratableInstance = null;
        }
      } else {
        nextHydratableInstance = hydrationParentFiber ? getNextHydratable(fiber.stateNode.nextSibling) : null;
      }
      return !0;
    }
    function warnIfUnhydratedTailNodes(fiber) {
      for (var nextInstance = nextHydratableInstance; nextInstance;) {
        warnUnhydratedInstance(fiber, nextInstance), nextInstance = getNextHydratable(nextInstance.nextSibling);
      }
    }
    function resetHydrationState() {
      nextHydratableInstance = hydrationParentFiber = null;
      didSuspendOrErrorDEV = isHydrating = !1;
    }
    function queueHydrationError(error) {
      null === hydrationErrors ? hydrationErrors = [error] : hydrationErrors.push(error);
    }
    function resolveDefaultProps(Component, baseProps) {
      if (Component && Component.defaultProps) {
        baseProps = assign({}, baseProps);
        Component = Component.defaultProps;
        for (var propName in Component) {
          void 0 === baseProps[propName] && (baseProps[propName] = Component[propName]);
        }
        return baseProps;
      }
      return baseProps;
    }
    function resetContextDependencies() {
      lastFullyObservedContext = lastContextDependency = currentlyRenderingFiber = null;
      isDisallowedContextReadInDEV = !1;
    }
    function pushProvider(providerFiber, context, nextValue) {
      push(valueCursor, context._currentValue, providerFiber);
      context._currentValue = nextValue;
      void 0 !== context._currentRenderer && null !== context._currentRenderer && context._currentRenderer !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
      context._currentRenderer = rendererSigil;
    }
    function popProvider(context, providerFiber) {
      var currentValue = valueCursor.current;
      pop(valueCursor, providerFiber);
      context._currentValue = currentValue;
    }
    function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
      for (; null !== parent;) {
        var alternate = parent.alternate;
        (parent.childLanes & renderLanes) !== renderLanes ? (parent.childLanes |= renderLanes, null !== alternate && (alternate.childLanes |= renderLanes)) : null !== alternate && (alternate.childLanes & renderLanes) !== renderLanes && (alternate.childLanes |= renderLanes);
        if (parent === propagationRoot) {
          break;
        }
        parent = parent.return;
      }
      parent !== propagationRoot && error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
    }
    function prepareToReadContext(workInProgress, renderLanes) {
      currentlyRenderingFiber = workInProgress;
      lastFullyObservedContext = lastContextDependency = null;
      workInProgress = workInProgress.dependencies;
      null !== workInProgress && null !== workInProgress.firstContext && (0 !== (workInProgress.lanes & renderLanes) && (didReceiveUpdate = !0), workInProgress.firstContext = null);
    }
    function readContext(context) {
      isDisallowedContextReadInDEV && error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      var value = context._currentValue;
      if (lastFullyObservedContext !== context) {
        if (context = {context, memoizedValue:value, next:null}, null === lastContextDependency) {
          if (null === currentlyRenderingFiber) {
            throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          }
          lastContextDependency = context;
          currentlyRenderingFiber.dependencies = {lanes:0, firstContext:context};
        } else {
          lastContextDependency = lastContextDependency.next = context;
        }
      }
      return value;
    }
    function pushConcurrentUpdateQueue(queue) {
      null === concurrentQueues ? concurrentQueues = [queue] : concurrentQueues.push(queue);
    }
    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
      var interleaved = queue.interleaved;
      null === interleaved ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update);
      queue.interleaved = update;
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
      sourceFiber.lanes |= lane;
      var alternate = sourceFiber.alternate;
      null !== alternate && (alternate.lanes |= lane);
      null === alternate && 0 !== (sourceFiber.flags & 4098) && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
      alternate = sourceFiber;
      for (var parent = sourceFiber.return; null !== parent;) {
        parent.childLanes |= lane, alternate = parent.alternate, null !== alternate ? alternate.childLanes |= lane : 0 !== (parent.flags & 4098) && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber), alternate = parent, parent = parent.return;
      }
      return 3 === alternate.tag ? alternate.stateNode : null;
    }
    function initializeUpdateQueue(fiber) {
      fiber.updateQueue = {baseState:fiber.memoizedState, firstBaseUpdate:null, lastBaseUpdate:null, shared:{pending:null, interleaved:null, lanes:0}, effects:null};
    }
    function cloneUpdateQueue(current, workInProgress) {
      current = current.updateQueue;
      workInProgress.updateQueue === current && (workInProgress.updateQueue = {baseState:current.baseState, firstBaseUpdate:current.firstBaseUpdate, lastBaseUpdate:current.lastBaseUpdate, shared:current.shared, effects:current.effects});
    }
    function createUpdate(eventTime, lane) {
      return {eventTime, lane, tag:UpdateState, payload:null, callback:null, next:null};
    }
    function enqueueUpdate(fiber, update, lane) {
      var updateQueue = fiber.updateQueue;
      if (null === updateQueue) {
        return null;
      }
      updateQueue = updateQueue.shared;
      currentlyProcessingQueue !== updateQueue || didWarnUpdateInsideUpdate || (error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."), didWarnUpdateInsideUpdate = !0);
      if ((executionContext & RenderContext) !== NoContext) {
        var pending = updateQueue.pending;
        null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
        updateQueue.pending = update;
        return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      pending = updateQueue.interleaved;
      null === pending ? (update.next = update, pushConcurrentUpdateQueue(updateQueue)) : (update.next = pending.next, pending.next = update);
      updateQueue.interleaved = update;
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function entangleTransitions(root, fiber, lane) {
      fiber = fiber.updateQueue;
      if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & TransitionLanes))) {
        var queueLanes = fiber.lanes;
        queueLanes &= root.pendingLanes;
        lane |= queueLanes;
        fiber.lanes = lane;
        markRootEntangled(root, lane);
      }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
      var queue = workInProgress.updateQueue, current = workInProgress.alternate;
      if (null !== current && (current = current.updateQueue, queue === current)) {
        var newFirst = null, newLast = null;
        queue = queue.firstBaseUpdate;
        if (null !== queue) {
          do {
            var clone = {eventTime:queue.eventTime, lane:queue.lane, tag:queue.tag, payload:queue.payload, callback:queue.callback, next:null};
            null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
            queue = queue.next;
          } while (null !== queue);
          null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
        } else {
          newFirst = newLast = capturedUpdate;
        }
        queue = {baseState:current.baseState, firstBaseUpdate:newFirst, lastBaseUpdate:newLast, shared:current.shared, effects:current.effects};
        workInProgress.updateQueue = queue;
        return;
      }
      workInProgress = queue.lastBaseUpdate;
      null === workInProgress ? queue.firstBaseUpdate = capturedUpdate : workInProgress.next = capturedUpdate;
      queue.lastBaseUpdate = capturedUpdate;
    }
    function processUpdateQueue(workInProgress, props, instance$jscomp$0, renderLanes) {
      var queue = workInProgress.updateQueue;
      hasForceUpdate = !1;
      currentlyProcessingQueue = queue.shared;
      var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
      if (null !== pendingQueue) {
        queue.shared.pending = null;
        var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
        lastPendingUpdate.next = null;
        null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
        lastBaseUpdate = lastPendingUpdate;
        var current = workInProgress.alternate;
        null !== current && (current = current.updateQueue, pendingQueue = current.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current.lastBaseUpdate = lastPendingUpdate));
      }
      if (null !== firstBaseUpdate) {
        var newState = queue.baseState;
        lastBaseUpdate = 0;
        current = firstPendingUpdate = lastPendingUpdate = null;
        pendingQueue = firstBaseUpdate;
        do {
          var updateLane = pendingQueue.lane, updateEventTime = pendingQueue.eventTime;
          if ((renderLanes & updateLane) === updateLane) {
            null !== current && (current = current.next = {eventTime:updateEventTime, lane:0, tag:pendingQueue.tag, payload:pendingQueue.payload, callback:pendingQueue.callback, next:null});
            a: {
              updateLane = workInProgress;
              var partialState = pendingQueue;
              updateEventTime = props;
              var instance = instance$jscomp$0;
              switch(partialState.tag) {
                case 1:
                  partialState = partialState.payload;
                  if ("function" === typeof partialState) {
                    isDisallowedContextReadInDEV = !0;
                    var nextState = partialState.call(instance, newState, updateEventTime);
                    if (updateLane.mode & 8) {
                      setIsStrictModeForDevtools(!0);
                      try {
                        partialState.call(instance, newState, updateEventTime);
                      } finally {
                        setIsStrictModeForDevtools(!1);
                      }
                    }
                    isDisallowedContextReadInDEV = !1;
                    newState = nextState;
                    break a;
                  }
                  newState = partialState;
                  break a;
                case 3:
                  updateLane.flags = updateLane.flags & -65537 | 128;
                case UpdateState:
                  nextState = partialState.payload;
                  if ("function" === typeof nextState) {
                    isDisallowedContextReadInDEV = !0;
                    partialState = nextState.call(instance, newState, updateEventTime);
                    if (updateLane.mode & 8) {
                      setIsStrictModeForDevtools(!0);
                      try {
                        nextState.call(instance, newState, updateEventTime);
                      } finally {
                        setIsStrictModeForDevtools(!1);
                      }
                    }
                    isDisallowedContextReadInDEV = !1;
                  } else {
                    partialState = nextState;
                  }
                  if (null === partialState || void 0 === partialState) {
                    break a;
                  }
                  newState = assign({}, newState, partialState);
                  break a;
                case ForceUpdate:
                  hasForceUpdate = !0;
              }
            }
            null !== pendingQueue.callback && 0 !== pendingQueue.lane && (workInProgress.flags |= 64, updateLane = queue.effects, null === updateLane ? queue.effects = [pendingQueue] : updateLane.push(pendingQueue));
          } else {
            updateEventTime = {eventTime:updateEventTime, lane:updateLane, tag:pendingQueue.tag, payload:pendingQueue.payload, callback:pendingQueue.callback, next:null}, null === current ? (firstPendingUpdate = current = updateEventTime, lastPendingUpdate = newState) : current = current.next = updateEventTime, lastBaseUpdate |= updateLane;
          }
          pendingQueue = pendingQueue.next;
          if (null === pendingQueue) {
            if (pendingQueue = queue.shared.pending, null === pendingQueue) {
              break;
            } else {
              updateLane = pendingQueue, pendingQueue = updateLane.next, updateLane.next = null, queue.lastBaseUpdate = updateLane, queue.shared.pending = null;
            }
          }
        } while (1);
        null === current && (lastPendingUpdate = newState);
        queue.baseState = lastPendingUpdate;
        queue.firstBaseUpdate = firstPendingUpdate;
        queue.lastBaseUpdate = current;
        props = queue.shared.interleaved;
        if (null !== props) {
          queue = props;
          do {
            lastBaseUpdate |= queue.lane, queue = queue.next;
          } while (queue !== props);
        } else {
          null === firstBaseUpdate && (queue.shared.lanes = 0);
        }
        workInProgressRootSkippedLanes |= lastBaseUpdate;
        workInProgress.lanes = lastBaseUpdate;
        workInProgress.memoizedState = newState;
      }
      currentlyProcessingQueue = null;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
      finishedWork = finishedQueue.effects;
      finishedQueue.effects = null;
      if (null !== finishedWork) {
        for (finishedQueue = 0; finishedQueue < finishedWork.length; finishedQueue++) {
          var effect = finishedWork[finishedQueue], callback = effect.callback;
          if (null !== callback) {
            effect.callback = null;
            if ("function" !== typeof callback) {
              throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
            }
            callback.call(instance);
          }
        }
      }
    }
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
      var prevState = workInProgress.memoizedState, partialState = getDerivedStateFromProps(nextProps, prevState);
      if (workInProgress.mode & 8) {
        setIsStrictModeForDevtools(!0);
        try {
          partialState = getDerivedStateFromProps(nextProps, prevState);
        } finally {
          setIsStrictModeForDevtools(!1);
        }
      }
      warnOnUndefinedDerivedState(ctor, partialState);
      ctor = null === partialState || void 0 === partialState ? prevState : assign({}, prevState, partialState);
      workInProgress.memoizedState = ctor;
      0 === workInProgress.lanes && (workInProgress.updateQueue.baseState = ctor);
    }
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
      var instance = workInProgress.stateNode;
      if ("function" === typeof instance.shouldComponentUpdate) {
        oldProps = instance.shouldComponentUpdate(newProps, newState, nextContext);
        if (workInProgress.mode & 8) {
          setIsStrictModeForDevtools(!0);
          try {
            oldProps = instance.shouldComponentUpdate(newProps, newState, nextContext);
          } finally {
            setIsStrictModeForDevtools(!1);
          }
        }
        void 0 === oldProps && error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
        return oldProps;
      }
      return ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : !0;
    }
    function constructClassInstance(workInProgress, ctor, props) {
      var isLegacyContextConsumer = !1, unmaskedContext = emptyContextObject;
      var context = ctor.contextType;
      if ("contextType" in ctor && null !== context && (void 0 === context || context.$$typeof !== REACT_CONTEXT_TYPE || void 0 !== context._context) && !didWarnAboutInvalidateContextType.has(ctor)) {
        didWarnAboutInvalidateContextType.add(ctor);
        var addendum = void 0 === context ? " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : "object" !== typeof context ? " However, it is set to a " + typeof context + "." : context.$$typeof === REACT_PROVIDER_TYPE ? " Did you accidentally pass the Context.Provider instead?" : void 0 !== context._context ? " Did you accidentally pass the Context.Consumer instead?" : 
        " However, it is set to an object with keys {" + Object.keys(context).join(", ") + "}.";
        error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
      }
      "object" === typeof context && null !== context ? context = readContext(context) : (unmaskedContext = isContextProvider(ctor) ? previousContext : contextStackCursor.current, isLegacyContextConsumer = ctor.contextTypes, context = (isLegacyContextConsumer = null !== isLegacyContextConsumer && void 0 !== isLegacyContextConsumer) ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject);
      addendum = new ctor(props, context);
      if (workInProgress.mode & 8) {
        setIsStrictModeForDevtools(!0);
        try {
          addendum = new ctor(props, context);
        } finally {
          setIsStrictModeForDevtools(!1);
        }
      }
      props = workInProgress.memoizedState = null !== addendum.state && void 0 !== addendum.state ? addendum.state : null;
      var instance = addendum;
      instance.updater = classComponentUpdater;
      workInProgress.stateNode = instance;
      instance._reactInternals = workInProgress;
      instance._reactInternalInstance = fakeInternalInstance;
      "function" === typeof ctor.getDerivedStateFromProps && null === props && (props = getComponentNameFromType(ctor) || "Component", didWarnAboutUninitializedState.has(props) || (didWarnAboutUninitializedState.add(props), error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", 
      props, null === addendum.state ? "null" : "undefined", props)));
      if ("function" === typeof ctor.getDerivedStateFromProps || "function" === typeof addendum.getSnapshotBeforeUpdate) {
        var foundWillUpdateName = instance = props = null;
        "function" === typeof addendum.componentWillMount && !0 !== addendum.componentWillMount.__suppressDeprecationWarning ? props = "componentWillMount" : "function" === typeof addendum.UNSAFE_componentWillMount && (props = "UNSAFE_componentWillMount");
        "function" === typeof addendum.componentWillReceiveProps && !0 !== addendum.componentWillReceiveProps.__suppressDeprecationWarning ? instance = "componentWillReceiveProps" : "function" === typeof addendum.UNSAFE_componentWillReceiveProps && (instance = "UNSAFE_componentWillReceiveProps");
        "function" === typeof addendum.componentWillUpdate && !0 !== addendum.componentWillUpdate.__suppressDeprecationWarning ? foundWillUpdateName = "componentWillUpdate" : "function" === typeof addendum.UNSAFE_componentWillUpdate && (foundWillUpdateName = "UNSAFE_componentWillUpdate");
        if (null !== props || null !== instance || null !== foundWillUpdateName) {
          var _componentName = getComponentNameFromType(ctor) || "Component";
          ctor = "function" === typeof ctor.getDerivedStateFromProps ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
          didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, ctor, null !== props ? "\n  " + props : "", 
          null !== instance ? "\n  " + instance : "", null !== foundWillUpdateName ? "\n  " + foundWillUpdateName : ""));
        }
      }
      isLegacyContextConsumer && (workInProgress = workInProgress.stateNode, workInProgress.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, workInProgress.__reactInternalMemoizedMaskedChildContext = context);
      return addendum;
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
      var oldState = instance.state;
      "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
      "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      instance.state !== oldState && (workInProgress = getComponentNameFromFiber(workInProgress) || "Component", didWarnAboutStateAssignmentForComponent.has(workInProgress) || (didWarnAboutStateAssignmentForComponent.add(workInProgress), error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", workInProgress)), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
    }
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
      var instance = workInProgress.stateNode, name = getComponentNameFromType(ctor) || "Component";
      instance.render || (ctor.prototype && "function" === typeof ctor.prototype.render ? error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name) : error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name));
      !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state || error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
      instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved && error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
      instance.propTypes && error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
      instance.contextType && error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
      instance.contextTypes && error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
      ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor) && (didWarnAboutContextTypeAndContextTypes.add(ctor), error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name));
      "function" === typeof instance.componentShouldUpdate && error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
      ctor.prototype && ctor.prototype.isPureReactComponent && "undefined" !== typeof instance.shouldComponentUpdate && error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
      "function" === typeof instance.componentDidUnmount && error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
      "function" === typeof instance.componentDidReceiveProps && error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
      "function" === typeof instance.componentWillRecieveProps && error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
      "function" === typeof instance.UNSAFE_componentWillRecieveProps && error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
      var hasMutatedProps = instance.props !== newProps;
      void 0 !== instance.props && hasMutatedProps && error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
      instance.defaultProps && error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
      "function" !== typeof instance.getSnapshotBeforeUpdate || "function" === typeof instance.componentDidUpdate || didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor) || (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor)));
      "function" === typeof instance.getDerivedStateFromProps && error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
      "function" === typeof instance.getDerivedStateFromError && error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
      "function" === typeof ctor.getSnapshotBeforeUpdate && error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
      (hasMutatedProps = instance.state) && ("object" !== typeof hasMutatedProps || isArrayImpl(hasMutatedProps)) && error("%s.state: must be set to an object or null", name);
      "function" === typeof instance.getChildContext && "object" !== typeof ctor.childContextTypes && error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
      instance = workInProgress.stateNode;
      instance.props = newProps;
      instance.state = workInProgress.memoizedState;
      instance.refs = emptyRefsObject;
      initializeUpdateQueue(workInProgress);
      name = ctor.contextType;
      "object" === typeof name && null !== name ? instance.context = readContext(name) : (name = isContextProvider(ctor) ? previousContext : contextStackCursor.current, instance.context = getMaskedContext(workInProgress, name));
      instance.state === newProps && (name = getComponentNameFromType(ctor) || "Component", didWarnAboutDirectlyAssigningPropsToState.has(name) || (didWarnAboutDirectlyAssigningPropsToState.add(name), error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", name)));
      workInProgress.mode & 8 && ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
      instance.state = workInProgress.memoizedState;
      name = ctor.getDerivedStateFromProps;
      "function" === typeof name && (applyDerivedStateFromProps(workInProgress, ctor, name, newProps), instance.state = workInProgress.memoizedState);
      "function" === typeof ctor.getDerivedStateFromProps || "function" === typeof instance.getSnapshotBeforeUpdate || "function" !== typeof instance.UNSAFE_componentWillMount && "function" !== typeof instance.componentWillMount || (ctor = instance.state, "function" === typeof instance.componentWillMount && instance.componentWillMount(), "function" === typeof instance.UNSAFE_componentWillMount && instance.UNSAFE_componentWillMount(), ctor !== instance.state && (error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", 
      getComponentNameFromFiber(workInProgress) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, null)), processUpdateQueue(workInProgress, newProps, instance, renderLanes), instance.state = workInProgress.memoizedState);
      "function" === typeof instance.componentDidMount && (newProps = 4194308, 0 !== (workInProgress.mode & 16) && (newProps |= 16777216), workInProgress.flags |= newProps);
    }
    function coerceRef(returnFiber, current, element) {
      var mixedRef = element.ref;
      if (null !== mixedRef && "function" !== typeof mixedRef && "object" !== typeof mixedRef) {
        !(returnFiber.mode & 8) || element._owner && element._self && element._owner.stateNode !== element._self || (returnFiber = getComponentNameFromFiber(returnFiber) || "Component", didWarnAboutStringRefs[returnFiber] || (error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', 
        mixedRef), didWarnAboutStringRefs[returnFiber] = !0));
        if (element._owner) {
          element = element._owner;
          if (element) {
            if (1 !== element.tag) {
              throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
            }
            var inst = element.stateNode;
          }
          if (!inst) {
            throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
          }
          var resolvedInst = inst, stringRef = "" + mixedRef;
          if (null !== current && null !== current.ref && "function" === typeof current.ref && current.ref._stringRef === stringRef) {
            return current.ref;
          }
          current = function(value) {
            var refs = resolvedInst.refs;
            refs === emptyRefsObject && (refs = resolvedInst.refs = {});
            null === value ? delete refs[stringRef] : refs[stringRef] = value;
          };
          current._stringRef = stringRef;
          return current;
        }
        if ("string" !== typeof mixedRef) {
          throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
        }
        if (!element._owner) {
          throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
        }
      }
      return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
      returnFiber = Object.prototype.toString.call(newChild);
      throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead.");
    }
    function warnOnFunctionType(returnFiber) {
      returnFiber = getComponentNameFromFiber(returnFiber) || "Component";
      ownerHasFunctionTypeWarning[returnFiber] || (ownerHasFunctionTypeWarning[returnFiber] = !0, error("Functions are not valid as a React child. This may happen if you return a Component instead of \x3cComponent /\x3e from render. Or maybe you meant to call this function rather than return it."));
    }
    function resolveLazy(lazyType) {
      var init = lazyType._init;
      return init(lazyType._payload);
    }
    function ChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (shouldTrackSideEffects) {
          var deletions = returnFiber.deletions;
          null === deletions ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
        }
      }
      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) {
          return null;
        }
        for (; null !== currentFirstChild;) {
          deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
        }
        return null;
      }
      function mapRemainingChildren(returnFiber, currentFirstChild) {
        for (returnFiber = new Map(); null !== currentFirstChild;) {
          null !== currentFirstChild.key ? returnFiber.set(currentFirstChild.key, currentFirstChild) : returnFiber.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
        }
        return returnFiber;
      }
      function useFiber(fiber, pendingProps) {
        fiber = createWorkInProgress(fiber, pendingProps);
        fiber.index = 0;
        fiber.sibling = null;
        return fiber;
      }
      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects) {
          return newFiber.flags |= 1048576, lastPlacedIndex;
        }
        newIndex = newFiber.alternate;
        if (null !== newIndex) {
          return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 2, lastPlacedIndex) : newIndex;
        }
        newFiber.flags |= 2;
        return lastPlacedIndex;
      }
      function placeSingleChild(newFiber) {
        shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 2);
        return newFiber;
      }
      function updateTextNode(returnFiber, current, textContent, lanes) {
        if (null === current || 6 !== current.tag) {
          return current = createFiberFromText(textContent, returnFiber.mode, lanes), current.return = returnFiber, current;
        }
        current = useFiber(current, textContent);
        current.return = returnFiber;
        return current;
      }
      function updateElement(returnFiber, current, element, lanes) {
        var elementType = element.type;
        if (elementType === REACT_FRAGMENT_TYPE) {
          return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
        }
        if (null !== current && (current.elementType === elementType || isCompatibleFamilyForHotReloading(current, element) || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type)) {
          return lanes = useFiber(current, element.props), lanes.ref = coerceRef(returnFiber, current, element), lanes.return = returnFiber, lanes._debugSource = element._source, lanes._debugOwner = element._owner, lanes;
        }
        lanes = createFiberFromElement(element, returnFiber.mode, lanes);
        lanes.ref = coerceRef(returnFiber, current, element);
        lanes.return = returnFiber;
        return lanes;
      }
      function updatePortal(returnFiber, current, portal, lanes) {
        if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
          return current = createFiberFromPortal(portal, returnFiber.mode, lanes), current.return = returnFiber, current;
        }
        current = useFiber(current, portal.children || []);
        current.return = returnFiber;
        return current;
      }
      function updateFragment(returnFiber, current, fragment, lanes, key) {
        if (null === current || 7 !== current.tag) {
          return current = createFiberFromFragment(fragment, returnFiber.mode, lanes, key), current.return = returnFiber, current;
        }
        current = useFiber(current, fragment);
        current.return = returnFiber;
        return current;
      }
      function createChild(returnFiber, newChild, lanes) {
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild) {
          return newChild = createFiberFromText("" + newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
        }
        if ("object" === typeof newChild && null !== newChild) {
          switch(newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return lanes = createFiberFromElement(newChild, returnFiber.mode, lanes), lanes.ref = coerceRef(returnFiber, null, newChild), lanes.return = returnFiber, lanes;
            case REACT_PORTAL_TYPE:
              return newChild = createFiberFromPortal(newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
            case REACT_LAZY_TYPE:
              var init = newChild._init;
              return createChild(returnFiber, init(newChild._payload), lanes);
          }
          if (isArrayImpl(newChild) || getIteratorFn(newChild)) {
            return newChild = createFiberFromFragment(newChild, returnFiber.mode, lanes, null), newChild.return = returnFiber, newChild;
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        "function" === typeof newChild && warnOnFunctionType(returnFiber);
        return null;
      }
      function updateSlot(returnFiber, oldFiber, newChild, lanes) {
        var key = null !== oldFiber ? oldFiber.key : null;
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild) {
          return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
        }
        if ("object" === typeof newChild && null !== newChild) {
          switch(newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
            case REACT_PORTAL_TYPE:
              return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
            case REACT_LAZY_TYPE:
              return key = newChild._init, updateSlot(returnFiber, oldFiber, key(newChild._payload), lanes);
          }
          if (isArrayImpl(newChild) || getIteratorFn(newChild)) {
            return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        "function" === typeof newChild && warnOnFunctionType(returnFiber);
        return null;
      }
      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild) {
          return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
        }
        if ("object" === typeof newChild && null !== newChild) {
          switch(newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updateElement(returnFiber, existingChildren, newChild, lanes);
            case REACT_PORTAL_TYPE:
              return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
            case REACT_LAZY_TYPE:
              var init = newChild._init;
              return updateFromMap(existingChildren, returnFiber, newIdx, init(newChild._payload), lanes);
          }
          if (isArrayImpl(newChild) || getIteratorFn(newChild)) {
            return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, lanes, null);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        "function" === typeof newChild && warnOnFunctionType(returnFiber);
        return null;
      }
      function warnOnInvalidKey(child, knownKeys, returnFiber) {
        if ("object" !== typeof child || null === child) {
          return knownKeys;
        }
        switch(child.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            warnForMissingKey(child, returnFiber);
            child = child.key;
            if ("string" !== typeof child) {
              break;
            }
            if (null === knownKeys) {
              knownKeys = new Set();
              knownKeys.add(child);
              break;
            }
            if (!knownKeys.has(child)) {
              knownKeys.add(child);
              break;
            }
            error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", child);
            break;
          case REACT_LAZY_TYPE:
            var init = child._init;
            warnOnInvalidKey(init(child._payload), knownKeys, returnFiber);
        }
        return knownKeys;
      }
      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
        for (var knownKeys = null, i = 0; i < newChildren.length; i++) {
          knownKeys = warnOnInvalidKey(newChildren[i], knownKeys, returnFiber);
        }
        i = knownKeys = null;
        for (var oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
          oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
          if (null === newFiber) {
            null === oldFiber && (oldFiber = nextOldFiber);
            break;
          }
          shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
          null === i ? knownKeys = newFiber : i.sibling = newFiber;
          i = newFiber;
          oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length) {
          return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), knownKeys;
        }
        if (null === oldFiber) {
          for (; newIdx < newChildren.length; newIdx++) {
            oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === i ? knownKeys = oldFiber : i.sibling = oldFiber, i = oldFiber);
          }
          isHydrating && pushTreeFork(returnFiber, newIdx);
          return knownKeys;
        }
        for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
          nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], lanes), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === i ? knownKeys = nextOldFiber : i.sibling = nextOldFiber, i = nextOldFiber);
        }
        shouldTrackSideEffects && oldFiber.forEach(function(child) {
          return deleteChild(returnFiber, child);
        });
        isHydrating && pushTreeFork(returnFiber, newIdx);
        return knownKeys;
      }
      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
        var iteratorFn = getIteratorFn(newChildrenIterable);
        if ("function" !== typeof iteratorFn) {
          throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
        }
        "function" === typeof Symbol && "Generator" === newChildrenIterable[Symbol.toStringTag] && (didWarnAboutGenerators || error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), didWarnAboutGenerators = !0);
        newChildrenIterable.entries === iteratorFn && (didWarnAboutMaps || error("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
        var _newChildren = iteratorFn.call(newChildrenIterable);
        if (_newChildren) {
          for (var knownKeys = null, _step = _newChildren.next(); !_step.done; _step = _newChildren.next()) {
            knownKeys = warnOnInvalidKey(_step.value, knownKeys, returnFiber);
          }
        }
        newChildrenIterable = iteratorFn.call(newChildrenIterable);
        if (null == newChildrenIterable) {
          throw Error("An iterable object provided no iterator.");
        }
        _newChildren = iteratorFn = null;
        var oldFiber = currentFirstChild;
        knownKeys = currentFirstChild = 0;
        var nextOldFiber = null;
        for (_step = newChildrenIterable.next(); null !== oldFiber && !_step.done; knownKeys++, _step = newChildrenIterable.next()) {
          oldFiber.index > knownKeys ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
          var newFiber = updateSlot(returnFiber, oldFiber, _step.value, lanes);
          if (null === newFiber) {
            null === oldFiber && (oldFiber = nextOldFiber);
            break;
          }
          shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
          currentFirstChild = placeChild(newFiber, currentFirstChild, knownKeys);
          null === _newChildren ? iteratorFn = newFiber : _newChildren.sibling = newFiber;
          _newChildren = newFiber;
          oldFiber = nextOldFiber;
        }
        if (_step.done) {
          return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, knownKeys), iteratorFn;
        }
        if (null === oldFiber) {
          for (; !_step.done; knownKeys++, _step = newChildrenIterable.next()) {
            _step = createChild(returnFiber, _step.value, lanes), null !== _step && (currentFirstChild = placeChild(_step, currentFirstChild, knownKeys), null === _newChildren ? iteratorFn = _step : _newChildren.sibling = _step, _newChildren = _step);
          }
          isHydrating && pushTreeFork(returnFiber, knownKeys);
          return iteratorFn;
        }
        for (oldFiber = mapRemainingChildren(returnFiber, oldFiber); !_step.done; knownKeys++, _step = newChildrenIterable.next()) {
          _step = updateFromMap(oldFiber, returnFiber, knownKeys, _step.value, lanes), null !== _step && (shouldTrackSideEffects && null !== _step.alternate && oldFiber.delete(null === _step.key ? knownKeys : _step.key), currentFirstChild = placeChild(_step, currentFirstChild, knownKeys), null === _newChildren ? iteratorFn = _step : _newChildren.sibling = _step, _newChildren = _step);
        }
        shouldTrackSideEffects && oldFiber.forEach(function(child) {
          return deleteChild(returnFiber, child);
        });
        isHydrating && pushTreeFork(returnFiber, knownKeys);
        return iteratorFn;
      }
      function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
        "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
        if ("object" === typeof newChild && null !== newChild) {
          switch(newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              a: {
                for (var key = newChild.key, child = currentFirstChild; null !== child;) {
                  if (child.key === key) {
                    key = newChild.type;
                    if (key === REACT_FRAGMENT_TYPE) {
                      if (7 === child.tag) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        currentFirstChild = useFiber(child, newChild.props.children);
                        currentFirstChild.return = returnFiber;
                        currentFirstChild._debugSource = newChild._source;
                        currentFirstChild._debugOwner = newChild._owner;
                        returnFiber = currentFirstChild;
                        break a;
                      }
                    } else {
                      if (child.elementType === key || isCompatibleFamilyForHotReloading(child, newChild) || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && resolveLazy(key) === child.type) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        currentFirstChild = useFiber(child, newChild.props);
                        currentFirstChild.ref = coerceRef(returnFiber, child, newChild);
                        currentFirstChild.return = returnFiber;
                        currentFirstChild._debugSource = newChild._source;
                        currentFirstChild._debugOwner = newChild._owner;
                        returnFiber = currentFirstChild;
                        break a;
                      }
                    }
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  } else {
                    deleteChild(returnFiber, child);
                  }
                  child = child.sibling;
                }
                newChild.type === REACT_FRAGMENT_TYPE ? (currentFirstChild = createFiberFromFragment(newChild.props.children, returnFiber.mode, lanes, newChild.key), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (lanes = createFiberFromElement(newChild, returnFiber.mode, lanes), lanes.ref = coerceRef(returnFiber, currentFirstChild, newChild), lanes.return = returnFiber, returnFiber = lanes);
              }
              return placeSingleChild(returnFiber);
            case REACT_PORTAL_TYPE:
              a: {
                for (child = newChild.key; null !== currentFirstChild;) {
                  if (currentFirstChild.key === child) {
                    if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                      currentFirstChild = useFiber(currentFirstChild, newChild.children || []);
                      currentFirstChild.return = returnFiber;
                      returnFiber = currentFirstChild;
                      break a;
                    } else {
                      deleteRemainingChildren(returnFiber, currentFirstChild);
                      break;
                    }
                  } else {
                    deleteChild(returnFiber, currentFirstChild);
                  }
                  currentFirstChild = currentFirstChild.sibling;
                }
                currentFirstChild = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                currentFirstChild.return = returnFiber;
                returnFiber = currentFirstChild;
              }
              return placeSingleChild(returnFiber);
            case REACT_LAZY_TYPE:
              return child = newChild._init, reconcileChildFibers(returnFiber, currentFirstChild, child(newChild._payload), lanes);
          }
          if (isArrayImpl(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
          }
          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild) {
          return newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), currentFirstChild = useFiber(currentFirstChild, newChild), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild) : (deleteRemainingChildren(returnFiber, currentFirstChild), currentFirstChild = createFiberFromText(newChild, returnFiber.mode, lanes), currentFirstChild.return = returnFiber, returnFiber = currentFirstChild), 
          placeSingleChild(returnFiber);
        }
        "function" === typeof newChild && warnOnFunctionType(returnFiber);
        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }
      return reconcileChildFibers;
    }
    function requiredContext(c) {
      if (c === NO_CONTEXT) {
        throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      }
      return c;
    }
    function pushHostContainer(fiber, nextRootInstance) {
      push(rootInstanceStackCursor, nextRootInstance, fiber);
      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, NO_CONTEXT, fiber);
      var nextRootContext = nextRootInstance.nodeType;
      switch(nextRootContext) {
        case 9:
        case 11:
          nextRootContext = 9 === nextRootContext ? "#document" : "#fragment";
          nextRootInstance = (nextRootInstance = nextRootInstance.documentElement) ? nextRootInstance.namespaceURI : getChildNamespace(null, "");
          break;
        default:
          nextRootContext = 8 === nextRootContext ? nextRootInstance.parentNode : nextRootInstance, nextRootInstance = nextRootContext.namespaceURI || null, nextRootContext = nextRootContext.tagName, nextRootInstance = getChildNamespace(nextRootInstance, nextRootContext);
      }
      nextRootContext = nextRootContext.toLowerCase();
      nextRootContext = updatedAncestorInfo(null, nextRootContext);
      nextRootContext = {namespace:nextRootInstance, ancestorInfo:nextRootContext};
      pop(contextStackCursor$1, fiber);
      push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
      pop(rootInstanceStackCursor, fiber);
    }
    function pushHostContext(fiber) {
      requiredContext(rootInstanceStackCursor.current);
      var context = requiredContext(contextStackCursor$1.current);
      var type = fiber.type;
      var nextContext = getChildNamespace(context.namespace, type);
      type = updatedAncestorInfo(context.ancestorInfo, type);
      nextContext = {namespace:nextContext, ancestorInfo:type};
      context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor$1, nextContext, fiber));
    }
    function popHostContext(fiber) {
      contextFiberStackCursor.current === fiber && (pop(contextStackCursor$1, fiber), pop(contextFiberStackCursor, fiber));
    }
    function findFirstSuspended(row) {
      for (var node = row; null !== node;) {
        if (13 === node.tag) {
          var state = node.memoizedState;
          if (null !== state && (state = state.dehydrated, null === state || state.data === SUSPENSE_PENDING_START_DATA || state.data === SUSPENSE_FALLBACK_START_DATA)) {
            return node;
          }
        } else if (19 === node.tag && void 0 !== node.memoizedProps.revealOrder) {
          if (0 !== (node.flags & 128)) {
            return node;
          }
        } else if (null !== node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === row) {
          break;
        }
        for (; null === node.sibling;) {
          if (null === node.return || node.return === row) {
            return null;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
      return null;
    }
    function resetWorkInProgressVersions() {
      for (var i = 0; i < workInProgressSources.length; i++) {
        workInProgressSources[i]._workInProgressVersionPrimary = null;
      }
      workInProgressSources.length = 0;
    }
    function mountHookTypesDev() {
      var hookName = currentHookNameInDev;
      null === hookTypesDev ? hookTypesDev = [hookName] : hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
      var hookName = currentHookNameInDev;
      if (null !== hookTypesDev && (hookTypesUpdateIndexDev++, hookTypesDev[hookTypesUpdateIndexDev] !== hookName)) {
        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName) && (didWarnAboutMismatchedHooksForComponent.add(componentName), null !== hookTypesDev)) {
          for (var table = "", i = 0; i <= hookTypesUpdateIndexDev; i++) {
            var oldHookName = hookTypesDev[i], newHookName = i === hookTypesUpdateIndexDev ? hookName : oldHookName;
            for (oldHookName = i + 1 + ". " + oldHookName; 30 > oldHookName.length;) {
              oldHookName += " ";
            }
            oldHookName += newHookName + "\n";
            table += oldHookName;
          }
          error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
        }
      }
    }
    function checkDepsAreArrayDev(deps) {
      void 0 === deps || null === deps || isArrayImpl(deps) || error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function throwInvalidHookError() {
      throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
      if (ignorePreviousDependencies) {
        return !1;
      }
      if (null === prevDeps) {
        return error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), !1;
      }
      nextDeps.length !== prevDeps.length && error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
        if (!objectIs(nextDeps[i], prevDeps[i])) {
          return !1;
        }
      }
      return !0;
    }
    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
      renderLanes = nextRenderLanes;
      currentlyRenderingFiber$1 = workInProgress;
      hookTypesDev = null !== current ? current._debugHookTypes : null;
      hookTypesUpdateIndexDev = -1;
      ignorePreviousDependencies = null !== current && current.type !== workInProgress.type;
      workInProgress.memoizedState = null;
      workInProgress.updateQueue = null;
      workInProgress.lanes = 0;
      ReactCurrentDispatcher$1.current = null !== current && null !== current.memoizedState ? HooksDispatcherOnUpdateInDEV : null !== hookTypesDev ? HooksDispatcherOnMountWithHookTypesInDEV : HooksDispatcherOnMountInDEV;
      nextRenderLanes = Component(props, secondArg);
      if (didScheduleRenderPhaseUpdateDuringThisPass) {
        var numberOfReRenders = 0;
        do {
          didScheduleRenderPhaseUpdateDuringThisPass = !1;
          localIdCounter = 0;
          if (25 <= numberOfReRenders) {
            throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          numberOfReRenders += 1;
          ignorePreviousDependencies = !1;
          workInProgressHook = currentHook = null;
          workInProgress.updateQueue = null;
          hookTypesUpdateIndexDev = -1;
          ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
          nextRenderLanes = Component(props, secondArg);
        } while (didScheduleRenderPhaseUpdateDuringThisPass);
      }
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      workInProgress._debugHookTypes = hookTypesDev;
      Component = null !== currentHook && null !== currentHook.next;
      renderLanes = 0;
      hookTypesDev = currentHookNameInDev = workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
      hookTypesUpdateIndexDev = -1;
      null !== current && (current.flags & 14680064) !== (workInProgress.flags & 14680064) && 0 !== (current.mode & 1) && error("Internal React error: Expected static flag was missing. Please notify the React team.");
      didScheduleRenderPhaseUpdate = !1;
      if (Component) {
        throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
      }
      return nextRenderLanes;
    }
    function checkDidRenderIdHook() {
      var didRenderIdHook = 0 !== localIdCounter;
      localIdCounter = 0;
      return didRenderIdHook;
    }
    function bailoutHooks(current, workInProgress, lanes) {
      workInProgress.updateQueue = current.updateQueue;
      workInProgress.flags = 0 !== (workInProgress.mode & 16) ? workInProgress.flags & -50333701 : workInProgress.flags & -2053;
      current.lanes &= ~lanes;
    }
    function resetHooksAfterThrow() {
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      if (didScheduleRenderPhaseUpdate) {
        for (var hook = currentlyRenderingFiber$1.memoizedState; null !== hook;) {
          var queue = hook.queue;
          null !== queue && (queue.pending = null);
          hook = hook.next;
        }
        didScheduleRenderPhaseUpdate = !1;
      }
      renderLanes = 0;
      hookTypesDev = workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
      hookTypesUpdateIndexDev = -1;
      currentHookNameInDev = null;
      didScheduleRenderPhaseUpdateDuringThisPass = isUpdatingOpaqueValueInRenderPhase = !1;
      localIdCounter = 0;
    }
    function mountWorkInProgressHook() {
      var hook = {memoizedState:null, baseState:null, baseQueue:null, queue:null, next:null};
      null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
      return workInProgressHook;
    }
    function updateWorkInProgressHook() {
      if (null === currentHook) {
        var nextCurrentHook = currentlyRenderingFiber$1.alternate;
        nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
      } else {
        nextCurrentHook = currentHook.next;
      }
      var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState : workInProgressHook.next;
      if (null !== nextWorkInProgressHook) {
        workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;
      } else {
        if (null === nextCurrentHook) {
          throw Error("Rendered more hooks than during the previous render.");
        }
        currentHook = nextCurrentHook;
        nextCurrentHook = {memoizedState:currentHook.memoizedState, baseState:currentHook.baseState, baseQueue:currentHook.baseQueue, queue:currentHook.queue, next:null};
        null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
      }
      return workInProgressHook;
    }
    function basicStateReducer(state, action) {
      return "function" === typeof action ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      initialArg = void 0 !== init ? init(initialArg) : initialArg;
      hook.memoizedState = hook.baseState = initialArg;
      reducer = {pending:null, interleaved:null, lanes:0, dispatch:null, lastRenderedReducer:reducer, lastRenderedState:initialArg};
      hook.queue = reducer;
      reducer = reducer.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, reducer);
      return [hook.memoizedState, reducer];
    }
    function updateReducer(reducer, initialArg, init) {
      initialArg = updateWorkInProgressHook();
      init = initialArg.queue;
      if (null === init) {
        throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      }
      init.lastRenderedReducer = reducer;
      var current = currentHook, baseQueue = current.baseQueue, pendingQueue = init.pending;
      if (null !== pendingQueue) {
        if (null !== baseQueue) {
          var baseFirst = baseQueue.next;
          baseQueue.next = pendingQueue.next;
          pendingQueue.next = baseFirst;
        }
        current.baseQueue !== baseQueue && error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
        current.baseQueue = baseQueue = pendingQueue;
        init.pending = null;
      }
      if (null !== baseQueue) {
        pendingQueue = baseQueue.next;
        current = current.baseState;
        var newBaseQueueFirst = baseFirst = null, newBaseQueueLast = null, update = pendingQueue;
        do {
          var updateLane = update.lane;
          if ((renderLanes & updateLane) === updateLane) {
            null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {lane:0, action:update.action, hasEagerState:update.hasEagerState, eagerState:update.eagerState, next:null}), current = update.hasEagerState ? update.eagerState : reducer(current, update.action);
          } else {
            var clone = {lane:updateLane, action:update.action, hasEagerState:update.hasEagerState, eagerState:update.eagerState, next:null};
            null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = clone, baseFirst = current) : newBaseQueueLast = newBaseQueueLast.next = clone;
            currentlyRenderingFiber$1.lanes |= updateLane;
            workInProgressRootSkippedLanes |= updateLane;
          }
          update = update.next;
        } while (null !== update && update !== pendingQueue);
        null === newBaseQueueLast ? baseFirst = current : newBaseQueueLast.next = newBaseQueueFirst;
        objectIs(current, initialArg.memoizedState) || (didReceiveUpdate = !0);
        initialArg.memoizedState = current;
        initialArg.baseState = baseFirst;
        initialArg.baseQueue = newBaseQueueLast;
        init.lastRenderedState = current;
      }
      reducer = init.interleaved;
      if (null !== reducer) {
        baseQueue = reducer;
        do {
          pendingQueue = baseQueue.lane, currentlyRenderingFiber$1.lanes |= pendingQueue, workInProgressRootSkippedLanes |= pendingQueue, baseQueue = baseQueue.next;
        } while (baseQueue !== reducer);
      } else {
        null === baseQueue && (init.lanes = 0);
      }
      return [initialArg.memoizedState, init.dispatch];
    }
    function rerenderReducer(reducer, initialArg, init) {
      initialArg = updateWorkInProgressHook();
      init = initialArg.queue;
      if (null === init) {
        throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      }
      init.lastRenderedReducer = reducer;
      var dispatch = init.dispatch, lastRenderPhaseUpdate = init.pending, newState = initialArg.memoizedState;
      if (null !== lastRenderPhaseUpdate) {
        init.pending = null;
        var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
        do {
          newState = reducer(newState, update.action), update = update.next;
        } while (update !== lastRenderPhaseUpdate);
        objectIs(newState, initialArg.memoizedState) || (didReceiveUpdate = !0);
        initialArg.memoizedState = newState;
        null === initialArg.baseQueue && (initialArg.baseState = newState);
        init.lastRenderedState = newState;
      }
      return [newState, dispatch];
    }
    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var fiber = currentlyRenderingFiber$1, hook = mountWorkInProgressHook();
      if (isHydrating) {
        if (void 0 === getServerSnapshot) {
          throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        }
        var nextSnapshot = getServerSnapshot();
        didWarnUncachedGetSnapshot || nextSnapshot === getServerSnapshot() || (error("The result of getServerSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = !0);
      } else {
        nextSnapshot = getSnapshot();
        didWarnUncachedGetSnapshot || (getServerSnapshot = getSnapshot(), objectIs(nextSnapshot, getServerSnapshot) || (error("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = !0));
        if (null === workInProgressRoot) {
          throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        }
        0 !== (renderLanes & (InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane)) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
      }
      hook.memoizedState = nextSnapshot;
      getServerSnapshot = {value:nextSnapshot, getSnapshot};
      hook.queue = getServerSnapshot;
      mountEffect(subscribeToStore.bind(null, fiber, getServerSnapshot, subscribe), [subscribe]);
      fiber.flags |= 2048;
      pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, getServerSnapshot, nextSnapshot, getSnapshot), void 0, null);
      return nextSnapshot;
    }
    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      getServerSnapshot = currentlyRenderingFiber$1;
      var hook = updateWorkInProgressHook(), nextSnapshot = getSnapshot();
      if (!didWarnUncachedGetSnapshot) {
        var cachedSnapshot = getSnapshot();
        objectIs(nextSnapshot, cachedSnapshot) || (error("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = !0);
      }
      if (cachedSnapshot = !objectIs(hook.memoizedState, nextSnapshot)) {
        hook.memoizedState = nextSnapshot, didReceiveUpdate = !0;
      }
      hook = hook.queue;
      var create = subscribeToStore.bind(null, getServerSnapshot, hook, subscribe);
      updateEffectImpl(2048, Passive$1, create, [subscribe]);
      if (hook.getSnapshot !== getSnapshot || cachedSnapshot || null !== workInProgressHook && workInProgressHook.memoizedState.tag & HasEffect) {
        getServerSnapshot.flags |= 2048;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, getServerSnapshot, hook, nextSnapshot, getSnapshot), void 0, null);
        if (null === workInProgressRoot) {
          throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        }
        0 !== (renderLanes & (InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane)) || pushStoreConsistencyCheck(getServerSnapshot, getSnapshot, nextSnapshot);
      }
      return nextSnapshot;
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
      fiber.flags |= 16384;
      fiber = {getSnapshot, value:renderedSnapshot};
      getSnapshot = currentlyRenderingFiber$1.updateQueue;
      null === getSnapshot ? (getSnapshot = {lastEffect:null, stores:null}, currentlyRenderingFiber$1.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
      inst.value = nextSnapshot;
      inst.getSnapshot = getSnapshot;
      checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
    }
    function subscribeToStore(fiber, inst, subscribe) {
      return subscribe(function() {
        checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
      });
    }
    function checkIfSnapshotChanged(inst) {
      var latestGetSnapshot = inst.getSnapshot;
      inst = inst.value;
      try {
        var nextValue = latestGetSnapshot();
        return !objectIs(inst, nextValue);
      } catch (error) {
        return !0;
      }
    }
    function forceStoreRerender(fiber) {
      var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
      null !== root && scheduleUpdateOnFiber(root, fiber, SyncLane, -1);
    }
    function mountState(initialState) {
      var hook = mountWorkInProgressHook();
      "function" === typeof initialState && (initialState = initialState());
      hook.memoizedState = hook.baseState = initialState;
      initialState = {pending:null, interleaved:null, lanes:0, dispatch:null, lastRenderedReducer:basicStateReducer, lastRenderedState:initialState};
      hook.queue = initialState;
      initialState = initialState.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, initialState);
      return [hook.memoizedState, initialState];
    }
    function pushEffect(tag, create, destroy, deps) {
      tag = {tag, create, destroy, deps, next:null};
      create = currentlyRenderingFiber$1.updateQueue;
      null === create ? (create = {lastEffect:null, stores:null}, currentlyRenderingFiber$1.updateQueue = create, create.lastEffect = tag.next = tag) : (destroy = create.lastEffect, null === destroy ? create.lastEffect = tag.next = tag : (deps = destroy.next, destroy.next = tag, tag.next = deps, create.lastEffect = tag));
      return tag;
    }
    function mountRef(initialValue) {
      var hook = mountWorkInProgressHook();
      initialValue = {current:initialValue};
      return hook.memoizedState = initialValue;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = mountWorkInProgressHook();
      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, void 0 === deps ? null : deps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = updateWorkInProgressHook();
      deps = void 0 === deps ? null : deps;
      var destroy = void 0;
      if (null !== currentHook) {
        var prevEffect = currentHook.memoizedState;
        destroy = prevEffect.destroy;
        if (null !== deps && areHookInputsEqual(deps, prevEffect.deps)) {
          hook.memoizedState = pushEffect(hookFlags, create, destroy, deps);
          return;
        }
      }
      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, deps);
    }
    function mountEffect(create, deps) {
      return 0 !== (currentlyRenderingFiber$1.mode & 16) ? mountEffectImpl(41945088, Passive$1, create, deps) : mountEffectImpl(8390656, Passive$1, create, deps);
    }
    function mountLayoutEffect(create, deps) {
      var fiberFlags = 4194308;
      0 !== (currentlyRenderingFiber$1.mode & 16) && (fiberFlags |= 16777216);
      return mountEffectImpl(fiberFlags, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
      if ("function" === typeof ref) {
        return create = create(), ref(create), function() {
          ref(null);
        };
      }
      if (null !== ref && void 0 !== ref) {
        return ref.hasOwnProperty("current") || error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(ref).join(", ") + "}"), create = create(), ref.current = create, function() {
          ref.current = null;
        };
      }
    }
    function mountImperativeHandle(ref, create, deps) {
      "function" !== typeof create && error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", null !== create ? typeof create : "null");
      deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
      var fiberFlags = 4194308;
      0 !== (currentlyRenderingFiber$1.mode & 16) && (fiberFlags |= 16777216);
      return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), deps);
    }
    function updateImperativeHandle(ref, create, deps) {
      "function" !== typeof create && error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", null !== create ? typeof create : "null");
      deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
      return updateEffectImpl(4, Layout, imperativeHandleEffect.bind(null, create, ref), deps);
    }
    function mountCallback(callback, deps) {
      mountWorkInProgressHook().memoizedState = [callback, void 0 === deps ? null : deps];
      return callback;
    }
    function updateCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      deps = void 0 === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) {
        return prevState[0];
      }
      hook.memoizedState = [callback, deps];
      return callback;
    }
    function mountMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      deps = void 0 === deps ? null : deps;
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    }
    function updateMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      deps = void 0 === deps ? null : deps;
      var prevState = hook.memoizedState;
      if (null !== prevState && null !== deps && areHookInputsEqual(deps, prevState[1])) {
        return prevState[0];
      }
      nextCreate = nextCreate();
      hook.memoizedState = [nextCreate, deps];
      return nextCreate;
    }
    function mountDeferredValue(value) {
      return mountWorkInProgressHook().memoizedState = value;
    }
    function updateDeferredValue(value) {
      var hook = updateWorkInProgressHook();
      return updateDeferredValueImpl(hook, currentHook.memoizedState, value);
    }
    function rerenderDeferredValue(value) {
      var hook = updateWorkInProgressHook();
      return null === currentHook ? hook.memoizedState = value : updateDeferredValueImpl(hook, currentHook.memoizedState, value);
    }
    function updateDeferredValueImpl(hook, prevValue, value) {
      if (0 === (renderLanes & (SyncLane | InputContinuousLane | DefaultLane))) {
        return hook.baseState && (hook.baseState = !1, didReceiveUpdate = !0), hook.memoizedState = value;
      }
      objectIs(value, prevValue) || (value = claimNextTransitionLane(), currentlyRenderingFiber$1.lanes |= value, workInProgressRootSkippedLanes |= value, hook.baseState = !0);
      return prevValue;
    }
    function startTransition(setPending, callback, options) {
      options = currentUpdatePriority;
      currentUpdatePriority = 0 !== options && options < ContinuousEventPriority ? options : ContinuousEventPriority;
      setPending(!0);
      var prevTransition = ReactCurrentBatchConfig$2.transition;
      ReactCurrentBatchConfig$2.transition = {};
      var currentTransition = ReactCurrentBatchConfig$2.transition;
      ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
      try {
        setPending(!1), callback();
      } finally {
        currentUpdatePriority = options, ReactCurrentBatchConfig$2.transition = prevTransition, null === prevTransition && currentTransition._updatedFibers && (10 < currentTransition._updatedFibers.size && warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), currentTransition._updatedFibers.clear());
      }
    }
    function mountTransition() {
      var _mountState = mountState(!1), isPending = _mountState[0];
      _mountState = startTransition.bind(null, _mountState[1]);
      mountWorkInProgressHook().memoizedState = _mountState;
      return [isPending, _mountState];
    }
    function updateTransition() {
      var isPending = updateReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
      return [isPending, start];
    }
    function rerenderTransition() {
      var isPending = rerenderReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
      return [isPending, start];
    }
    function mountId() {
      var hook = mountWorkInProgressHook(), identifierPrefix = workInProgressRoot.identifierPrefix;
      if (isHydrating) {
        var treeId = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        treeId = (idWithLeadingBit & ~(1 << 32 - clz32(idWithLeadingBit) - 1)).toString(32) + treeId;
        identifierPrefix = ":" + identifierPrefix + "R" + treeId;
        treeId = localIdCounter++;
        0 < treeId && (identifierPrefix += "H" + treeId.toString(32));
        identifierPrefix += ":";
      } else {
        treeId = globalClientIdCounter++, identifierPrefix = ":" + identifierPrefix + "r" + treeId.toString(32) + ":";
      }
      return hook.memoizedState = identifierPrefix;
    }
    function dispatchReducerAction(fiber, queue, action, JSCompiler_OptimizeArgumentsArray_p0) {
      "function" === typeof JSCompiler_OptimizeArgumentsArray_p0 && error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      JSCompiler_OptimizeArgumentsArray_p0 = requestUpdateLane(fiber);
      action = {lane:JSCompiler_OptimizeArgumentsArray_p0, action, hasEagerState:!1, eagerState:null, next:null};
      if (isRenderPhaseUpdate(fiber)) {
        enqueueRenderPhaseUpdate(queue, action);
      } else {
        if (action = enqueueConcurrentHookUpdate(fiber, queue, action, JSCompiler_OptimizeArgumentsArray_p0), null !== action) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(action, fiber, JSCompiler_OptimizeArgumentsArray_p0, eventTime);
          entangleTransitionUpdate(action, queue, JSCompiler_OptimizeArgumentsArray_p0);
        }
      }
      markStateUpdateScheduled(fiber, JSCompiler_OptimizeArgumentsArray_p0);
    }
    function dispatchSetState(fiber, queue, action, JSCompiler_OptimizeArgumentsArray_p1) {
      "function" === typeof JSCompiler_OptimizeArgumentsArray_p1 && error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      JSCompiler_OptimizeArgumentsArray_p1 = requestUpdateLane(fiber);
      var update = {lane:JSCompiler_OptimizeArgumentsArray_p1, action, hasEagerState:!1, eagerState:null, next:null};
      if (isRenderPhaseUpdate(fiber)) {
        enqueueRenderPhaseUpdate(queue, update);
      } else {
        var alternate = fiber.alternate;
        if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate)) {
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            var currentState = queue.lastRenderedState, eagerState = alternate(currentState, action);
            update.hasEagerState = !0;
            update.eagerState = eagerState;
            if (objectIs(eagerState, currentState)) {
              var interleaved = queue.interleaved;
              null === interleaved ? (update.next = update, pushConcurrentUpdateQueue(queue)) : (update.next = interleaved.next, interleaved.next = update);
              queue.interleaved = update;
              return;
            }
          } catch (error) {
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        }
        action = enqueueConcurrentHookUpdate(fiber, queue, update, JSCompiler_OptimizeArgumentsArray_p1);
        null !== action && (currentState = requestEventTime(), scheduleUpdateOnFiber(action, fiber, JSCompiler_OptimizeArgumentsArray_p1, currentState), entangleTransitionUpdate(action, queue, JSCompiler_OptimizeArgumentsArray_p1));
      }
      markStateUpdateScheduled(fiber, JSCompiler_OptimizeArgumentsArray_p1);
    }
    function isRenderPhaseUpdate(fiber) {
      var alternate = fiber.alternate;
      return fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1;
    }
    function enqueueRenderPhaseUpdate(queue, update) {
      didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = !0;
      var pending = queue.pending;
      null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
      queue.pending = update;
    }
    function entangleTransitionUpdate(root, queue, lane) {
      if (0 !== (lane & TransitionLanes)) {
        var queueLanes = queue.lanes;
        queueLanes &= root.pendingLanes;
        lane |= queueLanes;
        queue.lanes = lane;
        markRootEntangled(root, lane);
      }
    }
    function startProfilerTimer(fiber) {
      profilerStartTime = now$1();
      0 > fiber.actualStartTime && (fiber.actualStartTime = now$1());
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
      if (0 <= profilerStartTime) {
        var elapsedTime = now$1() - profilerStartTime;
        fiber.actualDuration += elapsedTime;
        overrideBaseTime && (fiber.selfBaseDuration = elapsedTime);
        profilerStartTime = -1;
      }
    }
    function recordLayoutEffectDuration(fiber) {
      if (0 <= layoutEffectStartTime) {
        var elapsedTime = now$1() - layoutEffectStartTime;
        layoutEffectStartTime = -1;
        for (fiber = fiber.return; null !== fiber;) {
          switch(fiber.tag) {
            case 3:
              fiber.stateNode.effectDuration += elapsedTime;
              return;
            case 12:
              fiber.stateNode.effectDuration += elapsedTime;
              return;
          }
          fiber = fiber.return;
        }
      }
    }
    function recordPassiveEffectDuration(fiber) {
      if (0 <= passiveEffectStartTime) {
        var elapsedTime = now$1() - passiveEffectStartTime;
        passiveEffectStartTime = -1;
        for (fiber = fiber.return; null !== fiber;) {
          switch(fiber.tag) {
            case 3:
              fiber = fiber.stateNode;
              null !== fiber && (fiber.passiveEffectDuration += elapsedTime);
              return;
            case 12:
              fiber = fiber.stateNode;
              null !== fiber && (fiber.passiveEffectDuration += elapsedTime);
              return;
          }
          fiber = fiber.return;
        }
      }
    }
    function startLayoutEffectTimer() {
      layoutEffectStartTime = now$1();
    }
    function transferActualDuration(fiber) {
      for (var child = fiber.child; child;) {
        fiber.actualDuration += child.actualDuration, child = child.sibling;
      }
    }
    function createCapturedValueAtFiber(value, source) {
      return {value, source, stack:getStackByFiberInDevAndProd(source), digest:null};
    }
    function createCapturedValue(value, digest, stack) {
      return {value, source:null, stack:null != stack ? stack : null, digest:null != digest ? digest : null};
    }
    function logCapturedError(boundary, errorInfo) {
      try {
        var error = errorInfo.value, source = errorInfo.source, stack = errorInfo.stack;
        errorInfo = null !== stack ? stack : "";
        if (null != error && error._suppressLogging) {
          if (1 === boundary.tag) {
            return;
          }
          console.error(error);
        }
        var componentName = source ? getComponentNameFromFiber(source) : null;
        error = componentName ? "The above error occurred in the \x3c" + componentName + "\x3e component:" : "The above error occurred in one of your React components:";
        var errorBoundaryMessage = 3 === boundary.tag ? "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries." : "React will try to recreate this component tree from scratch using the error boundary you provided, " + ((getComponentNameFromFiber(boundary) || "Anonymous") + ".");
        console.error(error + "\n" + errorInfo + "\n\n" + errorBoundaryMessage);
      } catch (e) {
        setTimeout(function() {
          throw e;
        });
      }
    }
    function createRootErrorUpdate(fiber, errorInfo, lane) {
      lane = createUpdate(-1, lane);
      lane.tag = 3;
      lane.payload = {element:null};
      var error = errorInfo.value;
      lane.callback = function() {
        hasUncaughtError || (hasUncaughtError = !0, firstUncaughtError = error);
        logCapturedError(fiber, errorInfo);
      };
      return lane;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
      lane = createUpdate(-1, lane);
      lane.tag = 3;
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
      if ("function" === typeof getDerivedStateFromError) {
        var error$1 = errorInfo.value;
        lane.payload = function() {
          return getDerivedStateFromError(error$1);
        };
        lane.callback = function() {
          markFailedErrorBoundaryForHotReloading(fiber);
          logCapturedError(fiber, errorInfo);
        };
      }
      var inst = fiber.stateNode;
      null !== inst && "function" === typeof inst.componentDidCatch && (lane.callback = function() {
        markFailedErrorBoundaryForHotReloading(fiber);
        logCapturedError(fiber, errorInfo);
        "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
        var stack = errorInfo.stack;
        this.componentDidCatch(errorInfo.value, {componentStack:null !== stack ? stack : ""});
        "function" !== typeof getDerivedStateFromError && 0 === (fiber.lanes & SyncLane) && error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
      });
      return lane;
    }
    function attachPingListener(root, wakeable, lanes) {
      var pingCache = root.pingCache;
      if (null === pingCache) {
        pingCache = root.pingCache = new PossiblyWeakMap$1();
        var threadIDs = new Set();
        pingCache.set(wakeable, threadIDs);
      } else {
        threadIDs = pingCache.get(wakeable), void 0 === threadIDs && (threadIDs = new Set(), pingCache.set(wakeable, threadIDs));
      }
      threadIDs.has(lanes) || (threadIDs.add(lanes), pingCache = pingSuspendedRoot.bind(null, root, wakeable, lanes), isDevToolsPresent && restorePendingUpdaters(root, lanes), wakeable.then(pingCache, pingCache));
    }
    function getNearestSuspenseBoundaryToCapture(returnFiber) {
      do {
        var JSCompiler_temp;
        if (JSCompiler_temp = 13 === returnFiber.tag) {
          JSCompiler_temp = returnFiber.memoizedState, JSCompiler_temp = null !== JSCompiler_temp ? null !== JSCompiler_temp.dehydrated ? !0 : !1 : !0;
        }
        if (JSCompiler_temp) {
          return returnFiber;
        }
        returnFiber = returnFiber.return;
      } while (null !== returnFiber);
      return null;
    }
    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
      if (0 === (suspenseBoundary.mode & 1)) {
        return suspenseBoundary === returnFiber ? suspenseBoundary.flags |= 65536 : (suspenseBoundary.flags |= 128, sourceFiber.flags |= 131072, sourceFiber.flags &= -52805, 1 === sourceFiber.tag && (null === sourceFiber.alternate ? sourceFiber.tag = 17 : (returnFiber = createUpdate(-1, SyncLane), returnFiber.tag = ForceUpdate, enqueueUpdate(sourceFiber, returnFiber, SyncLane))), sourceFiber.lanes |= SyncLane), suspenseBoundary;
      }
      suspenseBoundary.flags |= 65536;
      suspenseBoundary.lanes = rootRenderLanes;
      return suspenseBoundary;
    }
    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
      workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderLanes) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
    }
    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
      if (workInProgress.type !== workInProgress.elementType) {
        var innerPropTypes = Component.propTypes;
        innerPropTypes && checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
      }
      Component = Component.render;
      innerPropTypes = workInProgress.ref;
      prepareToReadContext(workInProgress, renderLanes);
      markComponentRenderStarted(workInProgress);
      ReactCurrentOwner$1.current = workInProgress;
      isRendering = !0;
      var nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, innerPropTypes, renderLanes);
      var hasId = checkDidRenderIdHook();
      if (workInProgress.mode & 8) {
        setIsStrictModeForDevtools(!0);
        try {
          nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, innerPropTypes, renderLanes), hasId = checkDidRenderIdHook();
        } finally {
          setIsStrictModeForDevtools(!1);
        }
      }
      isRendering = !1;
      markComponentRenderStopped();
      if (null !== current && !didReceiveUpdate) {
        return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      }
      isHydrating && hasId && pushMaterializedTreeId(workInProgress);
      workInProgress.flags |= 1;
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
      if (null === current) {
        var type = Component.type;
        if ("function" === typeof type && !shouldConstruct$1(type) && void 0 === type.defaultProps && null === Component.compare && void 0 === Component.defaultProps) {
          return Component = resolveFunctionForHotReloading(type), workInProgress.tag = 15, workInProgress.type = Component, validateFunctionComponentInDev(workInProgress, type), updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes);
        }
        (current = type.propTypes) && checkPropTypes(current, nextProps, "prop", getComponentNameFromType(type));
        nextProps = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
        nextProps.ref = workInProgress.ref;
        nextProps.return = workInProgress;
        return workInProgress.child = nextProps;
      }
      type = Component.type;
      var _innerPropTypes = type.propTypes;
      _innerPropTypes && checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
      type = current.child;
      if (0 === (current.lanes & renderLanes) && (_innerPropTypes = type.memoizedProps, Component = Component.compare, Component = null !== Component ? Component : shallowEqual, Component(_innerPropTypes, nextProps) && current.ref === workInProgress.ref)) {
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      }
      workInProgress.flags |= 1;
      nextProps = createWorkInProgress(type, nextProps);
      nextProps.ref = workInProgress.ref;
      nextProps.return = workInProgress;
      return workInProgress.child = nextProps;
    }
    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
      if (workInProgress.type !== workInProgress.elementType) {
        var outerMemoType = workInProgress.elementType;
        if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
          var lazyComponent = outerMemoType, payload = lazyComponent._payload;
          lazyComponent = lazyComponent._init;
          try {
            outerMemoType = lazyComponent(payload);
          } catch (x) {
            outerMemoType = null;
          }
          (payload = outerMemoType && outerMemoType.propTypes) && checkPropTypes(payload, nextProps, "prop", getComponentNameFromType(outerMemoType));
        }
      }
      if (null !== current && (outerMemoType = current.memoizedProps, shallowEqual(outerMemoType, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type)) {
        if (didReceiveUpdate = !1, workInProgress.pendingProps = nextProps = outerMemoType, 0 !== (current.lanes & renderLanes)) {
          0 !== (current.flags & 131072) && (didReceiveUpdate = !0);
        } else {
          return workInProgress.lanes = current.lanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
      }
      return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
    }
    function updateOffscreenComponent(current, workInProgress, renderLanes) {
      var nextProps = workInProgress.pendingProps, nextChildren = nextProps.children, prevState = null !== current ? current.memoizedState : null;
      if ("hidden" === nextProps.mode) {
        if (0 === (workInProgress.mode & 1)) {
          workInProgress.memoizedState = {baseLanes:0, cachePool:null, transitions:null}, pushRenderLanes(workInProgress, renderLanes);
        } else {
          if (0 === (renderLanes & OffscreenLane)) {
            return current = null !== prevState ? prevState.baseLanes | renderLanes : renderLanes, workInProgress.lanes = workInProgress.childLanes = OffscreenLane, workInProgress.memoizedState = {baseLanes:current, cachePool:null, transitions:null}, workInProgress.updateQueue = null, pushRenderLanes(workInProgress, current), null;
          }
          workInProgress.memoizedState = {baseLanes:0, cachePool:null, transitions:null};
          pushRenderLanes(workInProgress, null !== prevState ? prevState.baseLanes : renderLanes);
        }
      } else {
        null !== prevState ? (nextProps = prevState.baseLanes | renderLanes, workInProgress.memoizedState = null) : nextProps = renderLanes, pushRenderLanes(workInProgress, nextProps);
      }
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function markRef(current, workInProgress) {
      var ref = workInProgress.ref;
      if (null === current && null !== ref || null !== current && current.ref !== ref) {
        workInProgress.flags |= 512, workInProgress.flags |= 2097152;
      }
    }
    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
      if (workInProgress.type !== workInProgress.elementType) {
        var innerPropTypes = Component.propTypes;
        innerPropTypes && checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
      }
      innerPropTypes = isContextProvider(Component) ? previousContext : contextStackCursor.current;
      innerPropTypes = getMaskedContext(workInProgress, innerPropTypes);
      prepareToReadContext(workInProgress, renderLanes);
      markComponentRenderStarted(workInProgress);
      ReactCurrentOwner$1.current = workInProgress;
      isRendering = !0;
      var nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, innerPropTypes, renderLanes);
      var hasId = checkDidRenderIdHook();
      if (workInProgress.mode & 8) {
        setIsStrictModeForDevtools(!0);
        try {
          nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, innerPropTypes, renderLanes), hasId = checkDidRenderIdHook();
        } finally {
          setIsStrictModeForDevtools(!1);
        }
      }
      isRendering = !1;
      markComponentRenderStopped();
      if (null !== current && !didReceiveUpdate) {
        return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      }
      isHydrating && hasId && pushMaterializedTreeId(workInProgress);
      workInProgress.flags |= 1;
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
      switch(shouldErrorImpl(workInProgress)) {
        case !1:
          var _instance = workInProgress.stateNode, state = (new workInProgress.type(workInProgress.memoizedProps, _instance.context)).state;
          _instance.updater.enqueueSetState(_instance, state, null);
          break;
        case !0:
          workInProgress.flags |= 128, workInProgress.flags |= 65536, _instance = Error("Simulated error coming from DevTools"), state = renderLanes & -renderLanes, workInProgress.lanes |= state, _instance = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(_instance, workInProgress), state), enqueueCapturedUpdate(workInProgress, _instance);
      }
      workInProgress.type !== workInProgress.elementType && (_instance = Component.propTypes) && checkPropTypes(_instance, nextProps, "prop", getComponentNameFromType(Component));
      isContextProvider(Component) ? (_instance = !0, pushContextProvider(workInProgress)) : _instance = !1;
      prepareToReadContext(workInProgress, renderLanes);
      if (null === workInProgress.stateNode) {
        resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), constructClassInstance(workInProgress, Component, nextProps), mountClassInstance(workInProgress, Component, nextProps, renderLanes), state = !0;
      } else if (null === current) {
        state = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        state.props = oldProps;
        var oldContext = state.context, contextType = Component.contextType;
        "object" === typeof contextType && null !== contextType ? contextType = readContext(contextType) : (contextType = isContextProvider(Component) ? previousContext : contextStackCursor.current, contextType = getMaskedContext(workInProgress, contextType));
        var getDerivedStateFromProps = Component.getDerivedStateFromProps, hasNewLifecycles = "function" === typeof getDerivedStateFromProps || "function" === typeof state.getSnapshotBeforeUpdate;
        hasNewLifecycles || "function" !== typeof state.UNSAFE_componentWillReceiveProps && "function" !== typeof state.componentWillReceiveProps || (oldProps !== nextProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, state, nextProps, contextType);
        hasForceUpdate = !1;
        var oldState = workInProgress.memoizedState;
        state.state = oldState;
        processUpdateQueue(workInProgress, nextProps, state, renderLanes);
        oldContext = workInProgress.memoizedState;
        oldProps !== nextProps || oldState !== oldContext || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, oldContext, contextType)) ? (hasNewLifecycles || "function" !== typeof state.UNSAFE_componentWillMount && 
        "function" !== typeof state.componentWillMount || ("function" === typeof state.componentWillMount && state.componentWillMount(), "function" === typeof state.UNSAFE_componentWillMount && state.UNSAFE_componentWillMount()), "function" === typeof state.componentDidMount && (hasNewLifecycles = 4194308, 0 !== (workInProgress.mode & 16) && (hasNewLifecycles |= 16777216), workInProgress.flags |= hasNewLifecycles)) : ("function" === typeof state.componentDidMount && (hasNewLifecycles = 4194308, 0 !== 
        (workInProgress.mode & 16) && (hasNewLifecycles |= 16777216), workInProgress.flags |= hasNewLifecycles), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), state.props = nextProps, state.state = oldContext, state.context = contextType, state = oldProps) : ("function" === typeof state.componentDidMount && (state = 4194308, 0 !== (workInProgress.mode & 16) && (state |= 16777216), workInProgress.flags |= state), state = !1);
      } else {
        state = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        contextType = workInProgress.memoizedProps;
        oldProps = workInProgress.type === workInProgress.elementType ? contextType : resolveDefaultProps(workInProgress.type, contextType);
        state.props = oldProps;
        oldContext = workInProgress.pendingProps;
        oldState = state.context;
        hasNewLifecycles = Component.contextType;
        "object" === typeof hasNewLifecycles && null !== hasNewLifecycles ? hasNewLifecycles = readContext(hasNewLifecycles) : (hasNewLifecycles = isContextProvider(Component) ? previousContext : contextStackCursor.current, hasNewLifecycles = getMaskedContext(workInProgress, hasNewLifecycles));
        var getDerivedStateFromProps$jscomp$0 = Component.getDerivedStateFromProps;
        (getDerivedStateFromProps = "function" === typeof getDerivedStateFromProps$jscomp$0 || "function" === typeof state.getSnapshotBeforeUpdate) || "function" !== typeof state.UNSAFE_componentWillReceiveProps && "function" !== typeof state.componentWillReceiveProps || (contextType !== oldContext || oldState !== hasNewLifecycles) && callComponentWillReceiveProps(workInProgress, state, nextProps, hasNewLifecycles);
        hasForceUpdate = !1;
        oldState = workInProgress.memoizedState;
        state.state = oldState;
        processUpdateQueue(workInProgress, nextProps, state, renderLanes);
        var newState = workInProgress.memoizedState;
        contextType !== oldContext || oldState !== newState || didPerformWorkStackCursor.current || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps$jscomp$0 && (applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps$jscomp$0, nextProps), newState = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, oldProps, nextProps, oldState, newState, hasNewLifecycles) || !1) ? (getDerivedStateFromProps || 
        "function" !== typeof state.UNSAFE_componentWillUpdate && "function" !== typeof state.componentWillUpdate || ("function" === typeof state.componentWillUpdate && state.componentWillUpdate(nextProps, newState, hasNewLifecycles), "function" === typeof state.UNSAFE_componentWillUpdate && state.UNSAFE_componentWillUpdate(nextProps, newState, hasNewLifecycles)), "function" === typeof state.componentDidUpdate && (workInProgress.flags |= 4), "function" === typeof state.getSnapshotBeforeUpdate && 
        (workInProgress.flags |= 1024)) : ("function" !== typeof state.componentDidUpdate || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof state.getSnapshotBeforeUpdate || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = newState), state.props = nextProps, state.state = newState, state.context = 
        hasNewLifecycles, state = oldProps) : ("function" !== typeof state.componentDidUpdate || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), "function" !== typeof state.getSnapshotBeforeUpdate || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), state = !1);
      }
      current = finishClassComponent(current, workInProgress, Component, state, _instance, renderLanes);
      Component = workInProgress.stateNode;
      state && Component.props !== nextProps && (didWarnAboutReassigningProps || error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress) || "a component"), didWarnAboutReassigningProps = !0);
      return current;
    }
    function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
      markRef(current, workInProgress);
      var didCaptureError = 0 !== (workInProgress.flags & 128);
      if (!shouldUpdate && !didCaptureError) {
        return hasContext && invalidateContextProvider(workInProgress, Component, !1), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      }
      shouldUpdate = workInProgress.stateNode;
      ReactCurrentOwner$1.current = workInProgress;
      if (didCaptureError && "function" !== typeof Component.getDerivedStateFromError) {
        var nextChildren = null;
        profilerStartTime = -1;
      } else {
        markComponentRenderStarted(workInProgress);
        isRendering = !0;
        nextChildren = shouldUpdate.render();
        if (workInProgress.mode & 8) {
          setIsStrictModeForDevtools(!0);
          try {
            shouldUpdate.render();
          } finally {
            setIsStrictModeForDevtools(!1);
          }
        }
        isRendering = !1;
        markComponentRenderStopped();
      }
      workInProgress.flags |= 1;
      null !== current && didCaptureError ? (didCaptureError = nextChildren, workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes), workInProgress.child = reconcileChildFibers(workInProgress, null, didCaptureError, renderLanes)) : reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      workInProgress.memoizedState = shouldUpdate.state;
      hasContext && invalidateContextProvider(workInProgress, Component, !0);
      return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
      var root = workInProgress.stateNode;
      root.pendingContext ? pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject(workInProgress, root.context, !1);
      pushHostContainer(workInProgress, root.containerInfo);
    }
    function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {
      resetHydrationState();
      queueHydrationError(recoverableError);
      workInProgress.flags |= 256;
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      return workInProgress.child;
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
      Component && Component.childContextTypes && error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
      if (null !== workInProgress.ref) {
        var info = "", ownerName = getCurrentFiberOwnerNameInDevOrNull();
        ownerName && (info += "\n\nCheck the render method of `" + ownerName + "`.");
        ownerName = ownerName || "";
        (workInProgress = workInProgress._debugSource) && (ownerName = workInProgress.fileName + ":" + workInProgress.lineNumber);
        didWarnAboutFunctionRefs[ownerName] || (didWarnAboutFunctionRefs[ownerName] = !0, error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info));
      }
      "function" === typeof Component.getDerivedStateFromProps && (info = getComponentNameFromType(Component) || "Unknown", didWarnAboutGetDerivedStateOnFunctionComponent[info] || (error("%s: Function components do not support getDerivedStateFromProps.", info), didWarnAboutGetDerivedStateOnFunctionComponent[info] = !0));
      "object" === typeof Component.contextType && null !== Component.contextType && (Component = getComponentNameFromType(Component) || "Unknown", didWarnAboutContextTypeOnFunctionComponent[Component] || (error("%s: Function components do not support contextType.", Component), didWarnAboutContextTypeOnFunctionComponent[Component] = !0));
    }
    function mountSuspenseOffscreenState(renderLanes) {
      return {baseLanes:renderLanes, cachePool:null, transitions:null};
    }
    function updateSuspenseComponent(current, workInProgress, renderLanes) {
      var nextProps = workInProgress.pendingProps;
      shouldSuspendImpl(workInProgress) && (workInProgress.flags |= 128);
      var suspenseContext = suspenseStackCursor.current, showFallback = !1, didSuspend = 0 !== (workInProgress.flags & 128), JSCompiler_temp;
      (JSCompiler_temp = didSuspend) || (JSCompiler_temp = null !== current && null === current.memoizedState ? !1 : 0 !== (suspenseContext & ForceSuspenseFallback));
      if (JSCompiler_temp) {
        showFallback = !0, workInProgress.flags &= -129;
      } else {
        if (null === current || null !== current.memoizedState) {
          suspenseContext |= InvisibleParentSuspenseContext;
        }
      }
      suspenseContext &= SubtreeSuspenseContextMask;
      push(suspenseStackCursor, suspenseContext, workInProgress);
      if (null === current) {
        tryToClaimNextHydratableInstance(workInProgress);
        current = workInProgress.memoizedState;
        if (null !== current && (current = current.dehydrated, null !== current)) {
          return 0 === (workInProgress.mode & 1) ? (error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, \x3cApp /\x3e).render(element) or remove the Suspense components from the server rendered components."), workInProgress.lanes = SyncLane) : current.data === SUSPENSE_FALLBACK_START_DATA ? workInProgress.lanes = DefaultHydrationLane : workInProgress.lanes = OffscreenLane, null;
        }
        didSuspend = nextProps.children;
        current = nextProps.fallback;
        return showFallback ? (nextProps = workInProgress.mode, showFallback = workInProgress.child, didSuspend = {mode:"hidden", children:didSuspend}, 0 === (nextProps & 1) && null !== showFallback ? (showFallback.childLanes = 0, showFallback.pendingProps = didSuspend, workInProgress.mode & 2 && (showFallback.actualDuration = 0, showFallback.actualStartTime = -1, showFallback.selfBaseDuration = 0, showFallback.treeBaseDuration = 0)) : showFallback = createFiberFromOffscreen(didSuspend, nextProps, 
        0, null), current = createFiberFromFragment(current, nextProps, renderLanes, null), showFallback.return = workInProgress, current.return = workInProgress, showFallback.sibling = current, workInProgress.child = showFallback, workInProgress.child.memoizedState = mountSuspenseOffscreenState(renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, current) : mountSuspensePrimaryChildren(workInProgress, didSuspend);
      }
      suspenseContext = current.memoizedState;
      if (null !== suspenseContext && (JSCompiler_temp = suspenseContext.dehydrated, null !== JSCompiler_temp)) {
        return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, JSCompiler_temp, suspenseContext, renderLanes);
      }
      if (showFallback) {
        showFallback = nextProps.fallback;
        didSuspend = workInProgress.mode;
        suspenseContext = current.child;
        JSCompiler_temp = suspenseContext.sibling;
        var primaryChildProps = {mode:"hidden", children:nextProps.children};
        0 === (didSuspend & 1) && workInProgress.child !== suspenseContext ? (nextProps = workInProgress.child, nextProps.childLanes = 0, nextProps.pendingProps = primaryChildProps, workInProgress.mode & 2 && (nextProps.actualDuration = 0, nextProps.actualStartTime = -1, nextProps.selfBaseDuration = suspenseContext.selfBaseDuration, nextProps.treeBaseDuration = suspenseContext.treeBaseDuration), workInProgress.deletions = null) : (nextProps = createWorkInProgress(suspenseContext, primaryChildProps), 
        nextProps.subtreeFlags = suspenseContext.subtreeFlags & 14680064);
        null !== JSCompiler_temp ? showFallback = createWorkInProgress(JSCompiler_temp, showFallback) : (showFallback = createFiberFromFragment(showFallback, didSuspend, renderLanes, null), showFallback.flags |= 2);
        showFallback.return = workInProgress;
        nextProps.return = workInProgress;
        nextProps.sibling = showFallback;
        workInProgress.child = nextProps;
        nextProps = showFallback;
        showFallback = workInProgress.child;
        didSuspend = current.child.memoizedState;
        didSuspend = null === didSuspend ? mountSuspenseOffscreenState(renderLanes) : {baseLanes:didSuspend.baseLanes | renderLanes, cachePool:null, transitions:didSuspend.transitions};
        showFallback.memoizedState = didSuspend;
        showFallback.childLanes = current.childLanes & ~renderLanes;
        workInProgress.memoizedState = SUSPENDED_MARKER;
        return nextProps;
      }
      showFallback = current.child;
      current = showFallback.sibling;
      nextProps = createWorkInProgress(showFallback, {mode:"visible", children:nextProps.children});
      0 === (workInProgress.mode & 1) && (nextProps.lanes = renderLanes);
      nextProps.return = workInProgress;
      nextProps.sibling = null;
      null !== current && (renderLanes = workInProgress.deletions, null === renderLanes ? (workInProgress.deletions = [current], workInProgress.flags |= 16) : renderLanes.push(current));
      workInProgress.child = nextProps;
      workInProgress.memoizedState = null;
      return nextProps;
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
      primaryChildren = createFiberFromOffscreen({mode:"visible", children:primaryChildren}, workInProgress.mode, 0, null);
      primaryChildren.return = workInProgress;
      return workInProgress.child = primaryChildren;
    }
    function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
      null !== recoverableError && queueHydrationError(recoverableError);
      reconcileChildFibers(workInProgress, current.child, null, renderLanes);
      current = mountSuspensePrimaryChildren(workInProgress, workInProgress.pendingProps.children);
      current.flags |= 2;
      workInProgress.memoizedState = null;
      return current;
    }
    function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
      if (didSuspend) {
        if (workInProgress.flags & 256) {
          return workInProgress.flags &= -257, nextProps = createCapturedValue(Error("There was an error while hydrating this Suspense boundary. Switched to client rendering.")), retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, nextProps);
        }
        if (null !== workInProgress.memoizedState) {
          return workInProgress.child = current.child, workInProgress.flags |= 128, null;
        }
        suspenseState = nextProps.fallback;
        var fiberMode = workInProgress.mode;
        nextProps = createFiberFromOffscreen({mode:"visible", children:nextProps.children}, fiberMode, 0, null);
        suspenseState = createFiberFromFragment(suspenseState, fiberMode, renderLanes, null);
        suspenseState.flags |= 2;
        nextProps.return = workInProgress;
        suspenseState.return = workInProgress;
        nextProps.sibling = suspenseState;
        workInProgress.child = nextProps;
        0 !== (workInProgress.mode & 1) && reconcileChildFibers(workInProgress, current.child, null, renderLanes);
        workInProgress.child.memoizedState = mountSuspenseOffscreenState(renderLanes);
        workInProgress.memoizedState = SUSPENDED_MARKER;
        return suspenseState;
      }
      isHydrating && error("We should not be hydrating here. This is a bug in React. Please file a bug.");
      if (0 === (workInProgress.mode & 1)) {
        return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, null);
      }
      if (suspenseInstance.data === SUSPENSE_FALLBACK_START_DATA) {
        nextProps = suspenseInstance.nextSibling && suspenseInstance.nextSibling.dataset;
        if (nextProps) {
          fiberMode = nextProps.dgst;
          var message = nextProps.msg;
          var stack = nextProps.stck;
        }
        suspenseInstance = message;
        nextProps = fiberMode;
        suspenseState = stack;
        fiberMode = suspenseInstance;
        nextProps = createCapturedValue(fiberMode ? Error(fiberMode) : Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."), nextProps, suspenseState);
        return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, nextProps);
      }
      fiberMode = 0 !== (renderLanes & current.childLanes);
      if (didReceiveUpdate || fiberMode) {
        nextProps = workInProgressRoot;
        if (null !== nextProps) {
          switch(renderLanes & -renderLanes) {
            case InputContinuousLane:
              fiberMode = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              fiberMode = DefaultHydrationLane;
              break;
            case 64:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
            case 67108864:
              fiberMode = TransitionHydrationLane;
              break;
            case IdleLane:
              fiberMode = IdleHydrationLane;
              break;
            default:
              fiberMode = 0;
          }
          fiberMode = 0 !== (fiberMode & (nextProps.suspendedLanes | renderLanes)) ? 0 : fiberMode;
          0 !== fiberMode && fiberMode !== suspenseState.retryLane && (suspenseState.retryLane = fiberMode, markUpdateLaneFromFiberToRoot(current, fiberMode), scheduleUpdateOnFiber(nextProps, current, fiberMode, -1));
        }
        renderDidSuspendDelayIfPossible();
        nextProps = createCapturedValue(Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
        return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, nextProps);
      }
      if (suspenseInstance.data === SUSPENSE_PENDING_START_DATA) {
        return workInProgress.flags |= 128, workInProgress.child = current.child, workInProgress = retryDehydratedSuspenseBoundary.bind(null, current), suspenseInstance._reactRetry = workInProgress, null;
      }
      current = suspenseState.treeContext;
      nextHydratableInstance = getNextHydratable(suspenseInstance.nextSibling);
      hydrationParentFiber = workInProgress;
      isHydrating = !0;
      hydrationErrors = null;
      didSuspendOrErrorDEV = !1;
      null !== current && (warnIfNotHydrating(), idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextId = current.id, treeContextOverflow = current.overflow, treeContextProvider = workInProgress);
      workInProgress = mountSuspensePrimaryChildren(workInProgress, nextProps.children);
      workInProgress.flags |= 4096;
      return workInProgress;
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
      fiber.lanes |= renderLanes;
      var alternate = fiber.alternate;
      null !== alternate && (alternate.lanes |= renderLanes);
      scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
    }
    function validateSuspenseListNestedChild(childSlot, index) {
      var isAnArray = isArrayImpl(childSlot);
      childSlot = !isAnArray && "function" === typeof getIteratorFn(childSlot);
      return isAnArray || childSlot ? (isAnArray = isAnArray ? "array" : "iterable", error("A nested %s was passed to row #%s in \x3cSuspenseList /\x3e. Wrap it in an additional SuspenseList to configure its revealOrder: \x3cSuspenseList revealOrder\x3d...\x3e ... \x3cSuspenseList revealOrder\x3d...\x3e{%s}\x3c/SuspenseList\x3e ... \x3c/SuspenseList\x3e", isAnArray, index, isAnArray), !1) : !0;
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
      var renderState = workInProgress.memoizedState;
      null === renderState ? workInProgress.memoizedState = {isBackwards, rendering:null, renderingStartTime:0, last:lastContentRow, tail, tailMode} : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
    }
    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
      var nextProps = workInProgress.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail;
      nextProps = nextProps.children;
      if (void 0 !== revealOrder && "forwards" !== revealOrder && "backwards" !== revealOrder && "together" !== revealOrder && !didWarnAboutRevealOrder[revealOrder]) {
        if (didWarnAboutRevealOrder[revealOrder] = !0, "string" === typeof revealOrder) {
          switch(revealOrder.toLowerCase()) {
            case "together":
            case "forwards":
            case "backwards":
              error('"%s" is not a valid value for revealOrder on \x3cSuspenseList /\x3e. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
              break;
            case "forward":
            case "backward":
              error('"%s" is not a valid value for revealOrder on \x3cSuspenseList /\x3e. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
              break;
            default:
              error('"%s" is not a supported revealOrder on \x3cSuspenseList /\x3e. Did you mean "together", "forwards" or "backwards"?', revealOrder);
          }
        } else {
          error('%s is not a supported value for revealOrder on \x3cSuspenseList /\x3e. Did you mean "together", "forwards" or "backwards"?', revealOrder);
        }
      }
      void 0 === tailMode || didWarnAboutTailOptions[tailMode] || ("collapsed" !== tailMode && "hidden" !== tailMode ? (didWarnAboutTailOptions[tailMode] = !0, error('"%s" is not a supported value for tail on \x3cSuspenseList /\x3e. Did you mean "collapsed" or "hidden"?', tailMode)) : "forwards" !== revealOrder && "backwards" !== revealOrder && (didWarnAboutTailOptions[tailMode] = !0, error('\x3cSuspenseList tail\x3d"%s" /\x3e is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder\x3d"forwards"?', 
      tailMode)));
      a: {
        if (("forwards" === revealOrder || "backwards" === revealOrder) && void 0 !== nextProps && null !== nextProps && !1 !== nextProps) {
          if (isArrayImpl(nextProps)) {
            for (var i = 0; i < nextProps.length; i++) {
              if (!validateSuspenseListNestedChild(nextProps[i], i)) {
                break a;
              }
            }
          } else {
            if (i = getIteratorFn(nextProps), "function" === typeof i) {
              if (i = i.call(nextProps)) {
                for (var step = i.next(), _i = 0; !step.done; step = i.next()) {
                  if (!validateSuspenseListNestedChild(step.value, _i)) {
                    break a;
                  }
                  _i++;
                }
              }
            } else {
              error('A single row was passed to a \x3cSuspenseList revealOrder\x3d"%s" /\x3e. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
            }
          }
        }
      }
      reconcileChildren(current, workInProgress, nextProps, renderLanes);
      nextProps = suspenseStackCursor.current;
      if (0 !== (nextProps & ForceSuspenseFallback)) {
        nextProps = nextProps & SubtreeSuspenseContextMask | ForceSuspenseFallback, workInProgress.flags |= 128;
      } else {
        if (null !== current && 0 !== (current.flags & 128)) {
          a: {
            for (current = workInProgress.child; null !== current;) {
              if (13 === current.tag) {
                null !== current.memoizedState && scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
              } else if (19 === current.tag) {
                scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
              } else if (null !== current.child) {
                current.child.return = current;
                current = current.child;
                continue;
              }
              if (current === workInProgress) {
                break a;
              }
              for (; null === current.sibling;) {
                if (null === current.return || current.return === workInProgress) {
                  break a;
                }
                current = current.return;
              }
              current.sibling.return = current.return;
              current = current.sibling;
            }
          }
        }
        nextProps &= SubtreeSuspenseContextMask;
      }
      push(suspenseStackCursor, nextProps, workInProgress);
      if (0 === (workInProgress.mode & 1)) {
        workInProgress.memoizedState = null;
      } else {
        switch(revealOrder) {
          case "forwards":
            renderLanes = workInProgress.child;
            for (revealOrder = null; null !== renderLanes;) {
              current = renderLanes.alternate, null !== current && null === findFirstSuspended(current) && (revealOrder = renderLanes), renderLanes = renderLanes.sibling;
            }
            renderLanes = revealOrder;
            null === renderLanes ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderLanes.sibling, renderLanes.sibling = null);
            initSuspenseListRenderState(workInProgress, !1, revealOrder, renderLanes, tailMode);
            break;
          case "backwards":
            renderLanes = null;
            revealOrder = workInProgress.child;
            for (workInProgress.child = null; null !== revealOrder;) {
              current = revealOrder.alternate;
              if (null !== current && null === findFirstSuspended(current)) {
                workInProgress.child = revealOrder;
                break;
              }
              current = revealOrder.sibling;
              revealOrder.sibling = renderLanes;
              renderLanes = revealOrder;
              revealOrder = current;
            }
            initSuspenseListRenderState(workInProgress, !0, renderLanes, null, tailMode);
            break;
          case "together":
            initSuspenseListRenderState(workInProgress, !1, null, null, void 0);
            break;
          default:
            workInProgress.memoizedState = null;
        }
      }
      return workInProgress.child;
    }
    function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
      0 === (workInProgress.mode & 1) && null !== current && (current.alternate = null, workInProgress.alternate = null, workInProgress.flags |= 2);
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
      null !== current && (workInProgress.dependencies = current.dependencies);
      profilerStartTime = -1;
      workInProgressRootSkippedLanes |= workInProgress.lanes;
      if (0 === (renderLanes & workInProgress.childLanes)) {
        return null;
      }
      if (null !== current && workInProgress.child !== current.child) {
        throw Error("Resuming work not yet implemented.");
      }
      if (null !== workInProgress.child) {
        current = workInProgress.child;
        renderLanes = createWorkInProgress(current, current.pendingProps);
        workInProgress.child = renderLanes;
        for (renderLanes.return = workInProgress; null !== current.sibling;) {
          current = current.sibling, renderLanes = renderLanes.sibling = createWorkInProgress(current, current.pendingProps), renderLanes.return = workInProgress;
        }
        renderLanes.sibling = null;
      }
      return workInProgress.child;
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
      switch(workInProgress.tag) {
        case 3:
          pushHostRootContext(workInProgress);
          resetHydrationState();
          break;
        case 5:
          pushHostContext(workInProgress);
          break;
        case 1:
          isContextProvider(workInProgress.type) && pushContextProvider(workInProgress);
          break;
        case 4:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          break;
        case 10:
          pushProvider(workInProgress, workInProgress.type._context, workInProgress.memoizedProps.value);
          break;
        case 12:
          0 !== (renderLanes & workInProgress.childLanes) && (workInProgress.flags |= 4);
          var stateNode = workInProgress.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
          break;
        case 13:
          stateNode = workInProgress.memoizedState;
          if (null !== stateNode) {
            if (null !== stateNode.dehydrated) {
              return push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask, workInProgress), workInProgress.flags |= 128, null;
            }
            if (0 !== (renderLanes & workInProgress.child.childLanes)) {
              return updateSuspenseComponent(current, workInProgress, renderLanes);
            }
            push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask, workInProgress);
            current = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            return null !== current ? current.sibling : null;
          }
          push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask, workInProgress);
          break;
        case 19:
          stateNode = 0 !== (renderLanes & workInProgress.childLanes);
          if (0 !== (current.flags & 128)) {
            if (stateNode) {
              return updateSuspenseListComponent(current, workInProgress, renderLanes);
            }
            workInProgress.flags |= 128;
          }
          var renderState = workInProgress.memoizedState;
          null !== renderState && (renderState.rendering = null, renderState.tail = null, renderState.lastEffect = null);
          push(suspenseStackCursor, suspenseStackCursor.current, workInProgress);
          if (stateNode) {
            break;
          } else {
            return null;
          }
        case 22:
        case 23:
          return workInProgress.lanes = 0, updateOffscreenComponent(current, workInProgress, renderLanes);
      }
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    function beginWork(current, workInProgress, renderLanes) {
      if (workInProgress._debugNeedsRemount && null !== current) {
        renderLanes = createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes);
        var returnFiber = workInProgress.return;
        if (null === returnFiber) {
          throw Error("Cannot swap the root fiber.");
        }
        current.alternate = null;
        workInProgress.alternate = null;
        renderLanes.index = workInProgress.index;
        renderLanes.sibling = workInProgress.sibling;
        renderLanes.return = workInProgress.return;
        renderLanes.ref = workInProgress.ref;
        if (workInProgress === returnFiber.child) {
          returnFiber.child = renderLanes;
        } else {
          var prevSibling = returnFiber.child;
          if (null === prevSibling) {
            throw Error("Expected parent to have a child.");
          }
          for (; prevSibling.sibling !== workInProgress;) {
            if (prevSibling = prevSibling.sibling, null === prevSibling) {
              throw Error("Expected to find the previous sibling.");
            }
          }
          prevSibling.sibling = renderLanes;
        }
        workInProgress = returnFiber.deletions;
        null === workInProgress ? (returnFiber.deletions = [current], returnFiber.flags |= 16) : workInProgress.push(current);
        renderLanes.flags |= 2;
        return renderLanes;
      }
      if (null !== current) {
        if (current.memoizedProps !== workInProgress.pendingProps || didPerformWorkStackCursor.current || workInProgress.type !== current.type) {
          didReceiveUpdate = !0;
        } else {
          if (0 === (current.lanes & renderLanes) && 0 === (workInProgress.flags & 128)) {
            return didReceiveUpdate = !1, attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
          }
          didReceiveUpdate = 0 !== (current.flags & 131072) ? !0 : !1;
        }
      } else {
        didReceiveUpdate = !1;
        if (returnFiber = isHydrating) {
          warnIfNotHydrating(), returnFiber = 0 !== (workInProgress.flags & 1048576);
        }
        returnFiber && (returnFiber = workInProgress.index, warnIfNotHydrating(), pushTreeId(workInProgress, treeForkCount, returnFiber));
      }
      workInProgress.lanes = 0;
      switch(workInProgress.tag) {
        case 2:
          returnFiber = workInProgress.type;
          resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
          current = workInProgress.pendingProps;
          var context = getMaskedContext(workInProgress, contextStackCursor.current);
          prepareToReadContext(workInProgress, renderLanes);
          markComponentRenderStarted(workInProgress);
          returnFiber.prototype && "function" === typeof returnFiber.prototype.render && (prevSibling = getComponentNameFromType(returnFiber) || "Unknown", didWarnAboutBadClass[prevSibling] || (error("The \x3c%s /\x3e component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", prevSibling, prevSibling), didWarnAboutBadClass[prevSibling] = !0));
          workInProgress.mode & 8 && ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
          isRendering = !0;
          ReactCurrentOwner$1.current = workInProgress;
          prevSibling = renderWithHooks(null, workInProgress, returnFiber, current, context, renderLanes);
          var hasId = checkDidRenderIdHook();
          isRendering = !1;
          markComponentRenderStopped();
          workInProgress.flags |= 1;
          if ("object" === typeof prevSibling && null !== prevSibling && "function" === typeof prevSibling.render && void 0 === prevSibling.$$typeof) {
            var _componentName = getComponentNameFromType(returnFiber) || "Unknown";
            didWarnAboutModulePatternComponent[_componentName] || (error("The \x3c%s /\x3e component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype \x3d React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName), didWarnAboutModulePatternComponent[_componentName] = 
            !0);
          }
          if ("object" === typeof prevSibling && null !== prevSibling && "function" === typeof prevSibling.render && void 0 === prevSibling.$$typeof) {
            context = getComponentNameFromType(returnFiber) || "Unknown", didWarnAboutModulePatternComponent[context] || (error("The \x3c%s /\x3e component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype \x3d React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", context, context, 
            context), didWarnAboutModulePatternComponent[context] = !0), workInProgress.tag = 1, workInProgress.memoizedState = null, workInProgress.updateQueue = null, isContextProvider(returnFiber) ? (context = !0, pushContextProvider(workInProgress)) : context = !1, workInProgress.memoizedState = null !== prevSibling.state && void 0 !== prevSibling.state ? prevSibling.state : null, initializeUpdateQueue(workInProgress), prevSibling.updater = classComponentUpdater, workInProgress.stateNode = prevSibling, 
            prevSibling._reactInternals = workInProgress, prevSibling._reactInternalInstance = fakeInternalInstance, mountClassInstance(workInProgress, returnFiber, current, renderLanes), workInProgress = finishClassComponent(null, workInProgress, returnFiber, !0, context, renderLanes);
          } else {
            workInProgress.tag = 0;
            if (workInProgress.mode & 8) {
              setIsStrictModeForDevtools(!0);
              try {
                prevSibling = renderWithHooks(null, workInProgress, returnFiber, current, context, renderLanes), hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(!1);
              }
            }
            isHydrating && hasId && pushMaterializedTreeId(workInProgress);
            reconcileChildren(null, workInProgress, prevSibling, renderLanes);
            validateFunctionComponentInDev(workInProgress, returnFiber);
            workInProgress = workInProgress.child;
          }
          return workInProgress;
        case 16:
          a: {
            prevSibling = workInProgress.elementType;
            resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
            returnFiber = workInProgress.pendingProps;
            current = prevSibling._init;
            current = current(prevSibling._payload);
            workInProgress.type = current;
            prevSibling = workInProgress.tag = resolveLazyComponentTag(current);
            returnFiber = resolveDefaultProps(current, returnFiber);
            switch(prevSibling) {
              case 0:
                validateFunctionComponentInDev(workInProgress, current);
                workInProgress.type = current = resolveFunctionForHotReloading(current);
                workInProgress = updateFunctionComponent(null, workInProgress, current, returnFiber, renderLanes);
                break a;
              case 1:
                workInProgress.type = current = resolveFunctionForHotReloading(current);
                workInProgress = updateClassComponent(null, workInProgress, current, returnFiber, renderLanes);
                break a;
              case 11:
                workInProgress.type = current = resolveForwardRefForHotReloading(current);
                workInProgress = updateForwardRef(null, workInProgress, current, returnFiber, renderLanes);
                break a;
              case 14:
                workInProgress.type !== workInProgress.elementType && (prevSibling = current.propTypes) && checkPropTypes(prevSibling, returnFiber, "prop", getComponentNameFromType(current));
                workInProgress = updateMemoComponent(null, workInProgress, current, resolveDefaultProps(current.type, returnFiber), renderLanes);
                break a;
            }
            workInProgress = "";
            null !== current && "object" === typeof current && current.$$typeof === REACT_LAZY_TYPE && (workInProgress = " Did you wrap a component in React.lazy() more than once?");
            throw Error("Element type is invalid. Received a promise that resolves to: " + current + ". Lazy element type must resolve to a class or function." + workInProgress);
          }
          return workInProgress;
        case 0:
          return returnFiber = workInProgress.type, prevSibling = workInProgress.pendingProps, prevSibling = workInProgress.elementType === returnFiber ? prevSibling : resolveDefaultProps(returnFiber, prevSibling), updateFunctionComponent(current, workInProgress, returnFiber, prevSibling, renderLanes);
        case 1:
          return returnFiber = workInProgress.type, prevSibling = workInProgress.pendingProps, prevSibling = workInProgress.elementType === returnFiber ? prevSibling : resolveDefaultProps(returnFiber, prevSibling), updateClassComponent(current, workInProgress, returnFiber, prevSibling, renderLanes);
        case 3:
          a: {
            pushHostRootContext(workInProgress);
            if (null === current) {
              throw Error("Should have a current fiber. This is a bug in React.");
            }
            returnFiber = workInProgress.pendingProps;
            context = workInProgress.memoizedState;
            prevSibling = context.element;
            cloneUpdateQueue(current, workInProgress);
            processUpdateQueue(workInProgress, returnFiber, null, renderLanes);
            hasId = workInProgress.memoizedState;
            returnFiber = hasId.element;
            if (context.isDehydrated) {
              if (context = {element:returnFiber, isDehydrated:!1, cache:hasId.cache, pendingSuspenseBoundaries:hasId.pendingSuspenseBoundaries, transitions:hasId.transitions}, workInProgress.updateQueue.baseState = context, workInProgress.memoizedState = context, workInProgress.flags & 256) {
                prevSibling = createCapturedValueAtFiber(Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress);
                workInProgress = mountHostRootWithoutHydrating(current, workInProgress, returnFiber, renderLanes, prevSibling);
                break a;
              } else if (returnFiber !== prevSibling) {
                prevSibling = createCapturedValueAtFiber(Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress);
                workInProgress = mountHostRootWithoutHydrating(current, workInProgress, returnFiber, renderLanes, prevSibling);
                break a;
              } else {
                for (nextHydratableInstance = getNextHydratable(workInProgress.stateNode.containerInfo.firstChild), hydrationParentFiber = workInProgress, isHydrating = !0, hydrationErrors = null, didSuspendOrErrorDEV = !1, renderLanes = mountChildFibers(workInProgress, null, returnFiber, renderLanes), workInProgress.child = renderLanes; renderLanes;) {
                  renderLanes.flags = renderLanes.flags & -3 | 4096, renderLanes = renderLanes.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (returnFiber === prevSibling) {
                workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                break a;
              }
              reconcileChildren(current, workInProgress, returnFiber, renderLanes);
            }
            workInProgress = workInProgress.child;
          }
          return workInProgress;
        case 5:
          return pushHostContext(workInProgress), null === current && tryToClaimNextHydratableInstance(workInProgress), returnFiber = workInProgress.type, prevSibling = workInProgress.pendingProps, context = null !== current ? current.memoizedProps : null, hasId = prevSibling.children, shouldSetTextContent(returnFiber, prevSibling) ? hasId = null : null !== context && shouldSetTextContent(returnFiber, context) && (workInProgress.flags |= 32), markRef(current, workInProgress), reconcileChildren(current, 
          workInProgress, hasId, renderLanes), workInProgress.child;
        case 6:
          return null === current && tryToClaimNextHydratableInstance(workInProgress), null;
        case 13:
          return updateSuspenseComponent(current, workInProgress, renderLanes);
        case 4:
          return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), returnFiber = workInProgress.pendingProps, null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, returnFiber, renderLanes) : reconcileChildren(current, workInProgress, returnFiber, renderLanes), workInProgress.child;
        case 11:
          return returnFiber = workInProgress.type, prevSibling = workInProgress.pendingProps, prevSibling = workInProgress.elementType === returnFiber ? prevSibling : resolveDefaultProps(returnFiber, prevSibling), updateForwardRef(current, workInProgress, returnFiber, prevSibling, renderLanes);
        case 7:
          return reconcileChildren(current, workInProgress, workInProgress.pendingProps, renderLanes), workInProgress.child;
        case 8:
          return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
        case 12:
          return workInProgress.flags |= 4, returnFiber = workInProgress.stateNode, returnFiber.effectDuration = 0, returnFiber.passiveEffectDuration = 0, reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
        case 10:
          a: {
            returnFiber = workInProgress.type._context;
            prevSibling = workInProgress.pendingProps;
            context = workInProgress.memoizedProps;
            hasId = prevSibling.value;
            "value" in prevSibling || hasWarnedAboutUsingNoValuePropOnContextProvider || (hasWarnedAboutUsingNoValuePropOnContextProvider = !0, error("The `value` prop is required for the `\x3cContext.Provider\x3e`. Did you misspell it or forget to pass it?"));
            (_componentName = workInProgress.type.propTypes) && checkPropTypes(_componentName, prevSibling, "prop", "Context.Provider");
            pushProvider(workInProgress, returnFiber, hasId);
            if (null !== context) {
              if (objectIs(context.value, hasId)) {
                if (context.children === prevSibling.children && !didPerformWorkStackCursor.current) {
                  workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                  break a;
                }
              } else {
                for (context = workInProgress.child, null !== context && (context.return = workInProgress); null !== context;) {
                  _componentName = context.dependencies;
                  if (null !== _componentName) {
                    hasId = context.child;
                    for (var dependency = _componentName.firstContext; null !== dependency;) {
                      if (dependency.context === returnFiber) {
                        if (1 === context.tag) {
                          dependency = createUpdate(-1, renderLanes & -renderLanes);
                          dependency.tag = ForceUpdate;
                          var updateQueue = context.updateQueue;
                          if (null !== updateQueue) {
                            updateQueue = updateQueue.shared;
                            var pending = updateQueue.pending;
                            null === pending ? dependency.next = dependency : (dependency.next = pending.next, pending.next = dependency);
                            updateQueue.pending = dependency;
                          }
                        }
                        context.lanes |= renderLanes;
                        dependency = context.alternate;
                        null !== dependency && (dependency.lanes |= renderLanes);
                        scheduleContextWorkOnParentPath(context.return, renderLanes, workInProgress);
                        _componentName.lanes |= renderLanes;
                        break;
                      }
                      dependency = dependency.next;
                    }
                  } else if (10 === context.tag) {
                    hasId = context.type === workInProgress.type ? null : context.child;
                  } else if (18 === context.tag) {
                    hasId = context.return;
                    if (null === hasId) {
                      throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                    }
                    hasId.lanes |= renderLanes;
                    _componentName = hasId.alternate;
                    null !== _componentName && (_componentName.lanes |= renderLanes);
                    scheduleContextWorkOnParentPath(hasId, renderLanes, workInProgress);
                    hasId = context.sibling;
                  } else {
                    hasId = context.child;
                  }
                  if (null !== hasId) {
                    hasId.return = context;
                  } else {
                    for (hasId = context; null !== hasId;) {
                      if (hasId === workInProgress) {
                        hasId = null;
                        break;
                      }
                      context = hasId.sibling;
                      if (null !== context) {
                        context.return = hasId.return;
                        hasId = context;
                        break;
                      }
                      hasId = hasId.return;
                    }
                  }
                  context = hasId;
                }
              }
            }
            reconcileChildren(current, workInProgress, prevSibling.children, renderLanes);
            workInProgress = workInProgress.child;
          }
          return workInProgress;
        case 9:
          return prevSibling = workInProgress.type, void 0 === prevSibling._context ? prevSibling === prevSibling.Consumer || hasWarnedAboutUsingContextAsConsumer || (hasWarnedAboutUsingContextAsConsumer = !0, error("Rendering \x3cContext\x3e directly is not supported and will be removed in a future major release. Did you mean to render \x3cContext.Consumer\x3e instead?")) : prevSibling = prevSibling._context, returnFiber = workInProgress.pendingProps.children, "function" !== typeof returnFiber && 
          error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."), prepareToReadContext(workInProgress, renderLanes), prevSibling = readContext(prevSibling), markComponentRenderStarted(workInProgress), ReactCurrentOwner$1.current = workInProgress, isRendering = !0, returnFiber = returnFiber(prevSibling), 
          isRendering = !1, markComponentRenderStopped(), workInProgress.flags |= 1, reconcileChildren(current, workInProgress, returnFiber, renderLanes), workInProgress.child;
        case 14:
          return returnFiber = workInProgress.type, prevSibling = resolveDefaultProps(returnFiber, workInProgress.pendingProps), workInProgress.type !== workInProgress.elementType && (context = returnFiber.propTypes) && checkPropTypes(context, prevSibling, "prop", getComponentNameFromType(returnFiber)), prevSibling = resolveDefaultProps(returnFiber.type, prevSibling), updateMemoComponent(current, workInProgress, returnFiber, prevSibling, renderLanes);
        case 15:
          return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
        case 17:
          return returnFiber = workInProgress.type, prevSibling = workInProgress.pendingProps, prevSibling = workInProgress.elementType === returnFiber ? prevSibling : resolveDefaultProps(returnFiber, prevSibling), resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress), workInProgress.tag = 1, isContextProvider(returnFiber) ? (current = !0, pushContextProvider(workInProgress)) : current = !1, prepareToReadContext(workInProgress, renderLanes), constructClassInstance(workInProgress, returnFiber, 
          prevSibling), mountClassInstance(workInProgress, returnFiber, prevSibling, renderLanes), finishClassComponent(null, workInProgress, returnFiber, !0, current, renderLanes);
        case 19:
          return updateSuspenseListComponent(current, workInProgress, renderLanes);
        case 22:
          return updateOffscreenComponent(current, workInProgress, renderLanes);
      }
      throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
      if (!isHydrating) {
        switch(renderState.tailMode) {
          case "hidden":
            hasRenderedATailFallback = renderState.tail;
            for (var lastTailNode = null; null !== hasRenderedATailFallback;) {
              null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
            }
            null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
            break;
          case "collapsed":
            lastTailNode = renderState.tail;
            for (var _lastTailNode = null; null !== lastTailNode;) {
              null !== lastTailNode.alternate && (_lastTailNode = lastTailNode), lastTailNode = lastTailNode.sibling;
            }
            null === _lastTailNode ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : _lastTailNode.sibling = null;
        }
      }
    }
    function bubbleProperties(completedWork) {
      var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child, newChildLanes = 0, subtreeFlags = 0;
      if (didBailout) {
        if (0 !== (completedWork.mode & 2)) {
          for (var _treeBaseDuration = completedWork.selfBaseDuration, _child2 = completedWork.child; null !== _child2;) {
            newChildLanes |= _child2.lanes | _child2.childLanes, subtreeFlags |= _child2.subtreeFlags & 14680064, subtreeFlags |= _child2.flags & 14680064, _treeBaseDuration += _child2.treeBaseDuration, _child2 = _child2.sibling;
          }
          completedWork.treeBaseDuration = _treeBaseDuration;
        } else {
          for (_treeBaseDuration = completedWork.child; null !== _treeBaseDuration;) {
            newChildLanes |= _treeBaseDuration.lanes | _treeBaseDuration.childLanes, subtreeFlags |= _treeBaseDuration.subtreeFlags & 14680064, subtreeFlags |= _treeBaseDuration.flags & 14680064, _treeBaseDuration.return = completedWork, _treeBaseDuration = _treeBaseDuration.sibling;
          }
        }
      } else {
        if (0 !== (completedWork.mode & 2)) {
          _treeBaseDuration = completedWork.actualDuration;
          _child2 = completedWork.selfBaseDuration;
          for (var child = completedWork.child; null !== child;) {
            newChildLanes |= child.lanes | child.childLanes, subtreeFlags |= child.subtreeFlags, subtreeFlags |= child.flags, _treeBaseDuration += child.actualDuration, _child2 += child.treeBaseDuration, child = child.sibling;
          }
          completedWork.actualDuration = _treeBaseDuration;
          completedWork.treeBaseDuration = _child2;
        } else {
          for (_treeBaseDuration = completedWork.child; null !== _treeBaseDuration;) {
            newChildLanes |= _treeBaseDuration.lanes | _treeBaseDuration.childLanes, subtreeFlags |= _treeBaseDuration.subtreeFlags, subtreeFlags |= _treeBaseDuration.flags, _treeBaseDuration.return = completedWork, _treeBaseDuration = _treeBaseDuration.sibling;
          }
        }
      }
      completedWork.subtreeFlags |= subtreeFlags;
      completedWork.childLanes = newChildLanes;
      return didBailout;
    }
    function completeWork(current, workInProgress, renderLanes) {
      var newProps = workInProgress.pendingProps;
      popTreeContext(workInProgress);
      switch(workInProgress.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return bubbleProperties(workInProgress), null;
        case 1:
          return isContextProvider(workInProgress.type) && popContext(workInProgress), bubbleProperties(workInProgress), null;
        case 3:
          var fiberRoot = workInProgress.stateNode;
          popHostContainer(workInProgress);
          popTopLevelContextObject(workInProgress);
          resetWorkInProgressVersions();
          fiberRoot.pendingContext && (fiberRoot.context = fiberRoot.pendingContext, fiberRoot.pendingContext = null);
          if (null === current || null === current.child) {
            popHydrationState(workInProgress) ? workInProgress.flags |= 4 : null === current || current.memoizedState.isDehydrated && 0 === (workInProgress.flags & 256) || (workInProgress.flags |= 1024, null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null));
          }
          updateHostContainer(current, workInProgress);
          bubbleProperties(workInProgress);
          return null;
        case 5:
          popHostContext(workInProgress);
          var rootContainerInstance = requiredContext(rootInstanceStackCursor.current);
          renderLanes = workInProgress.type;
          if (null !== current && null != workInProgress.stateNode) {
            updateHostComponent$1(current, workInProgress, renderLanes, newProps, rootContainerInstance), current.ref !== workInProgress.ref && (workInProgress.flags |= 512, workInProgress.flags |= 2097152);
          } else {
            if (!newProps) {
              if (null === workInProgress.stateNode) {
                throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              }
              bubbleProperties(workInProgress);
              return null;
            }
            var currentHostContext = requiredContext(contextStackCursor$1.current);
            if (popHydrationState(workInProgress)) {
              newProps = workInProgress.stateNode;
              renderLanes = workInProgress.type;
              var props = workInProgress.memoizedProps;
              current = !didSuspendOrErrorDEV;
              newProps[internalInstanceKey] = workInProgress;
              newProps[internalPropsKey] = props;
              var parentNamespace = currentHostContext.namespace;
              currentHostContext = 0 !== (workInProgress.mode & 1);
              var extraAttributeNames;
              rootContainerInstance = isCustomComponent(renderLanes, props);
              validatePropertiesInDevelopment(renderLanes, props);
              switch(renderLanes) {
                case "dialog":
                  listenToNonDelegatedEvent("cancel", newProps);
                  listenToNonDelegatedEvent("close", newProps);
                  break;
                case "iframe":
                case "object":
                case "embed":
                  listenToNonDelegatedEvent("load", newProps);
                  break;
                case "video":
                case "audio":
                  for (extraAttributeNames = 0; extraAttributeNames < mediaEventTypes.length; extraAttributeNames++) {
                    listenToNonDelegatedEvent(mediaEventTypes[extraAttributeNames], newProps);
                  }
                  break;
                case "source":
                  listenToNonDelegatedEvent("error", newProps);
                  break;
                case "img":
                case "image":
                case "link":
                  listenToNonDelegatedEvent("error", newProps);
                  listenToNonDelegatedEvent("load", newProps);
                  break;
                case "details":
                  listenToNonDelegatedEvent("toggle", newProps);
                  break;
                case "input":
                  initWrapperState(newProps, props);
                  listenToNonDelegatedEvent("invalid", newProps);
                  break;
                case "option":
                  validateProps(newProps, props);
                  break;
                case "select":
                  initWrapperState$1(newProps, props);
                  listenToNonDelegatedEvent("invalid", newProps);
                  break;
                case "textarea":
                  initWrapperState$2(newProps, props), listenToNonDelegatedEvent("invalid", newProps);
              }
              assertValidProps(renderLanes, props);
              extraAttributeNames = new Set();
              for (var attributes = newProps.attributes, _i = 0; _i < attributes.length; _i++) {
                switch(attributes[_i].name.toLowerCase()) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
              attributes = null;
              for (fiberRoot in props) {
                if (props.hasOwnProperty(fiberRoot)) {
                  if (_i = props[fiberRoot], "children" === fiberRoot) {
                    "string" === typeof _i ? newProps.textContent !== _i && (!0 !== props.suppressHydrationWarning && checkForUnmatchedText(newProps.textContent, _i, currentHostContext, current), attributes = ["children", _i]) : "number" === typeof _i && newProps.textContent !== "" + _i && (!0 !== props.suppressHydrationWarning && checkForUnmatchedText(newProps.textContent, _i, currentHostContext, current), attributes = ["children", "" + _i]);
                  } else if (registrationNameDependencies.hasOwnProperty(fiberRoot)) {
                    null != _i && ("function" !== typeof _i && warnForInvalidEventListener(fiberRoot, _i), "onScroll" === fiberRoot && listenToNonDelegatedEvent("scroll", newProps));
                  } else if (current && "boolean" === typeof rootContainerInstance) {
                    var serverValue, propertyInfo = getPropertyInfo(fiberRoot);
                    if (!0 !== props.suppressHydrationWarning && "suppressContentEditableWarning" !== fiberRoot && "suppressHydrationWarning" !== fiberRoot && "value" !== fiberRoot && "checked" !== fiberRoot && "selected" !== fiberRoot) {
                      if ("dangerouslySetInnerHTML" === fiberRoot) {
                        var serverHTML = newProps.innerHTML;
                        _i = _i ? _i.__html : void 0;
                        null != _i && (_i = normalizeHTML(newProps, _i), _i !== serverHTML && warnForPropDifference(fiberRoot, serverHTML, _i));
                      } else if ("style" === fiberRoot) {
                        if (extraAttributeNames.delete(fiberRoot), canDiffStyleForHydrationWarning) {
                          serverHTML = void 0;
                          var delimiter = serverValue = "";
                          for (serverHTML in _i) {
                            if (_i.hasOwnProperty(serverHTML)) {
                              var styleValue = _i[serverHTML];
                              null != styleValue && (propertyInfo = 0 === serverHTML.indexOf("--"), serverValue += delimiter + (propertyInfo ? serverHTML : serverHTML.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-")) + ":", serverValue += dangerousStyleValue(serverHTML, styleValue, propertyInfo), delimiter = ";");
                            }
                          }
                          _i = serverValue || null;
                          serverValue = newProps.getAttribute("style");
                          _i !== serverValue && warnForPropDifference(fiberRoot, serverValue, _i);
                        }
                      } else if (rootContainerInstance) {
                        extraAttributeNames.delete(fiberRoot.toLowerCase()), serverValue = getValueForAttribute(newProps, fiberRoot, _i), _i !== serverValue && warnForPropDifference(fiberRoot, serverValue, _i);
                      } else if (!shouldIgnoreAttribute(fiberRoot, propertyInfo, rootContainerInstance) && !shouldRemoveAttribute(fiberRoot, _i, propertyInfo, rootContainerInstance)) {
                        serverHTML = !1;
                        if (null !== propertyInfo) {
                          b: {
                            if (extraAttributeNames.delete(propertyInfo.attributeName), styleValue = newProps, serverValue = fiberRoot, delimiter = _i, propertyInfo.mustUseProperty) {
                              serverValue = styleValue[propertyInfo.propertyName];
                            } else {
                              propertyInfo.sanitizeURL && sanitizeURL("" + delimiter);
                              var attributeName = propertyInfo.attributeName, stringValue = null;
                              if (4 === propertyInfo.type) {
                                if (styleValue.hasAttribute(attributeName)) {
                                  styleValue = styleValue.getAttribute(attributeName);
                                  serverValue = "" === styleValue ? !0 : shouldRemoveAttribute(serverValue, delimiter, propertyInfo, !1) ? styleValue : styleValue === "" + delimiter ? delimiter : styleValue;
                                  break b;
                                }
                              } else if (styleValue.hasAttribute(attributeName)) {
                                if (shouldRemoveAttribute(serverValue, delimiter, propertyInfo, !1)) {
                                  serverValue = styleValue.getAttribute(attributeName);
                                  break b;
                                }
                                if (3 === propertyInfo.type) {
                                  serverValue = delimiter;
                                  break b;
                                }
                                stringValue = styleValue.getAttribute(attributeName);
                              }
                              serverValue = shouldRemoveAttribute(serverValue, delimiter, propertyInfo, !1) ? null === stringValue ? delimiter : stringValue : stringValue === "" + delimiter ? delimiter : stringValue;
                            }
                          }
                        } else {
                          serverValue = parentNamespace, "http://www.w3.org/1999/xhtml" === serverValue && (serverValue = getIntrinsicNamespace(renderLanes)), "http://www.w3.org/1999/xhtml" === serverValue ? extraAttributeNames.delete(fiberRoot.toLowerCase()) : (serverValue = fiberRoot.toLowerCase(), serverValue = possibleStandardNames.hasOwnProperty(serverValue) ? possibleStandardNames[serverValue] || null : null, null !== serverValue && serverValue !== fiberRoot && (serverHTML = !0, extraAttributeNames.delete(serverValue)), 
                          extraAttributeNames.delete(fiberRoot)), serverValue = getValueForAttribute(newProps, fiberRoot, _i);
                        }
                        _i === serverValue || serverHTML || warnForPropDifference(fiberRoot, serverValue, _i);
                      }
                    }
                  }
                }
              }
              current && 0 < extraAttributeNames.size && !0 !== props.suppressHydrationWarning && warnForExtraAttributes(extraAttributeNames);
              switch(renderLanes) {
                case "input":
                  track(newProps);
                  postMountWrapper(newProps, props, !0);
                  break;
                case "textarea":
                  track(newProps);
                  postMountWrapper$3(newProps);
                  break;
                case "select":
                case "option":
                  break;
                default:
                  "function" === typeof props.onClick && (newProps.onclick = noop);
              }
              fiberRoot = attributes;
              workInProgress.updateQueue = fiberRoot;
              null !== fiberRoot && (workInProgress.flags |= 4);
            } else {
              validateDOMNesting(renderLanes, null, currentHostContext.ancestorInfo);
              if ("string" === typeof newProps.children || "number" === typeof newProps.children) {
                fiberRoot = "" + newProps.children, current = updatedAncestorInfo(currentHostContext.ancestorInfo, renderLanes), validateDOMNesting(null, fiberRoot, current);
              }
              current = 9 === rootContainerInstance.nodeType ? rootContainerInstance : rootContainerInstance.ownerDocument;
              fiberRoot = currentHostContext.namespace;
              "http://www.w3.org/1999/xhtml" === fiberRoot && (fiberRoot = getIntrinsicNamespace(renderLanes));
              "http://www.w3.org/1999/xhtml" === fiberRoot ? ((parentNamespace = isCustomComponent(renderLanes, newProps)) || renderLanes === renderLanes.toLowerCase() || error("\x3c%s /\x3e is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", renderLanes), "script" === renderLanes ? (current = current.createElement("div"), current.innerHTML = "\x3cscript\x3e\x3c/script\x3e", current = current.removeChild(current.firstChild)) : "string" === typeof newProps.is ? 
              current = current.createElement(renderLanes, {is:newProps.is}) : (current = current.createElement(renderLanes), "select" === renderLanes && (currentHostContext = current, newProps.multiple ? currentHostContext.multiple = !0 : newProps.size && (currentHostContext.size = newProps.size)))) : current = current.createElementNS(fiberRoot, renderLanes);
              "http://www.w3.org/1999/xhtml" !== fiberRoot || parentNamespace || "[object HTMLUnknownElement]" !== Object.prototype.toString.call(current) || hasOwnProperty.call(warnedUnknownTags, renderLanes) || (warnedUnknownTags[renderLanes] = !0, error("The tag \x3c%s\x3e is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", renderLanes));
              fiberRoot = current;
              fiberRoot[internalInstanceKey] = workInProgress;
              fiberRoot[internalPropsKey] = newProps;
              appendAllChildren(fiberRoot, workInProgress, !1, !1);
              workInProgress.stateNode = fiberRoot;
              a: {
                current = isCustomComponent(renderLanes, newProps);
                validatePropertiesInDevelopment(renderLanes, newProps);
                switch(renderLanes) {
                  case "dialog":
                    listenToNonDelegatedEvent("cancel", fiberRoot);
                    listenToNonDelegatedEvent("close", fiberRoot);
                    parentNamespace = newProps;
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    listenToNonDelegatedEvent("load", fiberRoot);
                    parentNamespace = newProps;
                    break;
                  case "video":
                  case "audio":
                    for (parentNamespace = 0; parentNamespace < mediaEventTypes.length; parentNamespace++) {
                      listenToNonDelegatedEvent(mediaEventTypes[parentNamespace], fiberRoot);
                    }
                    parentNamespace = newProps;
                    break;
                  case "source":
                    listenToNonDelegatedEvent("error", fiberRoot);
                    parentNamespace = newProps;
                    break;
                  case "img":
                  case "image":
                  case "link":
                    listenToNonDelegatedEvent("error", fiberRoot);
                    listenToNonDelegatedEvent("load", fiberRoot);
                    parentNamespace = newProps;
                    break;
                  case "details":
                    listenToNonDelegatedEvent("toggle", fiberRoot);
                    parentNamespace = newProps;
                    break;
                  case "input":
                    initWrapperState(fiberRoot, newProps);
                    parentNamespace = getHostProps(fiberRoot, newProps);
                    listenToNonDelegatedEvent("invalid", fiberRoot);
                    break;
                  case "option":
                    validateProps(fiberRoot, newProps);
                    parentNamespace = newProps;
                    break;
                  case "select":
                    initWrapperState$1(fiberRoot, newProps);
                    parentNamespace = assign({}, newProps, {value:void 0});
                    listenToNonDelegatedEvent("invalid", fiberRoot);
                    break;
                  case "textarea":
                    initWrapperState$2(fiberRoot, newProps);
                    parentNamespace = getHostProps$2(fiberRoot, newProps);
                    listenToNonDelegatedEvent("invalid", fiberRoot);
                    break;
                  default:
                    parentNamespace = newProps;
                }
                assertValidProps(renderLanes, parentNamespace);
                currentHostContext = parentNamespace;
                for (props in currentHostContext) {
                  currentHostContext.hasOwnProperty(props) && (rootContainerInstance = currentHostContext[props], "style" === props ? (rootContainerInstance && Object.freeze(rootContainerInstance), setValueForStyles(fiberRoot, rootContainerInstance)) : "dangerouslySetInnerHTML" === props ? (rootContainerInstance = rootContainerInstance ? rootContainerInstance.__html : void 0, null != rootContainerInstance && setInnerHTML(fiberRoot, rootContainerInstance)) : "children" === props ? "string" === typeof rootContainerInstance ? 
                  ("textarea" !== renderLanes || "" !== rootContainerInstance) && setTextContent(fiberRoot, rootContainerInstance) : "number" === typeof rootContainerInstance && setTextContent(fiberRoot, "" + rootContainerInstance) : "suppressContentEditableWarning" !== props && "suppressHydrationWarning" !== props && "autoFocus" !== props && (registrationNameDependencies.hasOwnProperty(props) ? null != rootContainerInstance && ("function" !== typeof rootContainerInstance && warnForInvalidEventListener(props, 
                  rootContainerInstance), "onScroll" === props && listenToNonDelegatedEvent("scroll", fiberRoot)) : null != rootContainerInstance && setValueForProperty(fiberRoot, props, rootContainerInstance, current)));
                }
                switch(renderLanes) {
                  case "input":
                    track(fiberRoot);
                    postMountWrapper(fiberRoot, newProps, !1);
                    break;
                  case "textarea":
                    track(fiberRoot);
                    postMountWrapper$3(fiberRoot);
                    break;
                  case "option":
                    null != newProps.value && fiberRoot.setAttribute("value", "" + getToStringValue(newProps.value));
                    break;
                  case "select":
                    fiberRoot.multiple = !!newProps.multiple;
                    props = newProps.value;
                    null != props ? updateOptions(fiberRoot, !!newProps.multiple, props, !1) : null != newProps.defaultValue && updateOptions(fiberRoot, !!newProps.multiple, newProps.defaultValue, !0);
                    break;
                  default:
                    "function" === typeof parentNamespace.onClick && (fiberRoot.onclick = noop);
                }
                switch(renderLanes) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    fiberRoot = !!newProps.autoFocus;
                    break a;
                  case "img":
                    fiberRoot = !0;
                    break a;
                  default:
                    fiberRoot = !1;
                }
              }
              fiberRoot && (workInProgress.flags |= 4);
            }
            null !== workInProgress.ref && (workInProgress.flags |= 512, workInProgress.flags |= 2097152);
          }
          bubbleProperties(workInProgress);
          return null;
        case 6:
          if (current && null != workInProgress.stateNode) {
            updateHostText$1(current, workInProgress, current.memoizedProps, newProps);
          } else {
            if ("string" !== typeof newProps && null === workInProgress.stateNode) {
              throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            }
            fiberRoot = requiredContext(rootInstanceStackCursor.current);
            renderLanes = requiredContext(contextStackCursor$1.current);
            if (popHydrationState(workInProgress)) {
              fiberRoot = workInProgress.stateNode;
              newProps = workInProgress.memoizedProps;
              fiberRoot[internalInstanceKey] = workInProgress;
              if (renderLanes = fiberRoot.nodeValue !== newProps) {
                if (props = hydrationParentFiber, null !== props) {
                  switch(props.tag) {
                    case 3:
                      checkForUnmatchedText(fiberRoot.nodeValue, newProps, 0 !== (props.mode & 1), !0);
                      break;
                    case 5:
                      !0 !== props.memoizedProps.suppressHydrationWarning && checkForUnmatchedText(fiberRoot.nodeValue, newProps, 0 !== (props.mode & 1), !0);
                  }
                }
              }
              renderLanes && (workInProgress.flags |= 4);
            } else {
              validateDOMNesting(null, newProps, renderLanes.ancestorInfo), fiberRoot = (9 === fiberRoot.nodeType ? fiberRoot : fiberRoot.ownerDocument).createTextNode(newProps), fiberRoot[internalInstanceKey] = workInProgress, workInProgress.stateNode = fiberRoot;
            }
          }
          bubbleProperties(workInProgress);
          return null;
        case 13:
          pop(suspenseStackCursor, workInProgress);
          fiberRoot = workInProgress.memoizedState;
          if (null === current || null !== current.memoizedState && null !== current.memoizedState.dehydrated) {
            if (isHydrating && null !== nextHydratableInstance && 0 !== (workInProgress.mode & 1) && 0 === (workInProgress.flags & 128)) {
              warnIfUnhydratedTailNodes(workInProgress), resetHydrationState(), workInProgress.flags |= 98560, newProps = !1;
            } else {
              if (newProps = popHydrationState(workInProgress), null !== fiberRoot && null !== fiberRoot.dehydrated) {
                if (null === current) {
                  if (!newProps) {
                    throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                  }
                  newProps = workInProgress.memoizedState;
                  newProps = null !== newProps ? newProps.dehydrated : null;
                  if (!newProps) {
                    throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  newProps[internalInstanceKey] = workInProgress;
                  bubbleProperties(workInProgress);
                  0 !== (workInProgress.mode & 2) && null !== fiberRoot && (newProps = workInProgress.child, null !== newProps && (workInProgress.treeBaseDuration -= newProps.treeBaseDuration));
                } else {
                  resetHydrationState(), 0 === (workInProgress.flags & 128) && (workInProgress.memoizedState = null), workInProgress.flags |= 4, bubbleProperties(workInProgress), 0 !== (workInProgress.mode & 2) && null !== fiberRoot && (newProps = workInProgress.child, null !== newProps && (workInProgress.treeBaseDuration -= newProps.treeBaseDuration));
                }
                newProps = !1;
              } else {
                null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null), newProps = !0;
              }
            }
            if (!newProps) {
              return workInProgress.flags & 65536 ? workInProgress : null;
            }
          }
          if (0 !== (workInProgress.flags & 128)) {
            return workInProgress.lanes = renderLanes, 0 !== (workInProgress.mode & 2) && transferActualDuration(workInProgress), workInProgress;
          }
          fiberRoot = null !== fiberRoot;
          fiberRoot !== (null !== current && null !== current.memoizedState) && fiberRoot && (workInProgress.child.flags |= 8192, 0 !== (workInProgress.mode & 1) && (null === current || 0 !== (suspenseStackCursor.current & InvisibleParentSuspenseContext) ? workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootSuspended) : renderDidSuspendDelayIfPossible()));
          null !== workInProgress.updateQueue && (workInProgress.flags |= 4);
          bubbleProperties(workInProgress);
          0 !== (workInProgress.mode & 2) && fiberRoot && (fiberRoot = workInProgress.child, null !== fiberRoot && (workInProgress.treeBaseDuration -= fiberRoot.treeBaseDuration));
          return null;
        case 4:
          return popHostContainer(workInProgress), updateHostContainer(current, workInProgress), null === current && listenToAllSupportedEvents(workInProgress.stateNode.containerInfo), bubbleProperties(workInProgress), null;
        case 10:
          return popProvider(workInProgress.type._context, workInProgress), bubbleProperties(workInProgress), null;
        case 17:
          return isContextProvider(workInProgress.type) && popContext(workInProgress), bubbleProperties(workInProgress), null;
        case 19:
          pop(suspenseStackCursor, workInProgress);
          newProps = workInProgress.memoizedState;
          if (null === newProps) {
            return bubbleProperties(workInProgress), null;
          }
          fiberRoot = 0 !== (workInProgress.flags & 128);
          props = newProps.rendering;
          if (null === props) {
            if (fiberRoot) {
              cutOffTailIfNeeded(newProps, !1);
            } else {
              if (workInProgressRootExitStatus !== RootInProgress || null !== current && 0 !== (current.flags & 128)) {
                for (props = workInProgress.child; null !== props;) {
                  current = findFirstSuspended(props);
                  if (null !== current) {
                    workInProgress.flags |= 128;
                    cutOffTailIfNeeded(newProps, !1);
                    fiberRoot = current.updateQueue;
                    null !== fiberRoot && (workInProgress.updateQueue = fiberRoot, workInProgress.flags |= 4);
                    workInProgress.subtreeFlags = 0;
                    fiberRoot = renderLanes;
                    for (newProps = workInProgress.child; null !== newProps;) {
                      renderLanes = newProps, current = fiberRoot, renderLanes.flags &= 14680066, props = renderLanes.alternate, null === props ? (renderLanes.childLanes = 0, renderLanes.lanes = current, renderLanes.child = null, renderLanes.subtreeFlags = 0, renderLanes.memoizedProps = null, renderLanes.memoizedState = null, renderLanes.updateQueue = null, renderLanes.dependencies = null, renderLanes.stateNode = null, renderLanes.selfBaseDuration = 0, renderLanes.treeBaseDuration = 0) : (renderLanes.childLanes = 
                      props.childLanes, renderLanes.lanes = props.lanes, renderLanes.child = props.child, renderLanes.subtreeFlags = 0, renderLanes.deletions = null, renderLanes.memoizedProps = props.memoizedProps, renderLanes.memoizedState = props.memoizedState, renderLanes.updateQueue = props.updateQueue, renderLanes.type = props.type, current = props.dependencies, renderLanes.dependencies = null === current ? null : {lanes:current.lanes, firstContext:current.firstContext}, renderLanes.selfBaseDuration = 
                      props.selfBaseDuration, renderLanes.treeBaseDuration = props.treeBaseDuration), newProps = newProps.sibling;
                    }
                    push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask | ForceSuspenseFallback, workInProgress);
                    return workInProgress.child;
                  }
                  props = props.sibling;
                }
              }
              null !== newProps.tail && now() > workInProgressRootRenderTargetTime && (workInProgress.flags |= 128, fiberRoot = !0, cutOffTailIfNeeded(newProps, !1), workInProgress.lanes = 4194304);
            }
          } else {
            if (!fiberRoot) {
              if (current = findFirstSuspended(props), null !== current) {
                if (workInProgress.flags |= 128, fiberRoot = !0, renderLanes = current.updateQueue, null !== renderLanes && (workInProgress.updateQueue = renderLanes, workInProgress.flags |= 4), cutOffTailIfNeeded(newProps, !0), null === newProps.tail && "hidden" === newProps.tailMode && !props.alternate && !isHydrating) {
                  return bubbleProperties(workInProgress), null;
                }
              } else {
                2 * now() - newProps.renderingStartTime > workInProgressRootRenderTargetTime && renderLanes !== OffscreenLane && (workInProgress.flags |= 128, fiberRoot = !0, cutOffTailIfNeeded(newProps, !1), workInProgress.lanes = 4194304);
              }
            }
            newProps.isBackwards ? (props.sibling = workInProgress.child, workInProgress.child = props) : (renderLanes = newProps.last, null !== renderLanes ? renderLanes.sibling = props : workInProgress.child = props, newProps.last = props);
          }
          if (null !== newProps.tail) {
            return renderLanes = newProps.tail, newProps.rendering = renderLanes, newProps.tail = renderLanes.sibling, newProps.renderingStartTime = now(), renderLanes.sibling = null, newProps = suspenseStackCursor.current, newProps = fiberRoot ? newProps & SubtreeSuspenseContextMask | ForceSuspenseFallback : newProps & SubtreeSuspenseContextMask, push(suspenseStackCursor, newProps, workInProgress), renderLanes;
          }
          bubbleProperties(workInProgress);
          return null;
        case 22:
        case 23:
          return popRenderLanes(workInProgress), fiberRoot = null !== workInProgress.memoizedState, null !== current && null !== current.memoizedState !== fiberRoot && (workInProgress.flags |= 8192), fiberRoot && 0 !== (workInProgress.mode & 1) ? 0 !== (subtreeRenderLanes & OffscreenLane) && (bubbleProperties(workInProgress), workInProgress.subtreeFlags & 6 && (workInProgress.flags |= 8192)) : bubbleProperties(workInProgress), null;
        case 24:
          return null;
        case 25:
          return null;
      }
      throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(current, workInProgress, renderLanes) {
      popTreeContext(workInProgress);
      switch(workInProgress.tag) {
        case 1:
          return isContextProvider(workInProgress.type) && popContext(workInProgress), current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, 0 !== (workInProgress.mode & 2) && transferActualDuration(workInProgress), workInProgress) : null;
        case 3:
          return popHostContainer(workInProgress), popTopLevelContextObject(workInProgress), resetWorkInProgressVersions(), current = workInProgress.flags, 0 !== (current & 65536) && 0 === (current & 128) ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
        case 5:
          return popHostContext(workInProgress), null;
        case 13:
          pop(suspenseStackCursor, workInProgress);
          current = workInProgress.memoizedState;
          if (null !== current && null !== current.dehydrated) {
            if (null === workInProgress.alternate) {
              throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
            }
            resetHydrationState();
          }
          current = workInProgress.flags;
          return current & 65536 ? (workInProgress.flags = current & -65537 | 128, 0 !== (workInProgress.mode & 2) && transferActualDuration(workInProgress), workInProgress) : null;
        case 19:
          return pop(suspenseStackCursor, workInProgress), null;
        case 4:
          return popHostContainer(workInProgress), null;
        case 10:
          return popProvider(workInProgress.type._context, workInProgress), null;
        case 22:
        case 23:
          return popRenderLanes(workInProgress), null;
        case 24:
          return null;
        default:
          return null;
      }
    }
    function unwindInterruptedWork(current, interruptedWork, renderLanes) {
      popTreeContext(interruptedWork);
      switch(interruptedWork.tag) {
        case 1:
          current = interruptedWork.type.childContextTypes;
          null !== current && void 0 !== current && popContext(interruptedWork);
          break;
        case 3:
          popHostContainer(interruptedWork);
          popTopLevelContextObject(interruptedWork);
          resetWorkInProgressVersions();
          break;
        case 5:
          popHostContext(interruptedWork);
          break;
        case 4:
          popHostContainer(interruptedWork);
          break;
        case 13:
          pop(suspenseStackCursor, interruptedWork);
          break;
        case 19:
          pop(suspenseStackCursor, interruptedWork);
          break;
        case 10:
          popProvider(interruptedWork.type._context, interruptedWork);
          break;
        case 22:
        case 23:
          popRenderLanes(interruptedWork);
      }
    }
    function reportUncaughtErrorInDEV(error) {
      invokeGuardedCallback(null, function() {
        throw error;
      });
      clearCaughtError();
    }
    function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
      try {
        if (instance.props = current.memoizedProps, instance.state = current.memoizedState, current.mode & 2) {
          try {
            startLayoutEffectTimer(), instance.componentWillUnmount();
          } finally {
            recordLayoutEffectDuration(current);
          }
        } else {
          instance.componentWillUnmount();
        }
      } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
      }
    }
    function safelyDetachRef(current, nearestMountedAncestor) {
      var ref = current.ref;
      if (null !== ref) {
        if ("function" === typeof ref) {
          try {
            if (current.mode & 2) {
              try {
                startLayoutEffectTimer();
                var retVal = ref(null);
              } finally {
                recordLayoutEffectDuration(current);
              }
            } else {
              retVal = ref(null);
            }
          } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
          }
          "function" === typeof retVal && error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current));
        } else {
          ref.current = null;
        }
      }
    }
    function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
      try {
        destroy();
      } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
      }
    }
    function commitBeforeMutationEffects(root, firstChild) {
      eventsEnabled = _enabled;
      root = getActiveElementDeep();
      if (hasSelectionCapabilities(root)) {
        if ("selectionStart" in root) {
          var JSCompiler_temp = {start:root.selectionStart, end:root.selectionEnd};
        } else {
          a: {
            JSCompiler_temp = (JSCompiler_temp = root.ownerDocument) && JSCompiler_temp.defaultView || window;
            var selection = JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
            if (selection && 0 !== selection.rangeCount) {
              JSCompiler_temp = selection.anchorNode;
              var anchorOffset = selection.anchorOffset, focusNode = selection.focusNode;
              selection = selection.focusOffset;
              try {
                JSCompiler_temp.nodeType, focusNode.nodeType;
              } catch (e) {
                JSCompiler_temp = null;
                break a;
              }
              var length = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node = root, parentNode = null;
              b: for (;;) {
                for (var next;;) {
                  node !== JSCompiler_temp || 0 !== anchorOffset && 3 !== node.nodeType || (start = length + anchorOffset);
                  node !== focusNode || 0 !== selection && 3 !== node.nodeType || (end = length + selection);
                  3 === node.nodeType && (length += node.nodeValue.length);
                  if (null === (next = node.firstChild)) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                for (;;) {
                  if (node === root) {
                    break b;
                  }
                  parentNode === JSCompiler_temp && ++indexWithinAnchor === anchorOffset && (start = length);
                  parentNode === focusNode && ++indexWithinFocus === selection && (end = length);
                  if (null !== (next = node.nextSibling)) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
              JSCompiler_temp = -1 === start || -1 === end ? null : {start, end};
            } else {
              JSCompiler_temp = null;
            }
          }
        }
        JSCompiler_temp = JSCompiler_temp || {start:0, end:0};
      } else {
        JSCompiler_temp = null;
      }
      selectionInformation = {focusedElem:root, selectionRange:JSCompiler_temp};
      _enabled = !1;
      for (nextEffect = firstChild; null !== nextEffect;) {
        if (firstChild = nextEffect, root = firstChild.child, 0 !== (firstChild.subtreeFlags & 1028) && null !== root) {
          root.return = firstChild, nextEffect = root;
        } else {
          for (; null !== nextEffect;) {
            firstChild = nextEffect;
            setCurrentFiber(firstChild);
            try {
              root = firstChild;
              var current = root.alternate;
              if (0 !== (root.flags & 1024)) {
                setCurrentFiber(root);
                switch(root.tag) {
                  case 0:
                  case 11:
                  case 15:
                    break;
                  case 1:
                    if (null !== current) {
                      var prevProps = current.memoizedProps, prevState = current.memoizedState, instance = root.stateNode;
                      root.type !== root.elementType || didWarnAboutReassigningProps || (instance.props !== root.memoizedProps && error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(root) || "instance"), instance.state !== root.memoizedState && error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", 
                      getComponentNameFromFiber(root) || "instance"));
                      var snapshot = instance.getSnapshotBeforeUpdate(root.elementType === root.type ? prevProps : resolveDefaultProps(root.type, prevProps), prevState);
                      JSCompiler_temp = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      void 0 !== snapshot || JSCompiler_temp.has(root.type) || (JSCompiler_temp.add(root.type), error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(root)));
                      instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }
                    break;
                  case 3:
                    var container = root.stateNode.containerInfo;
                    1 === container.nodeType ? container.textContent = "" : 9 === container.nodeType && container.documentElement && container.removeChild(container.documentElement);
                    break;
                  case 5:
                  case 6:
                  case 4:
                  case 17:
                    break;
                  default:
                    throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
                resetCurrentFiber();
              }
            } catch (error) {
              captureCommitPhaseError(firstChild, firstChild.return, error);
            }
            resetCurrentFiber();
            root = firstChild.sibling;
            if (null !== root) {
              root.return = firstChild.return;
              nextEffect = root;
              break;
            }
            nextEffect = firstChild.return;
          }
        }
      }
      current = shouldFireAfterActiveInstanceBlur;
      shouldFireAfterActiveInstanceBlur = !1;
      return current;
    }
    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
      var updateQueue = finishedWork.updateQueue;
      updateQueue = null !== updateQueue ? updateQueue.lastEffect : null;
      if (null !== updateQueue) {
        var effect = updateQueue = updateQueue.next;
        do {
          if ((effect.tag & flags) === flags) {
            var destroy = effect.destroy;
            effect.destroy = void 0;
            void 0 !== destroy && ((flags & Passive$1) !== NoFlags$1 ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted && injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(finishedWork) : (flags & Layout) !== NoFlags$1 && markComponentLayoutEffectUnmountStarted(finishedWork), (flags & Insertion) !== NoFlags$1 && (isRunningInsertionEffect = !0), safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy), (flags & 
            Insertion) !== NoFlags$1 && (isRunningInsertionEffect = !1), (flags & Passive$1) !== NoFlags$1 ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped && injectedProfilingHooks.markComponentPassiveEffectUnmountStopped() : (flags & Layout) !== NoFlags$1 && markComponentLayoutEffectUnmountStopped());
          }
          effect = effect.next;
        } while (effect !== updateQueue);
      }
    }
    function commitHookEffectListMount(flags, finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      updateQueue = null !== updateQueue ? updateQueue.lastEffect : null;
      if (null !== updateQueue) {
        var effect = updateQueue = updateQueue.next;
        do {
          if ((effect.tag & flags) === flags) {
            (flags & Passive$1) !== NoFlags$1 ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted && injectedProfilingHooks.markComponentPassiveEffectMountStarted(finishedWork) : (flags & Layout) !== NoFlags$1 && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted && injectedProfilingHooks.markComponentLayoutEffectMountStarted(finishedWork);
            var create = effect.create;
            (flags & Insertion) !== NoFlags$1 && (isRunningInsertionEffect = !0);
            effect.destroy = create();
            (flags & Insertion) !== NoFlags$1 && (isRunningInsertionEffect = !1);
            (flags & Passive$1) !== NoFlags$1 ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped && injectedProfilingHooks.markComponentPassiveEffectMountStopped() : (flags & Layout) !== NoFlags$1 && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped && injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            create = effect.destroy;
            if (void 0 !== create && "function" !== typeof create) {
              var hookName = 0 !== (effect.tag & Layout) ? "useLayoutEffect" : 0 !== (effect.tag & Insertion) ? "useInsertionEffect" : "useEffect";
              error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, null === create ? " You returned null. If your effect does not require clean up, return undefined (or nothing)." : "function" === typeof create.then ? "\n\nIt looks like you wrote " + hookName + "(async () \x3d\x3e ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() \x3d\x3e {\n  async function fetchData() {\n    // You can await here\n    const response \x3d await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching" : 
              " You returned: " + create);
            }
          }
          effect = effect.next;
        } while (effect !== updateQueue);
      }
    }
    function commitAttachRef(finishedWork) {
      var ref = finishedWork.ref;
      if (null !== ref) {
        var instance = finishedWork.stateNode;
        if ("function" === typeof ref) {
          if (finishedWork.mode & 2) {
            try {
              startLayoutEffectTimer();
              var retVal = ref(instance);
            } finally {
              recordLayoutEffectDuration(finishedWork);
            }
          } else {
            retVal = ref(instance);
          }
          "function" === typeof retVal && error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
        } else {
          ref.hasOwnProperty("current") || error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork)), ref.current = instance;
        }
      }
    }
    function detachFiberAfterEffects(fiber) {
      var alternate = fiber.alternate;
      null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
      fiber.child = null;
      fiber.deletions = null;
      fiber.sibling = null;
      5 === fiber.tag && (alternate = fiber.stateNode, null !== alternate && (delete alternate[internalInstanceKey], delete alternate[internalPropsKey], delete alternate[internalEventHandlersKey], delete alternate[internalEventHandlerListenersKey], delete alternate[internalEventHandlesSetKey]));
      fiber.stateNode = null;
      fiber._debugOwner = null;
      fiber.return = null;
      fiber.dependencies = null;
      fiber.memoizedProps = null;
      fiber.memoizedState = null;
      fiber.pendingProps = null;
      fiber.stateNode = null;
      fiber.updateQueue = null;
    }
    function isHostParent(fiber) {
      return 5 === fiber.tag || 3 === fiber.tag || 4 === fiber.tag;
    }
    function getHostSibling(fiber) {
      a: for (;;) {
        for (; null === fiber.sibling;) {
          if (null === fiber.return || isHostParent(fiber.return)) {
            return null;
          }
          fiber = fiber.return;
        }
        fiber.sibling.return = fiber.return;
        for (fiber = fiber.sibling; 5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag;) {
          if (fiber.flags & 2) {
            continue a;
          }
          if (null === fiber.child || 4 === fiber.tag) {
            continue a;
          } else {
            fiber.child.return = fiber, fiber = fiber.child;
          }
        }
        if (!(fiber.flags & 2)) {
          return fiber.stateNode;
        }
      }
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
      var tag = node.tag;
      if (5 === tag || 6 === tag) {
        node = node.stateNode, before ? 8 === parent.nodeType ? parent.parentNode.insertBefore(node, before) : parent.insertBefore(node, before) : (8 === parent.nodeType ? (before = parent.parentNode, before.insertBefore(node, parent)) : (before = parent, before.appendChild(node)), parent = parent._reactRootContainer, null !== parent && void 0 !== parent || null !== before.onclick || (before.onclick = noop));
      } else if (4 !== tag && (node = node.child, null !== node)) {
        for (insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling; null !== node;) {
          insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;
        }
      }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
      var tag = node.tag;
      if (5 === tag || 6 === tag) {
        node = node.stateNode, before ? parent.insertBefore(node, before) : parent.appendChild(node);
      } else if (4 !== tag && (node = node.child, null !== node)) {
        for (insertOrAppendPlacementNode(node, before, parent), node = node.sibling; null !== node;) {
          insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
        }
      }
    }
    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
      for (parent = parent.child; null !== parent;) {
        commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
      }
    }
    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
      if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount) {
        try {
          injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
        } catch (err) {
          hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
        }
      }
      switch(deletedFiber.tag) {
        case 5:
          offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
        case 6:
          var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
          hostParent = null;
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          hostParent = prevHostParent;
          hostParentIsContainer = prevHostParentIsContainer;
          null !== hostParent && (hostParentIsContainer ? (finishedRoot = hostParent, deletedFiber = deletedFiber.stateNode, 8 === finishedRoot.nodeType ? finishedRoot.parentNode.removeChild(deletedFiber) : finishedRoot.removeChild(deletedFiber)) : hostParent.removeChild(deletedFiber.stateNode));
          break;
        case 18:
          null !== hostParent && (hostParentIsContainer ? (finishedRoot = hostParent, deletedFiber = deletedFiber.stateNode, 8 === finishedRoot.nodeType ? clearSuspenseBoundary(finishedRoot.parentNode, deletedFiber) : 1 === finishedRoot.nodeType && clearSuspenseBoundary(finishedRoot, deletedFiber), retryIfBlockedOn(finishedRoot)) : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
          break;
        case 4:
          prevHostParent = hostParent;
          prevHostParentIsContainer = hostParentIsContainer;
          hostParent = deletedFiber.stateNode.containerInfo;
          hostParentIsContainer = !0;
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          hostParent = prevHostParent;
          hostParentIsContainer = prevHostParentIsContainer;
          break;
        case 0:
        case 11:
        case 14:
        case 15:
          if (!offscreenSubtreeWasHidden && (prevHostParent = deletedFiber.updateQueue, null !== prevHostParent && (prevHostParent = prevHostParent.lastEffect, null !== prevHostParent))) {
            prevHostParentIsContainer = prevHostParent = prevHostParent.next;
            do {
              var _effect = prevHostParentIsContainer, destroy = _effect.destroy;
              _effect = _effect.tag;
              void 0 !== destroy && ((_effect & Insertion) !== NoFlags$1 ? safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy) : (_effect & Layout) !== NoFlags$1 && (markComponentLayoutEffectUnmountStarted(deletedFiber), deletedFiber.mode & 2 ? (startLayoutEffectTimer(), safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy), recordLayoutEffectDuration(deletedFiber)) : safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy), markComponentLayoutEffectUnmountStopped()));
              prevHostParentIsContainer = prevHostParentIsContainer.next;
            } while (prevHostParentIsContainer !== prevHostParent);
          }
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          break;
        case 1:
          offscreenSubtreeWasHidden || (safelyDetachRef(deletedFiber, nearestMountedAncestor), prevHostParent = deletedFiber.stateNode, "function" === typeof prevHostParent.componentWillUnmount && safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, prevHostParent));
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          break;
        case 21:
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          break;
        case 22:
          deletedFiber.mode & 1 ? (offscreenSubtreeWasHidden = (prevHostParent = offscreenSubtreeWasHidden) || null !== deletedFiber.memoizedState, recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber), offscreenSubtreeWasHidden = prevHostParent) : recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          break;
        default:
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
      }
    }
    function attachSuspenseRetryListeners(finishedWork) {
      var wakeables = finishedWork.updateQueue;
      if (null !== wakeables) {
        finishedWork.updateQueue = null;
        var retryCache = finishedWork.stateNode;
        null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
        wakeables.forEach(function(wakeable) {
          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
          if (!retryCache.has(wakeable)) {
            retryCache.add(wakeable);
            if (isDevToolsPresent) {
              if (null !== inProgressLanes && null !== inProgressRoot) {
                restorePendingUpdaters(inProgressRoot, inProgressLanes);
              } else {
                throw Error("Expected finished root and lanes to be set. This is a bug in React.");
              }
            }
            wakeable.then(retry, retry);
          }
        });
      }
    }
    function commitMutationEffects(root, finishedWork, committedLanes) {
      inProgressLanes = committedLanes;
      inProgressRoot = root;
      setCurrentFiber(finishedWork);
      commitMutationEffectsOnFiber(finishedWork, root);
      setCurrentFiber(finishedWork);
      inProgressRoot = inProgressLanes = null;
    }
    function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber, lanes) {
      lanes = parentFiber.deletions;
      if (null !== lanes) {
        for (var i = 0; i < lanes.length; i++) {
          var childToDelete = lanes[i];
          try {
            var root = root$jscomp$0, returnFiber = parentFiber, deletedFiber = childToDelete, parent = returnFiber;
            a: for (; null !== parent;) {
              switch(parent.tag) {
                case 5:
                  hostParent = parent.stateNode;
                  hostParentIsContainer = !1;
                  break a;
                case 3:
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = !0;
                  break a;
                case 4:
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = !0;
                  break a;
              }
              parent = parent.return;
            }
            if (null === hostParent) {
              throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = !1;
            root = deletedFiber;
            var alternate = root.alternate;
            null !== alternate && (alternate.return = null);
            root.return = null;
          } catch (error) {
            captureCommitPhaseError(childToDelete, parentFiber, error);
          }
        }
      }
      alternate = current;
      if (parentFiber.subtreeFlags & 12854) {
        for (parentFiber = parentFiber.child; null !== parentFiber;) {
          setCurrentFiber(parentFiber), commitMutationEffectsOnFiber(parentFiber, root$jscomp$0), parentFiber = parentFiber.sibling;
        }
      }
      setCurrentFiber(alternate);
    }
    function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
      var current = finishedWork.alternate;
      lanes = finishedWork.flags;
      switch(finishedWork.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (lanes & 4) {
            try {
              commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return), commitHookEffectListMount(Insertion | HasEffect, finishedWork);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
            if (finishedWork.mode & 2) {
              try {
                startLayoutEffectTimer(), commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
              recordLayoutEffectDuration(finishedWork);
            } else {
              try {
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            }
          }
          break;
        case 1:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          lanes & 512 && null !== current && safelyDetachRef(current, current.return);
          break;
        case 5:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          lanes & 512 && null !== current && safelyDetachRef(current, current.return);
          if (finishedWork.flags & 32) {
            var instance = finishedWork.stateNode;
            try {
              setTextContent(instance, "");
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
          if (lanes & 4 && (instance = finishedWork.stateNode, null != instance)) {
            var newProps = finishedWork.memoizedProps, oldProps = null !== current ? current.memoizedProps : newProps, type = finishedWork.type, updatePayload = finishedWork.updateQueue;
            finishedWork.updateQueue = null;
            if (null !== updatePayload) {
              try {
                "input" === type && "radio" === newProps.type && null != newProps.name && updateChecked(instance, newProps);
                isCustomComponent(type, oldProps);
                var isCustomComponentTag = isCustomComponent(type, newProps);
                for (oldProps = 0; oldProps < updatePayload.length; oldProps += 2) {
                  var propKey = updatePayload[oldProps], propValue = updatePayload[oldProps + 1];
                  "style" === propKey ? setValueForStyles(instance, propValue) : "dangerouslySetInnerHTML" === propKey ? setInnerHTML(instance, propValue) : "children" === propKey ? setTextContent(instance, propValue) : setValueForProperty(instance, propKey, propValue, isCustomComponentTag);
                }
                switch(type) {
                  case "input":
                    updateWrapper(instance, newProps);
                    break;
                  case "textarea":
                    updateWrapper$1(instance, newProps);
                    break;
                  case "select":
                    var wasMultiple = instance._wrapperState.wasMultiple;
                    instance._wrapperState.wasMultiple = !!newProps.multiple;
                    var value = newProps.value;
                    null != value ? updateOptions(instance, !!newProps.multiple, value, !1) : wasMultiple !== !!newProps.multiple && (null != newProps.defaultValue ? updateOptions(instance, !!newProps.multiple, newProps.defaultValue, !0) : updateOptions(instance, !!newProps.multiple, newProps.multiple ? [] : "", !1));
                }
                instance[internalPropsKey] = newProps;
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            }
          }
          break;
        case 6:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (lanes & 4) {
            if (null === finishedWork.stateNode) {
              throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
            }
            instance = finishedWork.stateNode;
            newProps = finishedWork.memoizedProps;
            try {
              instance.nodeValue = newProps;
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
          break;
        case 3:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (lanes & 4 && null !== current && current.memoizedState.isDehydrated) {
            try {
              retryIfBlockedOn(root.containerInfo);
            } catch (error) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
          }
          break;
        case 4:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          break;
        case 13:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          instance = finishedWork.child;
          instance.flags & 8192 && (newProps = null !== instance.memoizedState, instance.stateNode.isHidden = newProps, !newProps || null !== instance.alternate && null !== instance.alternate.memoizedState || (globalMostRecentFallbackTime = now()));
          lanes & 4 && attachSuspenseRetryListeners(finishedWork);
          break;
        case 22:
          propKey = null !== current && null !== current.memoizedState;
          finishedWork.mode & 1 ? (offscreenSubtreeWasHidden = (isCustomComponentTag = offscreenSubtreeWasHidden) || propKey, recursivelyTraverseMutationEffects(root, finishedWork), offscreenSubtreeWasHidden = isCustomComponentTag) : recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (lanes & 8192) {
            isCustomComponentTag = null !== finishedWork.memoizedState;
            if ((finishedWork.stateNode.isHidden = isCustomComponentTag) && !propKey && 0 !== (finishedWork.mode & 1)) {
              for (nextEffect = finishedWork, propKey = finishedWork.child; null !== propKey;) {
                for (propValue = nextEffect = propKey; null !== nextEffect;) {
                  wasMultiple = nextEffect;
                  value = wasMultiple.child;
                  switch(wasMultiple.tag) {
                    case 0:
                    case 11:
                    case 14:
                    case 15:
                      if (wasMultiple.mode & 2) {
                        try {
                          startLayoutEffectTimer(), commitHookEffectListUnmount(Layout, wasMultiple, wasMultiple.return);
                        } finally {
                          recordLayoutEffectDuration(wasMultiple);
                        }
                      } else {
                        commitHookEffectListUnmount(Layout, wasMultiple, wasMultiple.return);
                      }
                      break;
                    case 1:
                      safelyDetachRef(wasMultiple, wasMultiple.return);
                      lanes = wasMultiple.stateNode;
                      "function" === typeof lanes.componentWillUnmount && safelyCallComponentWillUnmount(wasMultiple, wasMultiple.return, lanes);
                      break;
                    case 5:
                      safelyDetachRef(wasMultiple, wasMultiple.return);
                      break;
                    case 22:
                      if (null !== wasMultiple.memoizedState) {
                        disappearLayoutEffects_complete(propValue);
                        continue;
                      }
                  }
                  null !== value ? (value.return = wasMultiple, nextEffect = value) : disappearLayoutEffects_complete(propValue);
                }
                propKey = propKey.sibling;
              }
            }
            a: {
              for (propKey = null, propValue = finishedWork;;) {
                if (5 === propValue.tag) {
                  if (null === propKey) {
                    propKey = propValue;
                    try {
                      instance = propValue.stateNode, isCustomComponentTag ? (newProps = instance.style, "function" === typeof newProps.setProperty ? newProps.setProperty("display", "none", "important") : newProps.display = "none") : (type = propValue.stateNode, updatePayload = propValue.memoizedProps.style, oldProps = void 0 !== updatePayload && null !== updatePayload && updatePayload.hasOwnProperty("display") ? updatePayload.display : null, type.style.display = dangerousStyleValue("display", oldProps));
                    } catch (error) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                  }
                } else if (6 === propValue.tag) {
                  if (null === propKey) {
                    try {
                      propValue.stateNode.nodeValue = isCustomComponentTag ? "" : propValue.memoizedProps;
                    } catch (error) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                  }
                } else if ((22 !== propValue.tag && 23 !== propValue.tag || null === propValue.memoizedState || propValue === finishedWork) && null !== propValue.child) {
                  propValue.child.return = propValue;
                  propValue = propValue.child;
                  continue;
                }
                if (propValue === finishedWork) {
                  break a;
                }
                for (; null === propValue.sibling;) {
                  if (null === propValue.return || propValue.return === finishedWork) {
                    break a;
                  }
                  propKey === propValue && (propKey = null);
                  propValue = propValue.return;
                }
                propKey === propValue && (propKey = null);
                propValue.sibling.return = propValue.return;
                propValue = propValue.sibling;
              }
            }
          }
          break;
        case 19:
          recursivelyTraverseMutationEffects(root, finishedWork);
          commitReconciliationEffects(finishedWork);
          lanes & 4 && attachSuspenseRetryListeners(finishedWork);
          break;
        case 21:
          break;
        default:
          recursivelyTraverseMutationEffects(root, finishedWork), commitReconciliationEffects(finishedWork);
      }
    }
    function commitReconciliationEffects(finishedWork) {
      var flags = finishedWork.flags;
      if (flags & 2) {
        try {
          a: {
            for (var parent = finishedWork.return; null !== parent;) {
              if (isHostParent(parent)) {
                var parentFiber = parent;
                break a;
              }
              parent = parent.return;
            }
            throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          switch(parentFiber.tag) {
            case 5:
              var parent$jscomp$0 = parentFiber.stateNode;
              parentFiber.flags & 32 && (setTextContent(parent$jscomp$0, ""), parentFiber.flags &= -33);
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent$jscomp$0);
              break;
            case 3:
            case 4:
              var _parent = parentFiber.stateNode.containerInfo, _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
              break;
            default:
              throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
        finishedWork.flags &= -3;
      }
      flags & 4096 && (finishedWork.flags &= -4097);
    }
    function commitLayoutEffects(finishedWork, root, committedLanes) {
      inProgressLanes = committedLanes;
      inProgressRoot = root;
      nextEffect = finishedWork;
      commitLayoutEffects_begin(finishedWork, root, committedLanes);
      inProgressRoot = inProgressLanes = null;
    }
    function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
      for (var isModernRoot = 0 !== (subtreeRoot.mode & 1); null !== nextEffect;) {
        var fiber = nextEffect, firstChild = fiber.child;
        if (22 === fiber.tag && isModernRoot) {
          var newOffscreenSubtreeIsHidden = null !== fiber.memoizedState || offscreenSubtreeIsHidden;
          if (!newOffscreenSubtreeIsHidden) {
            var current = fiber.alternate, newOffscreenSubtreeWasHidden = null !== current && null !== current.memoizedState || offscreenSubtreeWasHidden;
            current = offscreenSubtreeIsHidden;
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
            if ((offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden) && !prevOffscreenSubtreeWasHidden) {
              for (newOffscreenSubtreeIsHidden = nextEffect = fiber; null !== nextEffect;) {
                newOffscreenSubtreeWasHidden = nextEffect;
                var firstChild$jscomp$0 = newOffscreenSubtreeWasHidden.child;
                22 === newOffscreenSubtreeWasHidden.tag && null !== newOffscreenSubtreeWasHidden.memoizedState ? reappearLayoutEffects_complete(newOffscreenSubtreeIsHidden) : null !== firstChild$jscomp$0 ? (firstChild$jscomp$0.return = newOffscreenSubtreeWasHidden, nextEffect = firstChild$jscomp$0) : reappearLayoutEffects_complete(newOffscreenSubtreeIsHidden);
              }
            }
            for (; null !== firstChild;) {
              nextEffect = firstChild, commitLayoutEffects_begin(firstChild, root, committedLanes), firstChild = firstChild.sibling;
            }
            nextEffect = fiber;
            offscreenSubtreeIsHidden = current;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          }
          commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
        } else {
          0 !== (fiber.subtreeFlags & 8772) && null !== firstChild ? (firstChild.return = fiber, nextEffect = firstChild) : commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
        }
      }
    }
    function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
      for (; null !== nextEffect;) {
        root = nextEffect;
        if (0 !== (root.flags & 8772)) {
          committedLanes = root.alternate;
          setCurrentFiber(root);
          try {
            var current = committedLanes;
            committedLanes = root;
            if (0 !== (committedLanes.flags & 8772)) {
              switch(committedLanes.tag) {
                case 0:
                case 11:
                case 15:
                  if (!offscreenSubtreeWasHidden) {
                    if (committedLanes.mode & 2) {
                      try {
                        startLayoutEffectTimer(), commitHookEffectListMount(Layout | HasEffect, committedLanes);
                      } finally {
                        recordLayoutEffectDuration(committedLanes);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, committedLanes);
                    }
                  }
                  break;
                case 1:
                  var instance = committedLanes.stateNode;
                  if (committedLanes.flags & 4 && !offscreenSubtreeWasHidden) {
                    if (null === current) {
                      if (committedLanes.type !== committedLanes.elementType || didWarnAboutReassigningProps || (instance.props !== committedLanes.memoizedProps && error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(committedLanes) || "instance"), instance.state !== committedLanes.memoizedState && error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", 
                      getComponentNameFromFiber(committedLanes) || "instance")), committedLanes.mode & 2) {
                        try {
                          startLayoutEffectTimer(), instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(committedLanes);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps = committedLanes.elementType === committedLanes.type ? current.memoizedProps : resolveDefaultProps(committedLanes.type, current.memoizedProps), prevState = current.memoizedState;
                      committedLanes.type !== committedLanes.elementType || didWarnAboutReassigningProps || (instance.props !== committedLanes.memoizedProps && error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(committedLanes) || "instance"), instance.state !== committedLanes.memoizedState && error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", 
                      getComponentNameFromFiber(committedLanes) || "instance"));
                      if (committedLanes.mode & 2) {
                        try {
                          startLayoutEffectTimer(), instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        } finally {
                          recordLayoutEffectDuration(committedLanes);
                        }
                      } else {
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      }
                    }
                  }
                  var updateQueue = committedLanes.updateQueue;
                  null !== updateQueue && (committedLanes.type !== committedLanes.elementType || didWarnAboutReassigningProps || (instance.props !== committedLanes.memoizedProps && error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(committedLanes) || "instance"), instance.state !== committedLanes.memoizedState && 
                  error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(committedLanes) || "instance")), commitUpdateQueue(committedLanes, updateQueue, instance));
                  break;
                case 3:
                  var _updateQueue = committedLanes.updateQueue;
                  if (null !== _updateQueue) {
                    var _instance = null;
                    if (null !== committedLanes.child) {
                      switch(committedLanes.child.tag) {
                        case 5:
                          _instance = committedLanes.child.stateNode;
                          break;
                        case 1:
                          _instance = committedLanes.child.stateNode;
                      }
                    }
                    commitUpdateQueue(committedLanes, _updateQueue, _instance);
                  }
                  break;
                case 5:
                  var _instance2 = committedLanes.stateNode;
                  if (null === current && committedLanes.flags & 4) {
                    _instance = _instance2;
                    var newProps = committedLanes.memoizedProps;
                    switch(committedLanes.type) {
                      case "button":
                      case "input":
                      case "select":
                      case "textarea":
                        newProps.autoFocus && _instance.focus();
                        break;
                      case "img":
                        newProps.src && (_instance.src = newProps.src);
                    }
                  }
                  break;
                case 6:
                  break;
                case 4:
                  break;
                case 12:
                  var _finishedWork$memoize2 = committedLanes.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender, effectDuration = committedLanes.stateNode.effectDuration;
                  _instance = commitTime;
                  current = null === current ? "mount" : "update";
                  currentUpdateIsNested && (current = "nested-update");
                  "function" === typeof onRender && onRender(committedLanes.memoizedProps.id, current, committedLanes.actualDuration, committedLanes.treeBaseDuration, committedLanes.actualStartTime, _instance);
                  "function" === typeof onCommit && onCommit(committedLanes.memoizedProps.id, current, effectDuration, _instance);
                  enqueuePendingPassiveProfilerEffect(committedLanes);
                  var parentFiber = committedLanes.return;
                  a: for (; null !== parentFiber;) {
                    switch(parentFiber.tag) {
                      case 3:
                        parentFiber.stateNode.effectDuration += effectDuration;
                        break a;
                      case 12:
                        parentFiber.stateNode.effectDuration += effectDuration;
                        break a;
                    }
                    parentFiber = parentFiber.return;
                  }
                  break;
                case 13:
                  if (null === committedLanes.memoizedState) {
                    var current$jscomp$0 = committedLanes.alternate;
                    if (null !== current$jscomp$0) {
                      var prevState$jscomp$0 = current$jscomp$0.memoizedState;
                      if (null !== prevState$jscomp$0) {
                        var suspenseInstance = prevState$jscomp$0.dehydrated;
                        null !== suspenseInstance && retryIfBlockedOn(suspenseInstance);
                      }
                    }
                  }
                  break;
                case 19:
                case 17:
                case 21:
                case 22:
                case 23:
                case 25:
                  break;
                default:
                  throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            offscreenSubtreeWasHidden || committedLanes.flags & 512 && commitAttachRef(committedLanes);
          } catch (error) {
            captureCommitPhaseError(root, root.return, error);
          }
          resetCurrentFiber();
        }
        if (root === subtreeRoot) {
          nextEffect = null;
          break;
        }
        committedLanes = root.sibling;
        if (null !== committedLanes) {
          committedLanes.return = root.return;
          nextEffect = committedLanes;
          break;
        }
        nextEffect = root.return;
      }
    }
    function disappearLayoutEffects_complete(subtreeRoot) {
      for (; null !== nextEffect;) {
        var fiber = nextEffect;
        if (fiber === subtreeRoot) {
          nextEffect = null;
          break;
        }
        var sibling = fiber.sibling;
        if (null !== sibling) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          break;
        }
        nextEffect = fiber.return;
      }
    }
    function reappearLayoutEffects_complete(subtreeRoot) {
      for (; null !== nextEffect;) {
        var fiber = nextEffect;
        setCurrentFiber(fiber);
        try {
          var node = fiber;
          switch(node.tag) {
            case 0:
            case 11:
            case 15:
              if (node.mode & 2) {
                try {
                  startLayoutEffectTimer();
                  var current = node, nearestMountedAncestor = node.return;
                  try {
                    commitHookEffectListMount(Layout, current);
                  } catch (error) {
                    captureCommitPhaseError(current, nearestMountedAncestor, error);
                  }
                } finally {
                  recordLayoutEffectDuration(node);
                }
              } else {
                current = node;
                var nearestMountedAncestor$jscomp$0 = node.return;
                try {
                  commitHookEffectListMount(Layout, current);
                } catch (error) {
                  captureCommitPhaseError(current, nearestMountedAncestor$jscomp$0, error);
                }
              }
              break;
            case 1:
              var instance = node.stateNode;
              if ("function" === typeof instance.componentDidMount) {
                current = node;
                var nearestMountedAncestor$jscomp$1 = node.return;
                try {
                  instance.componentDidMount();
                } catch (error) {
                  captureCommitPhaseError(current, nearestMountedAncestor$jscomp$1, error);
                }
              }
              current = node;
              var nearestMountedAncestor$jscomp$2 = node.return;
              try {
                commitAttachRef(current);
              } catch (error) {
                captureCommitPhaseError(current, nearestMountedAncestor$jscomp$2, error);
              }
              break;
            case 5:
              current = node;
              var nearestMountedAncestor$jscomp$3 = node.return;
              try {
                commitAttachRef(current);
              } catch (error) {
                captureCommitPhaseError(current, nearestMountedAncestor$jscomp$3, error);
              }
          }
        } catch (error) {
          captureCommitPhaseError(fiber, fiber.return, error);
        }
        resetCurrentFiber();
        if (fiber === subtreeRoot) {
          nextEffect = null;
          break;
        }
        node = fiber.sibling;
        if (null !== node) {
          node.return = fiber.return;
          nextEffect = node;
          break;
        }
        nextEffect = fiber.return;
      }
    }
    function invokeLayoutEffectMountInDEV(fiber) {
      switch(fiber.tag) {
        case 0:
        case 11:
        case 15:
          try {
            commitHookEffectListMount(Layout | HasEffect, fiber);
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }
          break;
        case 1:
          var instance = fiber.stateNode;
          try {
            instance.componentDidMount();
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }
      }
    }
    function invokePassiveEffectMountInDEV(fiber) {
      switch(fiber.tag) {
        case 0:
        case 11:
        case 15:
          try {
            commitHookEffectListMount(Passive$1 | HasEffect, fiber);
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }
      }
    }
    function invokeLayoutEffectUnmountInDEV(fiber) {
      switch(fiber.tag) {
        case 0:
        case 11:
        case 15:
          try {
            commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }
          break;
        case 1:
          var instance = fiber.stateNode;
          "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(fiber, fiber.return, instance);
      }
    }
    function invokePassiveEffectUnmountInDEV(fiber) {
      switch(fiber.tag) {
        case 0:
        case 11:
        case 15:
          try {
            commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
          } catch (error) {
            captureCommitPhaseError(fiber, fiber.return, error);
          }
      }
    }
    function onCommitRoot$1() {
      commitHooks.forEach(function(commitHook) {
        return commitHook();
      });
    }
    function isConcurrentActEnvironment() {
      var isReactActEnvironmentGlobal = "undefined" !== typeof IS_REACT_ACT_ENVIRONMENT ? IS_REACT_ACT_ENVIRONMENT : void 0;
      isReactActEnvironmentGlobal || null === ReactCurrentActQueue.current || error("The current testing environment is not configured to support act(...)");
      return isReactActEnvironmentGlobal;
    }
    function resetRenderTimer() {
      workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function requestEventTime() {
      return (executionContext & (RenderContext | CommitContext)) !== NoContext ? now() : -1 !== currentEventTime ? currentEventTime : currentEventTime = now();
    }
    function requestUpdateLane(fiber) {
      if (0 === (fiber.mode & 1)) {
        return SyncLane;
      }
      if ((executionContext & RenderContext) !== NoContext && 0 !== workInProgressRootRenderLanes) {
        return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
      }
      if (null !== ReactCurrentBatchConfig$1.transition) {
        if (null !== ReactCurrentBatchConfig$3.transition) {
          var transition = ReactCurrentBatchConfig$3.transition;
          transition._updatedFibers || (transition._updatedFibers = new Set());
          transition._updatedFibers.add(fiber);
        }
        0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane());
        return currentEventTransitionLane;
      }
      fiber = currentUpdatePriority;
      if (0 !== fiber) {
        return fiber;
      }
      fiber = window.event;
      fiber = void 0 === fiber ? DefaultEventPriority : getEventPriority(fiber.type);
      return fiber;
    }
    function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
        throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      }
      nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT && (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."));
      isRunningInsertionEffect && error("useInsertionEffect must not schedule updates.");
      isFlushingPassiveEffects && (didScheduleUpdateDuringPassiveEffects = !0);
      markRootUpdated(root, lane, eventTime);
      if (0 !== (executionContext & RenderContext) && root === workInProgressRoot) {
        if (isRendering && !isUpdatingOpaqueValueInRenderPhase) {
          switch(fiber.tag) {
            case 0:
            case 11:
            case 15:
              root = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
              didWarnAboutUpdateInRenderForAnotherComponent.has(root) || (didWarnAboutUpdateInRenderForAnotherComponent.add(root), fiber = getComponentNameFromFiber(fiber) || "Unknown", error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", fiber, root, root));
              break;
            case 1:
              didWarnAboutUpdateInRender || (error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."), didWarnAboutUpdateInRender = !0);
          }
        }
      } else {
        isDevToolsPresent && addFiberToLanesMap(root, fiber, lane);
        a: {
          if (fiber.mode & 1) {
            if (!isConcurrentActEnvironment()) {
              break a;
            }
          } else {
            var JSCompiler_inline_result = "undefined" !== typeof IS_REACT_ACT_ENVIRONMENT ? IS_REACT_ACT_ENVIRONMENT : void 0;
            JSCompiler_inline_result = "undefined" !== typeof jest && !1 !== JSCompiler_inline_result;
            if (!JSCompiler_inline_result || executionContext !== NoContext || 0 !== fiber.tag && 11 !== fiber.tag && 15 !== fiber.tag) {
              break a;
            }
          }
          if (null === ReactCurrentActQueue$1.current) {
            JSCompiler_inline_result = current;
            try {
              setCurrentFiber(fiber), error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() \x3d\x3e {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
            } finally {
              JSCompiler_inline_result ? setCurrentFiber(fiber) : resetCurrentFiber();
            }
          }
        }
        root === workInProgressRoot && ((executionContext & RenderContext) === NoContext && (workInProgressRootInterleavedUpdatedLanes |= lane), workInProgressRootExitStatus === RootSuspendedWithDelay && markRootSuspended$1(root, workInProgressRootRenderLanes));
        ensureRootIsScheduled(root, eventTime);
        lane !== SyncLane || executionContext !== NoContext || 0 !== (fiber.mode & 1) || ReactCurrentActQueue$1.isBatchingLegacy || (resetRenderTimer(), includesLegacySyncCallbacks && flushSyncCallbacks());
      }
    }
    function ensureRootIsScheduled(root, currentTime) {
      var existingCallbackNode = root.callbackNode;
      markStarvedLanesAsExpired(root, currentTime);
      var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : 0);
      if (0 === nextLanes) {
        null !== existingCallbackNode && cancelCallback$1(existingCallbackNode), root.callbackNode = null, root.callbackPriority = 0;
      } else {
        currentTime = nextLanes & -nextLanes;
        var existingCallbackPriority = root.callbackPriority;
        if (existingCallbackPriority !== currentTime || null !== ReactCurrentActQueue$1.current && existingCallbackNode !== fakeActCallbackNode) {
          null != existingCallbackNode && cancelCallback$1(existingCallbackNode);
          if (currentTime === SyncLane) {
            0 === root.tag ? (null !== ReactCurrentActQueue$1.isBatchingLegacy && (ReactCurrentActQueue$1.didScheduleLegacyUpdate = !0), scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root))) : scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root)), null !== ReactCurrentActQueue$1.current ? ReactCurrentActQueue$1.current.push(flushSyncCallbacks) : scheduleMicrotask(function() {
              (executionContext & (RenderContext | CommitContext)) === NoContext && flushSyncCallbacks();
            }), existingCallbackNode = null;
          } else {
            switch(lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                existingCallbackNode = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                existingCallbackNode = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                existingCallbackNode = NormalPriority;
                break;
              case IdleEventPriority:
                existingCallbackNode = IdlePriority;
                break;
              default:
                existingCallbackNode = NormalPriority;
            }
            existingCallbackNode = scheduleCallback$1(existingCallbackNode, performConcurrentWorkOnRoot.bind(null, root));
          }
          root.callbackPriority = currentTime;
          root.callbackNode = existingCallbackNode;
        } else {
          null == existingCallbackNode && existingCallbackPriority !== SyncLane && error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function performConcurrentWorkOnRoot(root, didTimeout) {
      nestedUpdateScheduled = currentUpdateIsNested = !1;
      currentEventTime = -1;
      currentEventTransitionLane = 0;
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw Error("Should not already be working.");
      }
      var originalCallbackNode = root.callbackNode;
      if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode) {
        return null;
      }
      var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : 0);
      if (0 === lanes) {
        return null;
      }
      if (0 !== (lanes & (InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane)) || 0 !== (lanes & root.expiredLanes) || didTimeout) {
        didTimeout = renderRootSync(root, lanes);
      } else {
        didTimeout = lanes;
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== didTimeout) {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root.memoizedUpdaters;
            0 < memoizedUpdaters.size && (restorePendingUpdaters(root, workInProgressRootRenderLanes), memoizedUpdaters.clear());
            movePendingFibersToMemoized(root, didTimeout);
          }
          workInProgressTransitions = null;
          resetRenderTimer();
          prepareFreshStack(root, didTimeout);
        }
        markRenderStarted(didTimeout);
        do {
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root, thrownValue);
          }
        } while (1);
        resetContextDependencies();
        ReactCurrentDispatcher$2.current = prevDispatcher;
        executionContext = prevExecutionContext;
        null !== workInProgress ? (null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderYielded && injectedProfilingHooks.markRenderYielded(), didTimeout = RootInProgress) : (markRenderStopped(), workInProgressRoot = null, workInProgressRootRenderLanes = 0, didTimeout = workInProgressRootExitStatus);
      }
      if (didTimeout !== RootInProgress) {
        didTimeout === RootErrored && (prevExecutionContext = getLanesToRetrySynchronouslyOnError(root), 0 !== prevExecutionContext && (lanes = prevExecutionContext, didTimeout = recoverFromConcurrentError(root, prevExecutionContext)));
        if (didTimeout === RootFatalErrored) {
          throw originalCallbackNode = workInProgressRootFatalError, prepareFreshStack(root, 0), markRootSuspended$1(root, lanes), ensureRootIsScheduled(root, now()), originalCallbackNode;
        }
        if (didTimeout === RootDidNotComplete) {
          markRootSuspended$1(root, lanes);
        } else {
          prevExecutionContext = root.current.alternate;
          if (0 === (lanes & (InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane)) && !isRenderConsistentWithExternalStores(prevExecutionContext) && (didTimeout = renderRootSync(root, lanes), didTimeout === RootErrored && (prevDispatcher = getLanesToRetrySynchronouslyOnError(root), 0 !== prevDispatcher && (lanes = prevDispatcher, didTimeout = recoverFromConcurrentError(root, prevDispatcher))), didTimeout === RootFatalErrored)) {
            throw originalCallbackNode = workInProgressRootFatalError, prepareFreshStack(root, 0), markRootSuspended$1(root, lanes), ensureRootIsScheduled(root, now()), originalCallbackNode;
          }
          root.finishedWork = prevExecutionContext;
          root.finishedLanes = lanes;
          switch(didTimeout) {
            case RootInProgress:
            case RootFatalErrored:
              throw Error("Root did not complete. This is a bug in React.");
            case RootErrored:
              commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            case RootSuspended:
              markRootSuspended$1(root, lanes);
              if ((lanes & RetryLanes) === lanes && null === ReactCurrentActQueue$1.current && (didTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(), 10 < didTimeout)) {
                if (0 !== getNextLanes(root, 0)) {
                  break;
                }
                prevExecutionContext = root.suspendedLanes;
                if ((prevExecutionContext & lanes) !== lanes) {
                  requestEventTime();
                  root.pingedLanes |= root.suspendedLanes & prevExecutionContext;
                  break;
                }
                root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), didTimeout);
                break;
              }
              commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            case RootSuspendedWithDelay:
              markRootSuspended$1(root, lanes);
              if ((lanes & TransitionLanes) === lanes) {
                break;
              }
              if (null === ReactCurrentActQueue$1.current) {
                didTimeout = root.eventTimes;
                for (prevExecutionContext = -1; 0 < lanes;) {
                  memoizedUpdaters = 31 - clz32(lanes), prevDispatcher = 1 << memoizedUpdaters, memoizedUpdaters = didTimeout[memoizedUpdaters], memoizedUpdaters > prevExecutionContext && (prevExecutionContext = memoizedUpdaters), lanes &= ~prevDispatcher;
                }
                lanes = prevExecutionContext;
                lanes = now() - lanes;
                lanes = (120 > lanes ? 120 : 480 > lanes ? 480 : 1080 > lanes ? 1080 : 1920 > lanes ? 1920 : 3000 > lanes ? 3000 : 4320 > lanes ? 4320 : 1960 * ceil(lanes / 1960)) - lanes;
                if (10 < lanes) {
                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), lanes);
                  break;
                }
              }
              commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            case RootCompleted:
              commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            default:
              throw Error("Unknown root exit status.");
          }
        }
      }
      ensureRootIsScheduled(root, now());
      return root.callbackNode === originalCallbackNode ? performConcurrentWorkOnRoot.bind(null, root) : null;
    }
    function recoverFromConcurrentError(root, errorRetryLanes) {
      var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
      root.current.memoizedState.isDehydrated && (prepareFreshStack(root, errorRetryLanes).flags |= 256, error("An error occurred during hydration. The server HTML was replaced with client content in \x3c%s\x3e.", root.containerInfo.nodeName.toLowerCase()));
      root = renderRootSync(root, errorRetryLanes);
      root !== RootErrored && (errorRetryLanes = workInProgressRootRecoverableErrors, workInProgressRootRecoverableErrors = errorsFromFirstAttempt, null !== errorRetryLanes && queueRecoverableErrors(errorRetryLanes));
      return root;
    }
    function queueRecoverableErrors(errors) {
      null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = errors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
      for (var node = finishedWork;;) {
        if (node.flags & 16384) {
          var updateQueue = node.updateQueue;
          if (null !== updateQueue && (updateQueue = updateQueue.stores, null !== updateQueue)) {
            for (var i = 0; i < updateQueue.length; i++) {
              var check = updateQueue[i], getSnapshot = check.getSnapshot;
              check = check.value;
              try {
                if (!objectIs(getSnapshot(), check)) {
                  return !1;
                }
              } catch (error) {
                return !1;
              }
            }
          }
        }
        updateQueue = node.child;
        if (node.subtreeFlags & 16384 && null !== updateQueue) {
          updateQueue.return = node, node = updateQueue;
        } else {
          if (node === finishedWork) {
            break;
          }
          for (; null === node.sibling;) {
            if (null === node.return || node.return === finishedWork) {
              return !0;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      return !0;
    }
    function markRootSuspended$1(root, suspendedLanes) {
      suspendedLanes &= ~workInProgressRootPingedLanes;
      suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
      root.suspendedLanes |= suspendedLanes;
      root.pingedLanes &= ~suspendedLanes;
      for (root = root.expirationTimes; 0 < suspendedLanes;) {
        var index = 31 - clz32(suspendedLanes), lane = 1 << index;
        root[index] = -1;
        suspendedLanes &= ~lane;
      }
    }
    function performSyncWorkOnRoot(root) {
      currentUpdateIsNested = nestedUpdateScheduled;
      nestedUpdateScheduled = !1;
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw Error("Should not already be working.");
      }
      flushPassiveEffects();
      var lanes = getNextLanes(root, 0);
      if (0 === (lanes & SyncLane)) {
        return ensureRootIsScheduled(root, now()), null;
      }
      var exitStatus = renderRootSync(root, lanes);
      if (0 !== root.tag && exitStatus === RootErrored) {
        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
        0 !== errorRetryLanes && (lanes = errorRetryLanes, exitStatus = recoverFromConcurrentError(root, errorRetryLanes));
      }
      if (exitStatus === RootFatalErrored) {
        throw exitStatus = workInProgressRootFatalError, prepareFreshStack(root, 0), markRootSuspended$1(root, lanes), ensureRootIsScheduled(root, now()), exitStatus;
      }
      if (exitStatus === RootDidNotComplete) {
        throw Error("Root did not complete. This is a bug in React.");
      }
      root.finishedWork = root.current.alternate;
      root.finishedLanes = lanes;
      commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
      ensureRootIsScheduled(root, now());
      return null;
    }
    function flushRoot(root, lanes) {
      0 !== lanes && (markRootEntangled(root, lanes | SyncLane), ensureRootIsScheduled(root, now()), (executionContext & (RenderContext | CommitContext)) === NoContext && (resetRenderTimer(), flushSyncCallbacks()));
    }
    function batchedUpdates$1(fn, a) {
      var prevExecutionContext = executionContext;
      executionContext |= 1;
      try {
        return fn(a);
      } finally {
        executionContext = prevExecutionContext, executionContext !== NoContext || ReactCurrentActQueue$1.isBatchingLegacy || (resetRenderTimer(), includesLegacySyncCallbacks && flushSyncCallbacks());
      }
    }
    function flushSync(fn) {
      null !== rootWithPendingPassiveEffects && 0 === rootWithPendingPassiveEffects.tag && (executionContext & (RenderContext | CommitContext)) === NoContext && flushPassiveEffects();
      var prevExecutionContext = executionContext;
      executionContext |= 1;
      var prevTransition = ReactCurrentBatchConfig$3.transition, previousPriority = currentUpdatePriority;
      try {
        if (ReactCurrentBatchConfig$3.transition = null, currentUpdatePriority = DiscreteEventPriority, fn) {
          return fn();
        }
      } finally {
        currentUpdatePriority = previousPriority, ReactCurrentBatchConfig$3.transition = prevTransition, executionContext = prevExecutionContext, (executionContext & (RenderContext | CommitContext)) === NoContext && flushSyncCallbacks();
      }
    }
    function pushRenderLanes(fiber, lanes) {
      push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
      subtreeRenderLanes |= lanes;
    }
    function popRenderLanes(fiber) {
      subtreeRenderLanes = subtreeRenderLanesCursor.current;
      pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root, lanes) {
      root.finishedWork = null;
      root.finishedLanes = 0;
      var timeoutHandle = root.timeoutHandle;
      -1 !== timeoutHandle && (root.timeoutHandle = -1, cancelTimeout(timeoutHandle));
      if (null !== workInProgress) {
        for (timeoutHandle = workInProgress.return; null !== timeoutHandle;) {
          unwindInterruptedWork(timeoutHandle.alternate, timeoutHandle), timeoutHandle = timeoutHandle.return;
        }
      }
      workInProgressRoot = root;
      workInProgress = root = createWorkInProgress(root.current, null);
      workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
      workInProgressRootExitStatus = RootInProgress;
      workInProgressRootFatalError = null;
      workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = 0;
      workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
      if (null !== concurrentQueues) {
        for (lanes = 0; lanes < concurrentQueues.length; lanes++) {
          timeoutHandle = concurrentQueues[lanes];
          var lastInterleavedUpdate = timeoutHandle.interleaved;
          if (null !== lastInterleavedUpdate) {
            timeoutHandle.interleaved = null;
            var firstInterleavedUpdate = lastInterleavedUpdate.next, lastPendingUpdate = timeoutHandle.pending;
            if (null !== lastPendingUpdate) {
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = firstInterleavedUpdate;
              lastInterleavedUpdate.next = firstPendingUpdate;
            }
            timeoutHandle.pending = lastInterleavedUpdate;
          }
        }
        concurrentQueues = null;
      }
      ReactStrictModeWarnings.discardPendingWarnings();
      return root;
    }
    function handleError(root$jscomp$0, thrownValue) {
      do {
        var erroredWork = workInProgress;
        try {
          resetContextDependencies();
          resetHooksAfterThrow();
          resetCurrentFiber();
          ReactCurrentOwner$2.current = null;
          if (null === erroredWork || null === erroredWork.return) {
            workInProgressRootExitStatus = RootFatalErrored;
            workInProgressRootFatalError = thrownValue;
            workInProgress = null;
            break;
          }
          erroredWork.mode & 2 && stopProfilerTimerIfRunningAndRecordDelta(erroredWork, !0);
          markComponentRenderStopped();
          if (null !== thrownValue && "object" === typeof thrownValue && "function" === typeof thrownValue.then) {
            var wakeable = thrownValue;
            null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentSuspended && injectedProfilingHooks.markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
          } else {
            null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentErrored && injectedProfilingHooks.markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
          }
          a: {
            var root = root$jscomp$0, returnFiber = erroredWork.return, sourceFiber = erroredWork;
            wakeable = thrownValue;
            thrownValue = workInProgressRootRenderLanes;
            sourceFiber.flags |= 32768;
            isDevToolsPresent && restorePendingUpdaters(root, thrownValue);
            if (null !== wakeable && "object" === typeof wakeable && "function" === typeof wakeable.then) {
              var wakeable$jscomp$0 = wakeable, sourceFiber$jscomp$0 = sourceFiber, tag = sourceFiber$jscomp$0.tag;
              if (0 === (sourceFiber$jscomp$0.mode & 1) && (0 === tag || 11 === tag || 15 === tag)) {
                var currentSource = sourceFiber$jscomp$0.alternate;
                currentSource ? (sourceFiber$jscomp$0.updateQueue = currentSource.updateQueue, sourceFiber$jscomp$0.memoizedState = currentSource.memoizedState, sourceFiber$jscomp$0.lanes = currentSource.lanes) : (sourceFiber$jscomp$0.updateQueue = null, sourceFiber$jscomp$0.memoizedState = null);
              }
              isHydrating && sourceFiber.mode & 1 && (didSuspendOrErrorDEV = !0);
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (null !== suspenseBoundary) {
                suspenseBoundary.flags &= -257;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, thrownValue);
                suspenseBoundary.mode & 1 && attachPingListener(root, wakeable$jscomp$0, thrownValue);
                thrownValue = suspenseBoundary;
                wakeable = wakeable$jscomp$0;
                var wakeables = thrownValue.updateQueue;
                if (null === wakeables) {
                  var updateQueue = new Set();
                  updateQueue.add(wakeable);
                  thrownValue.updateQueue = updateQueue;
                } else {
                  wakeables.add(wakeable);
                }
                break a;
              } else {
                if (0 === (thrownValue & SyncLane)) {
                  attachPingListener(root, wakeable$jscomp$0, thrownValue);
                  renderDidSuspendDelayIfPossible();
                  break a;
                }
                wakeable = Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
              }
            } else {
              if (isHydrating && sourceFiber.mode & 1) {
                didSuspendOrErrorDEV = !0;
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (null !== _suspenseBoundary) {
                  0 === (_suspenseBoundary.flags & 65536) && (_suspenseBoundary.flags |= 256);
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, thrownValue);
                  queueHydrationError(createCapturedValueAtFiber(wakeable, sourceFiber));
                  break a;
                }
              }
            }
            root = wakeable = createCapturedValueAtFiber(wakeable, sourceFiber);
            workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored);
            null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [root] : workInProgressRootConcurrentErrors.push(root);
            root = returnFiber;
            do {
              switch(root.tag) {
                case 3:
                  root.flags |= 65536;
                  thrownValue &= -thrownValue;
                  root.lanes |= thrownValue;
                  var update = createRootErrorUpdate(root, wakeable, thrownValue);
                  enqueueCapturedUpdate(root, update);
                  break a;
                case 1:
                  sourceFiber = wakeable;
                  var ctor = root.type, instance = root.stateNode;
                  if (0 === (root.flags & 128) && ("function" === typeof ctor.getDerivedStateFromError || null !== instance && "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance)))) {
                    root.flags |= 65536;
                    thrownValue &= -thrownValue;
                    root.lanes |= thrownValue;
                    var _update = createClassErrorUpdate(root, sourceFiber, thrownValue);
                    enqueueCapturedUpdate(root, _update);
                    break a;
                  }
              }
              root = root.return;
            } while (null !== root);
          }
          completeUnitOfWork(erroredWork);
        } catch (yetAnotherThrownValue) {
          thrownValue = yetAnotherThrownValue;
          workInProgress === erroredWork && null !== erroredWork && (workInProgress = erroredWork = erroredWork.return);
          continue;
        }
        break;
      } while (1);
    }
    function pushDispatcher() {
      var prevDispatcher = ReactCurrentDispatcher$2.current;
      ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
      return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
    }
    function renderDidSuspendDelayIfPossible() {
      if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
        workInProgressRootExitStatus = RootSuspendedWithDelay;
      }
      null === workInProgressRoot || 0 === (workInProgressRootSkippedLanes & 268435455) && 0 === (workInProgressRootInterleavedUpdatedLanes & 268435455) || markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderRootSync(root, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
        if (isDevToolsPresent) {
          var memoizedUpdaters = root.memoizedUpdaters;
          0 < memoizedUpdaters.size && (restorePendingUpdaters(root, workInProgressRootRenderLanes), memoizedUpdaters.clear());
          movePendingFibersToMemoized(root, lanes);
        }
        workInProgressTransitions = null;
        prepareFreshStack(root, lanes);
      }
      markRenderStarted(lanes);
      do {
        try {
          workLoopSync();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (1);
      resetContextDependencies();
      executionContext = prevExecutionContext;
      ReactCurrentDispatcher$2.current = prevDispatcher;
      if (null !== workInProgress) {
        throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
      }
      markRenderStopped();
      workInProgressRoot = null;
      workInProgressRootRenderLanes = 0;
      return workInProgressRootExitStatus;
    }
    function workLoopSync() {
      for (; null !== workInProgress;) {
        performUnitOfWork(workInProgress);
      }
    }
    function workLoopConcurrent() {
      for (; null !== workInProgress && !shouldYield();) {
        performUnitOfWork(workInProgress);
      }
    }
    function performUnitOfWork(unitOfWork) {
      var current = unitOfWork.alternate;
      setCurrentFiber(unitOfWork);
      0 !== (unitOfWork.mode & 2) ? (startProfilerTimer(unitOfWork), current = beginWork$1(current, unitOfWork, subtreeRenderLanes), stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, !0)) : current = beginWork$1(current, unitOfWork, subtreeRenderLanes);
      resetCurrentFiber();
      unitOfWork.memoizedProps = unitOfWork.pendingProps;
      null === current ? completeUnitOfWork(unitOfWork) : workInProgress = current;
      ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
      var completedWork = unitOfWork;
      do {
        var current = completedWork.alternate;
        unitOfWork = completedWork.return;
        if (0 === (completedWork.flags & 32768)) {
          if (setCurrentFiber(completedWork), 0 === (completedWork.mode & 2) ? current = completeWork(current, completedWork, subtreeRenderLanes) : (startProfilerTimer(completedWork), current = completeWork(current, completedWork, subtreeRenderLanes), stopProfilerTimerIfRunningAndRecordDelta(completedWork, !1)), resetCurrentFiber(), null !== current) {
            workInProgress = current;
            return;
          }
        } else {
          current = unwindWork(current, completedWork);
          if (null !== current) {
            current.flags &= 32767;
            workInProgress = current;
            return;
          }
          if (0 !== (completedWork.mode & 2)) {
            stopProfilerTimerIfRunningAndRecordDelta(completedWork, !1);
            current = completedWork.actualDuration;
            for (var child = completedWork.child; null !== child;) {
              current += child.actualDuration, child = child.sibling;
            }
            completedWork.actualDuration = current;
          }
          if (null !== unitOfWork) {
            unitOfWork.flags |= 32768, unitOfWork.subtreeFlags = 0, unitOfWork.deletions = null;
          } else {
            workInProgressRootExitStatus = RootDidNotComplete;
            workInProgress = null;
            return;
          }
        }
        completedWork = completedWork.sibling;
        if (null !== completedWork) {
          workInProgress = completedWork;
          return;
        }
        workInProgress = completedWork = unitOfWork;
      } while (null !== completedWork);
      workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootCompleted);
    }
    function commitRoot(root, recoverableErrors, transitions) {
      var previousUpdateLanePriority = currentUpdatePriority, prevTransition = ReactCurrentBatchConfig$3.transition;
      try {
        ReactCurrentBatchConfig$3.transition = null, currentUpdatePriority = DiscreteEventPriority, commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
      } finally {
        ReactCurrentBatchConfig$3.transition = prevTransition, currentUpdatePriority = previousUpdateLanePriority;
      }
      return null;
    }
    function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
      do {
        flushPassiveEffects();
      } while (null !== rootWithPendingPassiveEffects);
      ReactStrictModeWarnings.flushLegacyContextWarning();
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw Error("Should not already be working.");
      }
      transitions = root.finishedWork;
      var lanes = root.finishedLanes;
      null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markCommitStarted && injectedProfilingHooks.markCommitStarted(lanes);
      if (null === transitions) {
        return markCommitStopped(), null;
      }
      0 === lanes && error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
      root.finishedWork = null;
      root.finishedLanes = 0;
      if (transitions === root.current) {
        throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
      }
      root.callbackNode = null;
      root.callbackPriority = 0;
      var remainingLanes = transitions.lanes | transitions.childLanes;
      markRootFinished(root, remainingLanes);
      root === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
      0 === (transitions.subtreeFlags & 2064) && 0 === (transitions.flags & 2064) || rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, scheduleCallback$1(NormalPriority, function() {
        flushPassiveEffects();
        return null;
      }));
      remainingLanes = 0 !== (transitions.flags & 15990);
      if (0 !== (transitions.subtreeFlags & 15990) || remainingLanes) {
        remainingLanes = ReactCurrentBatchConfig$3.transition;
        ReactCurrentBatchConfig$3.transition = null;
        var previousPriority = currentUpdatePriority;
        currentUpdatePriority = DiscreteEventPriority;
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        ReactCurrentOwner$2.current = null;
        commitBeforeMutationEffects(root, transitions);
        commitTime = now$1();
        commitMutationEffects(root, transitions, lanes);
        restoreSelection(selectionInformation);
        _enabled = !!eventsEnabled;
        selectionInformation = eventsEnabled = null;
        root.current = transitions;
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markLayoutEffectsStarted && injectedProfilingHooks.markLayoutEffectsStarted(lanes);
        commitLayoutEffects(transitions, root, lanes);
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markLayoutEffectsStopped && injectedProfilingHooks.markLayoutEffectsStopped();
        requestPaint();
        executionContext = prevExecutionContext;
        currentUpdatePriority = previousPriority;
        ReactCurrentBatchConfig$3.transition = remainingLanes;
      } else {
        root.current = transitions, commitTime = now$1();
      }
      (previousPriority = rootDoesHavePassiveEffects) ? (rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = root, pendingPassiveEffectsLanes = lanes) : (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null);
      remainingLanes = root.pendingLanes;
      0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
      previousPriority || commitDoubleInvokeEffectsInDEV(root.current, !1);
      onCommitRoot(transitions.stateNode, renderPriorityLevel);
      isDevToolsPresent && root.memoizedUpdaters.clear();
      onCommitRoot$1();
      ensureRootIsScheduled(root, now());
      if (null !== recoverableErrors) {
        for (renderPriorityLevel = root.onRecoverableError, transitions = 0; transitions < recoverableErrors.length; transitions++) {
          lanes = recoverableErrors[transitions], renderPriorityLevel(lanes.value, {componentStack:lanes.stack, digest:lanes.digest});
        }
      }
      if (hasUncaughtError) {
        throw hasUncaughtError = !1, root = firstUncaughtError, firstUncaughtError = null, root;
      }
      0 !== (pendingPassiveEffectsLanes & SyncLane) && 0 !== root.tag && flushPassiveEffects();
      remainingLanes = root.pendingLanes;
      0 !== (remainingLanes & SyncLane) ? (nestedUpdateScheduled = !0, root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root)) : nestedUpdateCount = 0;
      flushSyncCallbacks();
      markCommitStopped();
      return null;
    }
    function flushPassiveEffects() {
      if (null !== rootWithPendingPassiveEffects) {
        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes), priority = 0 === DefaultEventPriority || DefaultEventPriority > renderPriority ? DefaultEventPriority : renderPriority;
        renderPriority = ReactCurrentBatchConfig$3.transition;
        var previousPriority = currentUpdatePriority;
        try {
          ReactCurrentBatchConfig$3.transition = null;
          currentUpdatePriority = priority;
          if (null === rootWithPendingPassiveEffects) {
            var JSCompiler_inline_result = !1;
          } else {
            priority = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = 0;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw Error("Cannot flush passive effects while already rendering.");
            }
            isFlushingPassiveEffects = !0;
            didScheduleUpdateDuringPassiveEffects = !1;
            null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markPassiveEffectsStarted && injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            lanes = executionContext;
            executionContext |= CommitContext;
            for (nextEffect = priority.current; null !== nextEffect;) {
              var fiber = nextEffect, child = fiber.child;
              if (0 !== (nextEffect.flags & 16)) {
                var deletions = fiber.deletions;
                if (null !== deletions) {
                  for (var i = 0; i < deletions.length; i++) {
                    for (var fiberToDelete = deletions[i], deletedSubtreeRoot = nextEffect = fiberToDelete, nearestMountedAncestor = fiber; null !== nextEffect;) {
                      var fiber$jscomp$0 = nextEffect;
                      setCurrentFiber(fiber$jscomp$0);
                      var current = fiber$jscomp$0, nearestMountedAncestor$jscomp$0 = nearestMountedAncestor;
                      switch(current.tag) {
                        case 0:
                        case 11:
                        case 15:
                          current.mode & 2 ? (passiveEffectStartTime = now$1(), commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor$jscomp$0), recordPassiveEffectDuration(current)) : commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor$jscomp$0);
                      }
                      resetCurrentFiber();
                      var child$jscomp$0 = fiber$jscomp$0.child;
                      if (null !== child$jscomp$0) {
                        child$jscomp$0.return = fiber$jscomp$0, nextEffect = child$jscomp$0;
                      } else {
                        for (fiber$jscomp$0 = deletedSubtreeRoot; null !== nextEffect;) {
                          current = nextEffect;
                          var sibling = current.sibling, returnFiber = current.return;
                          detachFiberAfterEffects(current);
                          if (current === fiber$jscomp$0) {
                            nextEffect = null;
                            break;
                          }
                          if (null !== sibling) {
                            sibling.return = returnFiber;
                            nextEffect = sibling;
                            break;
                          }
                          nextEffect = returnFiber;
                        }
                      }
                    }
                  }
                  var previousFiber = fiber.alternate;
                  if (null !== previousFiber) {
                    var detachedChild = previousFiber.child;
                    if (null !== detachedChild) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (null !== detachedChild);
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if (0 !== (fiber.subtreeFlags & 2064) && null !== child) {
                child.return = fiber, nextEffect = child;
              } else {
                b: {
                  for (; null !== nextEffect;) {
                    fiber = nextEffect;
                    if (0 !== (fiber.flags & 2048)) {
                      setCurrentFiber(fiber);
                      i = fiber;
                      switch(i.tag) {
                        case 0:
                        case 11:
                        case 15:
                          i.mode & 2 ? (passiveEffectStartTime = now$1(), commitHookEffectListUnmount(Passive$1 | HasEffect, i, i.return), recordPassiveEffectDuration(i)) : commitHookEffectListUnmount(Passive$1 | HasEffect, i, i.return);
                      }
                      resetCurrentFiber();
                    }
                    var sibling$jscomp$0 = fiber.sibling;
                    if (null !== sibling$jscomp$0) {
                      sibling$jscomp$0.return = fiber.return;
                      nextEffect = sibling$jscomp$0;
                      break b;
                    }
                    nextEffect = fiber.return;
                  }
                }
              }
            }
            var finishedWork = priority.current;
            for (nextEffect = finishedWork; null !== nextEffect;) {
              child = nextEffect;
              var firstChild = child.child;
              if (0 !== (child.subtreeFlags & 2064) && null !== firstChild) {
                firstChild.return = child, nextEffect = firstChild;
              } else {
                b: {
                  for (child = finishedWork; null !== nextEffect;) {
                    deletions = nextEffect;
                    if (0 !== (deletions.flags & 2048)) {
                      setCurrentFiber(deletions);
                      try {
                        switch(fiberToDelete = deletions, fiberToDelete.tag) {
                          case 0:
                          case 11:
                          case 15:
                            if (fiberToDelete.mode & 2) {
                              passiveEffectStartTime = now$1();
                              try {
                                commitHookEffectListMount(Passive$1 | HasEffect, fiberToDelete);
                              } finally {
                                recordPassiveEffectDuration(fiberToDelete);
                              }
                            } else {
                              commitHookEffectListMount(Passive$1 | HasEffect, fiberToDelete);
                            }
                        }
                      } catch (error) {
                        captureCommitPhaseError(deletions, deletions.return, error);
                      }
                      resetCurrentFiber();
                    }
                    if (deletions === child) {
                      nextEffect = null;
                      break b;
                    }
                    var sibling$jscomp$1 = deletions.sibling;
                    if (null !== sibling$jscomp$1) {
                      sibling$jscomp$1.return = deletions.return;
                      nextEffect = sibling$jscomp$1;
                      break b;
                    }
                    nextEffect = deletions.return;
                  }
                }
              }
            }
            finishedWork = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (firstChild = 0; firstChild < finishedWork.length; firstChild++) {
              var finishedWork$jscomp$0 = finishedWork[firstChild];
              if (0 !== (finishedWork$jscomp$0.flags & 4)) {
                switch(finishedWork$jscomp$0.tag) {
                  case 12:
                    var passiveEffectDuration = finishedWork$jscomp$0.stateNode.passiveEffectDuration, _finishedWork$memoize = finishedWork$jscomp$0.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    sibling$jscomp$1 = commitTime;
                    var phase = null === finishedWork$jscomp$0.alternate ? "mount" : "update";
                    currentUpdateIsNested && (phase = "nested-update");
                    "function" === typeof onPostCommit && onPostCommit(id, phase, passiveEffectDuration, sibling$jscomp$1);
                    var parentFiber = finishedWork$jscomp$0.return;
                    b: for (; null !== parentFiber;) {
                      switch(parentFiber.tag) {
                        case 3:
                          parentFiber.stateNode.passiveEffectDuration += passiveEffectDuration;
                          break b;
                        case 12:
                          parentFiber.stateNode.passiveEffectDuration += passiveEffectDuration;
                          break b;
                      }
                      parentFiber = parentFiber.return;
                    }
                }
              }
            }
            null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markPassiveEffectsStopped && injectedProfilingHooks.markPassiveEffectsStopped();
            commitDoubleInvokeEffectsInDEV(priority.current, !0);
            executionContext = lanes;
            flushSyncCallbacks();
            didScheduleUpdateDuringPassiveEffects ? priority === rootWithPassiveNestedUpdates ? nestedPassiveUpdateCount++ : (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = priority) : nestedPassiveUpdateCount = 0;
            didScheduleUpdateDuringPassiveEffects = isFlushingPassiveEffects = !1;
            if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot) {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, priority);
              } catch (err) {
                hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
              }
            }
            var stateNode = priority.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
            JSCompiler_inline_result = !0;
          }
          return JSCompiler_inline_result;
        } finally {
          currentUpdatePriority = previousPriority, ReactCurrentBatchConfig$3.transition = renderPriority;
        }
      }
      return !1;
    }
    function enqueuePendingPassiveProfilerEffect(fiber) {
      pendingPassiveProfilerEffects.push(fiber);
      rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, scheduleCallback$1(NormalPriority, function() {
        flushPassiveEffects();
        return null;
      }));
    }
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
      sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
      sourceFiber = createRootErrorUpdate(rootFiber, sourceFiber, SyncLane);
      rootFiber = enqueueUpdate(rootFiber, sourceFiber, SyncLane);
      sourceFiber = requestEventTime();
      null !== rootFiber && (markRootUpdated(rootFiber, SyncLane, sourceFiber), ensureRootIsScheduled(rootFiber, sourceFiber));
    }
    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
      reportUncaughtErrorInDEV(error$1);
      isRunningInsertionEffect = !1;
      if (3 === sourceFiber.tag) {
        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
      } else {
        for (; null !== nearestMountedAncestor;) {
          if (3 === nearestMountedAncestor.tag) {
            captureCommitPhaseErrorOnRoot(nearestMountedAncestor, sourceFiber, error$1);
            return;
          }
          if (1 === nearestMountedAncestor.tag) {
            var instance = nearestMountedAncestor.stateNode;
            if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
              sourceFiber = createCapturedValueAtFiber(error$1, sourceFiber);
              sourceFiber = createClassErrorUpdate(nearestMountedAncestor, sourceFiber, SyncLane);
              nearestMountedAncestor = enqueueUpdate(nearestMountedAncestor, sourceFiber, SyncLane);
              sourceFiber = requestEventTime();
              null !== nearestMountedAncestor && (markRootUpdated(nearestMountedAncestor, SyncLane, sourceFiber), ensureRootIsScheduled(nearestMountedAncestor, sourceFiber));
              return;
            }
          }
          nearestMountedAncestor = nearestMountedAncestor.return;
        }
        error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
      }
    }
    function pingSuspendedRoot(root, wakeable, pingedLanes) {
      var pingCache = root.pingCache;
      null !== pingCache && pingCache.delete(wakeable);
      wakeable = requestEventTime();
      root.pingedLanes |= root.suspendedLanes & pingedLanes;
      0 !== root.tag && isConcurrentActEnvironment() && null === ReactCurrentActQueue$1.current && error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() \x3d\x3e {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
      workInProgressRoot === root && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && (workInProgressRootRenderLanes & RetryLanes) === workInProgressRootRenderLanes && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? prepareFreshStack(root, 0) : workInProgressRootPingedLanes |= pingedLanes);
      ensureRootIsScheduled(root, wakeable);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
      0 === retryLane && (0 === (boundaryFiber.mode & 1) ? retryLane = SyncLane : (retryLane = nextRetryLane, nextRetryLane <<= 1, 0 === (nextRetryLane & RetryLanes) && (nextRetryLane = 4194304)));
      var eventTime = requestEventTime();
      boundaryFiber = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
      null !== boundaryFiber && (markRootUpdated(boundaryFiber, retryLane, eventTime), ensureRootIsScheduled(boundaryFiber, eventTime));
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
      var suspenseState = boundaryFiber.memoizedState, retryLane = 0;
      null !== suspenseState && (retryLane = suspenseState.retryLane);
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
      var retryLane = 0;
      switch(boundaryFiber.tag) {
        case 13:
          var retryCache = boundaryFiber.stateNode;
          var suspenseState = boundaryFiber.memoizedState;
          null !== suspenseState && (retryLane = suspenseState.retryLane);
          break;
        case 19:
          retryCache = boundaryFiber.stateNode;
          break;
        default:
          throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
      }
      null !== retryCache && retryCache.delete(wakeable);
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
      setCurrentFiber(fiber);
      invokeEffectsInDev(fiber, 16777216, invokeLayoutEffectUnmountInDEV);
      hasPassiveEffects && invokeEffectsInDev(fiber, 33554432, invokePassiveEffectUnmountInDEV);
      invokeEffectsInDev(fiber, 16777216, invokeLayoutEffectMountInDEV);
      hasPassiveEffects && invokeEffectsInDev(fiber, 33554432, invokePassiveEffectMountInDEV);
      resetCurrentFiber();
    }
    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
      for (var subtreeRoot = null; null !== firstChild;) {
        var primarySubtreeFlag = firstChild.subtreeFlags & fiberFlags;
        firstChild !== subtreeRoot && null !== firstChild.child && 0 !== primarySubtreeFlag ? firstChild = firstChild.child : (0 !== (firstChild.flags & fiberFlags) && invokeEffectFn(firstChild), firstChild = null !== firstChild.sibling ? firstChild.sibling : subtreeRoot = firstChild.return);
      }
    }
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
      if ((executionContext & RenderContext) === NoContext && fiber.mode & 1) {
        var tag = fiber.tag;
        if (2 === tag || 3 === tag || 1 === tag || 0 === tag || 11 === tag || 14 === tag || 15 === tag) {
          tag = getComponentNameFromFiber(fiber) || "ReactComponent";
          if (null !== didWarnStateUpdateForNotYetMountedComponent) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(tag)) {
              return;
            }
            didWarnStateUpdateForNotYetMountedComponent.add(tag);
          } else {
            didWarnStateUpdateForNotYetMountedComponent = new Set([tag]);
          }
          tag = current;
          try {
            setCurrentFiber(fiber), error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
          } finally {
            tag ? setCurrentFiber(fiber) : resetCurrentFiber();
          }
        }
      }
    }
    function restorePendingUpdaters(root, lanes) {
      isDevToolsPresent && root.memoizedUpdaters.forEach(function(schedulingFiber) {
        addFiberToLanesMap(root, schedulingFiber, lanes);
      });
    }
    function scheduleCallback$1(priorityLevel, callback) {
      var actQueue = ReactCurrentActQueue$1.current;
      return null !== actQueue ? (actQueue.push(callback), fakeActCallbackNode) : scheduleCallback(priorityLevel, callback);
    }
    function cancelCallback$1(callbackNode) {
      if (callbackNode !== fakeActCallbackNode) {
        return cancelCallback(callbackNode);
      }
    }
    function resolveFunctionForHotReloading(type) {
      if (null === resolveFamily) {
        return type;
      }
      var family = resolveFamily(type);
      return void 0 === family ? type : family.current;
    }
    function resolveForwardRefForHotReloading(type) {
      if (null === resolveFamily) {
        return type;
      }
      var family = resolveFamily(type);
      return void 0 === family ? null !== type && void 0 !== type && "function" === typeof type.render && (family = resolveFunctionForHotReloading(type.render), type.render !== family) ? (family = {$$typeof:REACT_FORWARD_REF_TYPE, render:family}, void 0 !== type.displayName && (family.displayName = type.displayName), family) : type : family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
      if (null === resolveFamily) {
        return !1;
      }
      var prevType = fiber.elementType;
      element = element.type;
      var needsCompareFamilies = !1, $$typeofNextType = "object" === typeof element && null !== element ? element.$$typeof : null;
      switch(fiber.tag) {
        case 1:
          "function" === typeof element && (needsCompareFamilies = !0);
          break;
        case 0:
          "function" === typeof element ? needsCompareFamilies = !0 : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = !0);
          break;
        case 11:
          $$typeofNextType === REACT_FORWARD_REF_TYPE ? needsCompareFamilies = !0 : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = !0);
          break;
        case 14:
        case 15:
          $$typeofNextType === REACT_MEMO_TYPE ? needsCompareFamilies = !0 : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = !0);
          break;
        default:
          return !1;
      }
      return needsCompareFamilies && (fiber = resolveFamily(prevType), void 0 !== fiber && fiber === resolveFamily(element)) ? !0 : !1;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
      null !== resolveFamily && "function" === typeof WeakSet && (null === failedBoundaries && (failedBoundaries = new WeakSet()), failedBoundaries.add(fiber));
    }
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
      var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type, candidateType = null;
      switch(tag) {
        case 0:
        case 15:
        case 1:
          candidateType = type;
          break;
        case 11:
          candidateType = type.render;
      }
      if (null === resolveFamily) {
        throw Error("Expected resolveFamily to be set during hot reload.");
      }
      var needsRender = !1;
      type = !1;
      null !== candidateType && (candidateType = resolveFamily(candidateType), void 0 !== candidateType && (staleFamilies.has(candidateType) ? type = !0 : updatedFamilies.has(candidateType) && (1 === tag ? type = !0 : needsRender = !0)));
      null !== failedBoundaries && (failedBoundaries.has(fiber) || null !== alternate && failedBoundaries.has(alternate)) && (type = !0);
      type && (fiber._debugNeedsRemount = !0);
      if (type || needsRender) {
        alternate = markUpdateLaneFromFiberToRoot(fiber, SyncLane), null !== alternate && scheduleUpdateOnFiber(alternate, fiber, SyncLane, -1);
      }
      null === child || type || scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
      null !== sibling && scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
      var child = fiber.child, sibling = fiber.sibling, type = fiber.type, candidateType = null;
      switch(fiber.tag) {
        case 0:
        case 15:
        case 1:
          candidateType = type;
          break;
        case 11:
          candidateType = type.render;
      }
      type = !1;
      null !== candidateType && types.has(candidateType) && (type = !0);
      if (type) {
        a: {
          b: {
            for (child = fiber, candidateType = !1;;) {
              if (5 === child.tag) {
                candidateType = !0, hostInstances.add(child.stateNode);
              } else if (null !== child.child) {
                child.child.return = child;
                child = child.child;
                continue;
              }
              if (child === fiber) {
                child = candidateType;
                break b;
              }
              for (; null === child.sibling;) {
                if (null === child.return || child.return === fiber) {
                  child = candidateType;
                  break b;
                }
                child = child.return;
              }
              child.sibling.return = child.return;
              child = child.sibling;
            }
          }
          if (!child) {
            for (;;) {
              switch(fiber.tag) {
                case 5:
                  hostInstances.add(fiber.stateNode);
                  break a;
                case 4:
                  hostInstances.add(fiber.stateNode.containerInfo);
                  break a;
                case 3:
                  hostInstances.add(fiber.stateNode.containerInfo);
                  break a;
              }
              if (null === fiber.return) {
                throw Error("Expected to reach root first.");
              }
              fiber = fiber.return;
            }
          }
        }
      } else {
        null !== child && findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
      }
      null !== sibling && findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function FiberNode(tag, pendingProps, key, mode) {
      this.tag = tag;
      this.key = key;
      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = pendingProps;
      this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
      this.mode = mode;
      this.subtreeFlags = this.flags = 0;
      this.deletions = null;
      this.childLanes = this.lanes = 0;
      this.alternate = null;
      this.actualDuration = 0;
      this.actualStartTime = -1;
      this.treeBaseDuration = this.selfBaseDuration = 0;
      this._debugOwner = this._debugSource = null;
      this._debugNeedsRemount = !1;
      this._debugHookTypes = null;
      hasBadMapPolyfill || "function" !== typeof Object.preventExtensions || Object.preventExtensions(this);
    }
    function shouldConstruct$1(Component) {
      Component = Component.prototype;
      return !(!Component || !Component.isReactComponent);
    }
    function resolveLazyComponentTag(Component) {
      if ("function" === typeof Component) {
        return shouldConstruct$1(Component) ? 1 : 0;
      }
      if (void 0 !== Component && null !== Component) {
        Component = Component.$$typeof;
        if (Component === REACT_FORWARD_REF_TYPE) {
          return 11;
        }
        if (Component === REACT_MEMO_TYPE) {
          return 14;
        }
      }
      return 2;
    }
    function createWorkInProgress(current, pendingProps) {
      var workInProgress = current.alternate;
      null === workInProgress ? (workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress._debugSource = current._debugSource, workInProgress._debugOwner = current._debugOwner, workInProgress._debugHookTypes = current._debugHookTypes, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = 
      pendingProps, workInProgress.type = current.type, workInProgress.flags = 0, workInProgress.subtreeFlags = 0, workInProgress.deletions = null, workInProgress.actualDuration = 0, workInProgress.actualStartTime = -1);
      workInProgress.flags = current.flags & 14680064;
      workInProgress.childLanes = current.childLanes;
      workInProgress.lanes = current.lanes;
      workInProgress.child = current.child;
      workInProgress.memoizedProps = current.memoizedProps;
      workInProgress.memoizedState = current.memoizedState;
      workInProgress.updateQueue = current.updateQueue;
      pendingProps = current.dependencies;
      workInProgress.dependencies = null === pendingProps ? null : {lanes:pendingProps.lanes, firstContext:pendingProps.firstContext};
      workInProgress.sibling = current.sibling;
      workInProgress.index = current.index;
      workInProgress.ref = current.ref;
      workInProgress.selfBaseDuration = current.selfBaseDuration;
      workInProgress.treeBaseDuration = current.treeBaseDuration;
      workInProgress._debugNeedsRemount = current._debugNeedsRemount;
      switch(workInProgress.tag) {
        case 2:
        case 0:
        case 15:
          workInProgress.type = resolveFunctionForHotReloading(current.type);
          break;
        case 1:
          workInProgress.type = resolveFunctionForHotReloading(current.type);
          break;
        case 11:
          workInProgress.type = resolveForwardRefForHotReloading(current.type);
      }
      return workInProgress;
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
      var fiberTag = 2, resolvedType = type;
      if ("function" === typeof type) {
        shouldConstruct$1(type) && (fiberTag = 1), resolvedType = resolveFunctionForHotReloading(resolvedType);
      } else if ("string" === typeof type) {
        fiberTag = 5;
      } else {
        a: {
          switch(type) {
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_STRICT_MODE_TYPE:
              fiberTag = 8;
              mode |= 8;
              0 !== (mode & 1) && (mode |= 16);
              break;
            case REACT_PROFILER_TYPE:
              return type = mode, "string" !== typeof pendingProps.id && error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id), type = createFiber(12, pendingProps, key, type | 2), type.elementType = REACT_PROFILER_TYPE, type.lanes = lanes, type.stateNode = {effectDuration:0, passiveEffectDuration:0}, type;
            case REACT_SUSPENSE_TYPE:
              return type = createFiber(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE, type.lanes = lanes, type;
            case REACT_SUSPENSE_LIST_TYPE:
              return type = createFiber(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.lanes = lanes, type;
            case REACT_OFFSCREEN_TYPE:
              return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            default:
              if ("object" === typeof type && null !== type) {
                switch(type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                    fiberTag = 10;
                    break a;
                  case REACT_CONTEXT_TYPE:
                    fiberTag = 9;
                    break a;
                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = 11;
                    resolvedType = resolveForwardRefForHotReloading(resolvedType);
                    break a;
                  case REACT_MEMO_TYPE:
                    fiberTag = 14;
                    break a;
                  case REACT_LAZY_TYPE:
                    fiberTag = 16;
                    resolvedType = null;
                    break a;
                }
              }
              lanes = "";
              if (void 0 === type || "object" === typeof type && null !== type && 0 === Object.keys(type).length) {
                lanes += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              (owner = owner ? getComponentNameFromFiber(owner) : null) && (lanes += "\n\nCheck the render method of `" + owner + "`.");
              throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((null == type ? type : typeof type) + "." + lanes));
          }
        }
      }
      key = createFiber(fiberTag, pendingProps, key, mode);
      key.elementType = type;
      key.type = resolvedType;
      key.lanes = lanes;
      key._debugOwner = owner;
      return key;
    }
    function createFiberFromElement(element, mode, lanes) {
      mode = createFiberFromTypeAndProps(element.type, element.key, element.props, element._owner, mode, lanes);
      mode._debugSource = element._source;
      mode._debugOwner = element._owner;
      return mode;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
      elements = createFiber(7, elements, key, mode);
      elements.lanes = lanes;
      return elements;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
      pendingProps = createFiber(22, pendingProps, key, mode);
      pendingProps.elementType = REACT_OFFSCREEN_TYPE;
      pendingProps.lanes = lanes;
      pendingProps.stateNode = {isHidden:!1};
      return pendingProps;
    }
    function createFiberFromText(content, mode, lanes) {
      content = createFiber(6, content, null, mode);
      content.lanes = lanes;
      return content;
    }
    function createFiberFromPortal(portal, mode, lanes) {
      mode = createFiber(4, null !== portal.children ? portal.children : [], portal.key, mode);
      mode.lanes = lanes;
      mode.stateNode = {containerInfo:portal.containerInfo, pendingChildren:null, implementation:portal.implementation};
      return mode;
    }
    function assignFiberPropertiesInDEV(target, source) {
      null === target && (target = createFiber(2, null, null, 0));
      target.tag = source.tag;
      target.key = source.key;
      target.elementType = source.elementType;
      target.type = source.type;
      target.stateNode = source.stateNode;
      target.return = source.return;
      target.child = source.child;
      target.sibling = source.sibling;
      target.index = source.index;
      target.ref = source.ref;
      target.pendingProps = source.pendingProps;
      target.memoizedProps = source.memoizedProps;
      target.updateQueue = source.updateQueue;
      target.memoizedState = source.memoizedState;
      target.dependencies = source.dependencies;
      target.mode = source.mode;
      target.flags = source.flags;
      target.subtreeFlags = source.subtreeFlags;
      target.deletions = source.deletions;
      target.lanes = source.lanes;
      target.childLanes = source.childLanes;
      target.alternate = source.alternate;
      target.actualDuration = source.actualDuration;
      target.actualStartTime = source.actualStartTime;
      target.selfBaseDuration = source.selfBaseDuration;
      target.treeBaseDuration = source.treeBaseDuration;
      target._debugSource = source._debugSource;
      target._debugOwner = source._debugOwner;
      target._debugNeedsRemount = source._debugNeedsRemount;
      target._debugHookTypes = source._debugHookTypes;
      return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
      this.tag = tag;
      this.containerInfo = containerInfo;
      this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
      this.timeoutHandle = -1;
      this.callbackNode = this.pendingContext = this.context = null;
      this.callbackPriority = 0;
      this.eventTimes = createLaneMap(0);
      this.expirationTimes = createLaneMap(-1);
      this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
      this.entanglements = createLaneMap(0);
      this.identifierPrefix = identifierPrefix;
      this.onRecoverableError = onRecoverableError;
      this.mutableSourceEagerHydrationData = null;
      this.passiveEffectDuration = this.effectDuration = 0;
      this.memoizedUpdaters = new Set();
      containerInfo = this.pendingUpdatersLaneMap = [];
      for (identifierPrefix = 0; identifierPrefix < TotalLanes; identifierPrefix++) {
        containerInfo.push(new Set());
      }
      switch(tag) {
        case 1:
          this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
          break;
        case 0:
          this._debugRootType = hydrate ? "hydrate()" : "render()";
      }
    }
    function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      containerInfo = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
      1 === tag ? (tag = 1, !0 === isStrictMode && (tag |= 24)) : tag = 0;
      isDevToolsPresent && (tag |= 2);
      isStrictMode = createFiber(3, null, null, tag);
      containerInfo.current = isStrictMode;
      isStrictMode.stateNode = containerInfo;
      isStrictMode.memoizedState = {element:initialChildren, isDehydrated:hydrate, cache:null, transitions:null, pendingSuspenseBoundaries:null};
      initializeUpdateQueue(isStrictMode);
      return containerInfo;
    }
    function createPortal(children, containerInfo, implementation) {
      var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
      return {$$typeof:REACT_PORTAL_TYPE, key:null == key ? null : "" + key, children, containerInfo, implementation};
    }
    function getContextForSubtree(parentComponent) {
      if (!parentComponent) {
        return emptyContextObject;
      }
      parentComponent = parentComponent._reactInternals;
      a: {
        if (getNearestMountedFiber(parentComponent) !== parentComponent || 1 !== parentComponent.tag) {
          throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        }
        var parentContext = parentComponent;
        do {
          switch(parentContext.tag) {
            case 3:
              parentContext = parentContext.stateNode.context;
              break a;
            case 1:
              if (isContextProvider(parentContext.type)) {
                parentContext = parentContext.stateNode.__reactInternalMemoizedMergedChildContext;
                break a;
              }
          }
          parentContext = parentContext.return;
        } while (null !== parentContext);
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
      if (1 === parentComponent.tag) {
        var Component = parentComponent.type;
        if (isContextProvider(Component)) {
          return processChildContext(parentComponent, Component, parentContext);
        }
      }
      return parentContext;
    }
    function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      initialChildren = createFiberRoot(containerInfo, tag, !0, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      initialChildren.context = getContextForSubtree(null);
      containerInfo = initialChildren.current;
      tag = requestEventTime();
      hydrationCallbacks = requestUpdateLane(containerInfo);
      isStrictMode = createUpdate(tag, hydrationCallbacks);
      isStrictMode.callback = void 0 !== callback && null !== callback ? callback : null;
      enqueueUpdate(containerInfo, isStrictMode, hydrationCallbacks);
      initialChildren.current.lanes = hydrationCallbacks;
      markRootUpdated(initialChildren, hydrationCallbacks, tag);
      ensureRootIsScheduled(initialChildren, tag);
      return initialChildren;
    }
    function updateContainer(element, container, parentComponent, callback) {
      if (injectedHook && "function" === typeof injectedHook.onScheduleFiberRoot) {
        try {
          injectedHook.onScheduleFiberRoot(rendererID, container, element);
        } catch (err) {
          hasLoggedError || (hasLoggedError = !0, error("React instrumentation encountered an error: %s", err));
        }
      }
      var current$1 = container.current, eventTime = requestEventTime(), lane = requestUpdateLane(current$1);
      null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderScheduled && injectedProfilingHooks.markRenderScheduled(lane);
      parentComponent = getContextForSubtree(parentComponent);
      null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
      isRendering && null !== current && !didWarnAboutNestedUpdates && (didWarnAboutNestedUpdates = !0, error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown"));
      container = createUpdate(eventTime, lane);
      container.payload = {element};
      callback = void 0 === callback ? null : callback;
      null !== callback && ("function" !== typeof callback && error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback), container.callback = callback);
      element = enqueueUpdate(current$1, container, lane);
      null !== element && (scheduleUpdateOnFiber(element, current$1, lane, eventTime), entangleTransitions(element, current$1, lane));
      return lane;
    }
    function getPublicRootInstance(container) {
      container = container.current;
      if (!container.child) {
        return null;
      }
      switch(container.child.tag) {
        case 5:
          return container.child.stateNode;
        default:
          return container.child.stateNode;
      }
    }
    function markRetryLaneImpl(fiber, retryLane) {
      fiber = fiber.memoizedState;
      if (null !== fiber && null !== fiber.dehydrated) {
        var a = fiber.retryLane;
        fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;
      }
    }
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
      markRetryLaneImpl(fiber, retryLane);
      (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
    }
    function findHostInstanceWithNoPortals(fiber) {
      fiber = findCurrentFiberUsingSlowPath(fiber);
      fiber = null !== fiber ? findCurrentHostFiberWithNoPortalsImpl(fiber) : null;
      return null === fiber ? null : fiber.stateNode;
    }
    function findHostInstanceByFiber(fiber) {
      fiber = findCurrentHostFiber(fiber);
      return null === fiber ? null : fiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
      return null;
    }
    function getCurrentFiberForDevTools() {
      return current;
    }
    function ReactDOMRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    function ReactDOMHydrationRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    function isValidContainer(node) {
      return !(!node || 1 !== node.nodeType && 9 !== node.nodeType && 11 !== node.nodeType);
    }
    function isValidContainerLegacy(node) {
      return !(!node || 1 !== node.nodeType && 9 !== node.nodeType && 11 !== node.nodeType && (8 !== node.nodeType || " react-mount-point-unstable " !== node.nodeValue));
    }
    function warnIfReactDOMContainerInDEV(container) {
      1 === container.nodeType && container.tagName && "BODY" === container.tagName.toUpperCase() && error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
      container[internalContainerInstanceKey] && (container._reactRootContainer ? error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.") : error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."));
    }
    function getReactRootElementInContainer(container) {
      return container ? 9 === container.nodeType ? container.documentElement : container.firstChild : null;
    }
    function noopOnRecoverableError() {
    }
    function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
      if (isHydrationContainer) {
        if ("function" === typeof callback) {
          var originalCallback = callback;
          callback = function() {
            var instance = getPublicRootInstance(root);
            originalCallback.call(instance);
          };
        }
        var root = createHydrationContainer(initialChildren, callback, container, 0, null, !1, !1, "", noopOnRecoverableError);
        container._reactRootContainer = root;
        container[internalContainerInstanceKey] = root.current;
        listenToAllSupportedEvents(8 === container.nodeType ? container.parentNode : container);
        flushSync();
        return root;
      }
      for (; isHydrationContainer = container.lastChild;) {
        container.removeChild(isHydrationContainer);
      }
      if ("function" === typeof callback) {
        var _originalCallback = callback;
        callback = function() {
          var instance = getPublicRootInstance(_root);
          _originalCallback.call(instance);
        };
      }
      var _root = createFiberRoot(container, 0, !1, null, null, !1, !1, "", noopOnRecoverableError);
      container._reactRootContainer = _root;
      container[internalContainerInstanceKey] = _root.current;
      listenToAllSupportedEvents(8 === container.nodeType ? container.parentNode : container);
      flushSync(function() {
        updateContainer(initialChildren, _root, parentComponent, callback);
      });
      return _root;
    }
    function warnOnInvalidCallback$1(callback, callerName) {
      null !== callback && "function" !== typeof callback && error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
      topLevelUpdateWarnings(container);
      warnOnInvalidCallback$1(void 0 === callback ? null : callback, "render");
      var maybeRoot = container._reactRootContainer;
      if (maybeRoot) {
        var root = maybeRoot;
        if ("function" === typeof callback) {
          var originalCallback = callback;
          callback = function() {
            var instance = getPublicRootInstance(root);
            originalCallback.call(instance);
          };
        }
        updateContainer(children, root, parentComponent, callback);
      } else {
        root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
      }
      return getPublicRootInstance(root);
    }
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var React = require("module$node_modules$react$index"), Scheduler = require("module$node_modules$scheduler$index"), ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, suppressWarning = !1, allNativeEvents = new Set(), registrationNameDependencies = {}, possibleRegistrationNames = {}, canUseDOM = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), hasOwnProperty = Object.prototype.hasOwnProperty, 
    VALID_ATTRIBUTE_NAME_REGEX = RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = 
    {}, properties = {};
    "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, 0, !1, name, null, !1, !1);
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
      var name = _ref[0];
      properties[name] = new PropertyInfoRecord(name, 1, !1, _ref[1], null, !1, !1);
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, 2, !1, name.toLowerCase(), null, !1, !1);
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, 2, !1, name, null, !1, !1);
    });
    "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, 3, !1, name.toLowerCase(), null, !1, !1);
    });
    ["checked", "multiple", "muted", "selected"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, 3, !0, name, null, !1, !1);
    });
    ["capture", "download"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, 4, !1, name, null, !1, !1);
    });
    ["cols", "rows", "size", "span"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, 6, !1, name, null, !1, !1);
    });
    ["rowSpan", "start"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, 5, !1, name.toLowerCase(), null, !1, !1);
    });
    var CAMELIZE = /[\-:]([a-z])/g, capitalize = function(token) {
      return token[1].toUpperCase();
    };
    "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, 1, !1, attributeName, null, !1, !1);
    });
    "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, 1, !1, attributeName, "http://www.w3.org/1999/xlink", !1, !1);
    });
    ["xml:base", "xml:lang", "xml:space"].forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, 1, !1, attributeName, "http://www.w3.org/XML/1998/namespace", !1, !1);
    });
    ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
      properties[attributeName] = new PropertyInfoRecord(attributeName, 1, !1, attributeName.toLowerCase(), null, !1, !1);
    });
    properties.xlinkHref = new PropertyInfoRecord("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
    ["src", "href", "action", "formAction"].forEach(function(attributeName) {
      properties[attributeName] = new PropertyInfoRecord(attributeName, 1, !1, attributeName.toLowerCase(), null, !0, !0);
    });
    var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i, didWarn = !1, REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONTEXT_TYPE = 
    Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy");
    Symbol.for("react.scope");
    Symbol.for("react.debug_trace_mode");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    Symbol.for("react.legacy_hidden");
    Symbol.for("react.cache");
    Symbol.for("react.tracing_marker");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator, assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
    disabledLog.__reactDisabledLog = !0;
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix, reentry = !1;
    var componentFrameCache = new ("function" === typeof WeakMap ? WeakMap : Map)();
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame, current = null, isRendering = !1, hasReadOnlyValue = {button:!0, checkbox:!0, image:!0, hidden:!0, radio:!0, reset:!0, submit:!0}, didWarnValueDefaultValue = !1, didWarnCheckedDefaultChecked = !1, didWarnControlledToUncontrolled = !1, didWarnUncontrolledToControlled = !1, didWarnSelectedSetOnOption = !1, didWarnInvalidChild = !1, didWarnInvalidInnerHTML = !1, isArrayImpl = Array.isArray;
    var didWarnValueDefaultValue$1 = !1;
    var valuePropNames = ["value", "defaultValue"], didWarnValDefaultVal = !1, reusableSVGContainer, setInnerHTML = function(func) {
      return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(arg0, arg1, arg2, arg3) {
        MSApp.execUnsafeLocalFunction(function() {
          return func(arg0, arg1, arg2, arg3);
        });
      } : func;
    }(function(node, html) {
      if ("http://www.w3.org/2000/svg" !== node.namespaceURI || "innerHTML" in node) {
        node.innerHTML = html;
      } else {
        reusableSVGContainer = reusableSVGContainer || document.createElement("div");
        reusableSVGContainer.innerHTML = "\x3csvg\x3e" + html.valueOf().toString() + "\x3c/svg\x3e";
        for (html = reusableSVGContainer.firstChild; node.firstChild;) {
          node.removeChild(node.firstChild);
        }
        for (; html.firstChild;) {
          node.appendChild(html.firstChild);
        }
      }
    }), setTextContent = function(node, text) {
      if (text) {
        var firstChild = node.firstChild;
        if (firstChild && firstChild === node.lastChild && 3 === firstChild.nodeType) {
          firstChild.nodeValue = text;
          return;
        }
      }
      node.textContent = text;
    }, shorthandToLonghand = {animation:"animationDelay animationDirection animationDuration animationFillMode animationIterationCount animationName animationPlayState animationTimingFunction".split(" "), background:"backgroundAttachment backgroundClip backgroundColor backgroundImage backgroundOrigin backgroundPositionX backgroundPositionY backgroundRepeat backgroundSize".split(" "), backgroundPosition:["backgroundPositionX", "backgroundPositionY"], border:"borderBottomColor borderBottomStyle borderBottomWidth borderImageOutset borderImageRepeat borderImageSlice borderImageSource borderImageWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderTopColor borderTopStyle borderTopWidth".split(" "), 
    borderBlockEnd:["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"], borderBlockStart:["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"], borderBottom:["borderBottomColor", "borderBottomStyle", "borderBottomWidth"], borderColor:["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"], borderImage:["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"], borderInlineEnd:["borderInlineEndColor", 
    "borderInlineEndStyle", "borderInlineEndWidth"], borderInlineStart:["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"], borderLeft:["borderLeftColor", "borderLeftStyle", "borderLeftWidth"], borderRadius:["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"], borderRight:["borderRightColor", "borderRightStyle", "borderRightWidth"], borderStyle:["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"], 
    borderTop:["borderTopColor", "borderTopStyle", "borderTopWidth"], borderWidth:["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"], columnRule:["columnRuleColor", "columnRuleStyle", "columnRuleWidth"], columns:["columnCount", "columnWidth"], flex:["flexBasis", "flexGrow", "flexShrink"], flexFlow:["flexDirection", "flexWrap"], font:"fontFamily fontFeatureSettings fontKerning fontLanguageOverride fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition fontWeight lineHeight".split(" "), 
    fontVariant:"fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition".split(" "), gap:["columnGap", "rowGap"], grid:"gridAutoColumns gridAutoFlow gridAutoRows gridTemplateAreas gridTemplateColumns gridTemplateRows".split(" "), gridArea:["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"], gridColumn:["gridColumnEnd", "gridColumnStart"], gridColumnGap:["columnGap"], gridGap:["columnGap", "rowGap"], gridRow:["gridRowEnd", 
    "gridRowStart"], gridRowGap:["rowGap"], gridTemplate:["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"], listStyle:["listStyleImage", "listStylePosition", "listStyleType"], margin:["marginBottom", "marginLeft", "marginRight", "marginTop"], marker:["markerEnd", "markerMid", "markerStart"], mask:"maskClip maskComposite maskImage maskMode maskOrigin maskPositionX maskPositionY maskRepeat maskSize".split(" "), maskPosition:["maskPositionX", "maskPositionY"], outline:["outlineColor", 
    "outlineStyle", "outlineWidth"], overflow:["overflowX", "overflowY"], padding:["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"], placeContent:["alignContent", "justifyContent"], placeItems:["alignItems", "justifyItems"], placeSelf:["alignSelf", "justifySelf"], textDecoration:["textDecorationColor", "textDecorationLine", "textDecorationStyle"], textEmphasis:["textEmphasisColor", "textEmphasisStyle"], transition:["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"], 
    wordWrap:["overflowWrap"]}, isUnitlessNumber = {animationIterationCount:!0, aspectRatio:!0, borderImageOutset:!0, borderImageSlice:!0, borderImageWidth:!0, boxFlex:!0, boxFlexGroup:!0, boxOrdinalGroup:!0, columnCount:!0, columns:!0, flex:!0, flexGrow:!0, flexPositive:!0, flexShrink:!0, flexNegative:!0, flexOrder:!0, gridArea:!0, gridRow:!0, gridRowEnd:!0, gridRowSpan:!0, gridRowStart:!0, gridColumn:!0, gridColumnEnd:!0, gridColumnSpan:!0, gridColumnStart:!0, fontWeight:!0, lineClamp:!0, lineHeight:!0, 
    opacity:!0, order:!0, orphans:!0, tabSize:!0, widows:!0, zIndex:!0, zoom:!0, fillOpacity:!0, floodOpacity:!0, stopOpacity:!0, strokeDasharray:!0, strokeDashoffset:!0, strokeMiterlimit:!0, strokeOpacity:!0, strokeWidth:!0}, prefixes = ["Webkit", "ms", "Moz", "O"];
    Object.keys(isUnitlessNumber).forEach(function(prop) {
      prefixes.forEach(function(prefix) {
        prefix = prefix + prop.charAt(0).toUpperCase() + prop.substring(1);
        isUnitlessNumber[prefix] = isUnitlessNumber[prop];
      });
    });
    var uppercasePattern = /([A-Z])/g, msPattern = /^ms-/, warnValidStyle = function() {
    }, badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern$1 = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = !1, warnedForInfinityValue = !1, camelize = function(string) {
      return string.replace(hyphenPattern, function(_, character) {
        return character.toUpperCase();
      });
    }, warnValidStyle$1 = warnValidStyle = function(name, value) {
      -1 < name.indexOf("-") ? warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")))) : badVendoredStyleNamePattern.test(name) ? warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1))) : 
      badStyleValueWithSemicolonPattern.test(value) && (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = !0, error('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ""))));
      "number" === typeof value && (isNaN(value) ? warnedForNaNValue || (warnedForNaNValue = !0, error("`NaN` is an invalid value for the `%s` css style property.", name)) : isFinite(value) || warnedForInfinityValue || (warnedForInfinityValue = !0, error("`Infinity` is an invalid value for the `%s` css style property.", name)));
    }, voidElementTags = assign({menuitem:!0}, {area:!0, base:!0, br:!0, col:!0, embed:!0, hr:!0, img:!0, input:!0, keygen:!0, link:!0, meta:!0, param:!0, source:!0, track:!0, wbr:!0}), possibleStandardNames = {accept:"accept", acceptcharset:"acceptCharset", "accept-charset":"acceptCharset", accesskey:"accessKey", action:"action", allowfullscreen:"allowFullScreen", alt:"alt", as:"as", async:"async", autocapitalize:"autoCapitalize", autocomplete:"autoComplete", autocorrect:"autoCorrect", autofocus:"autoFocus", 
    autoplay:"autoPlay", autosave:"autoSave", capture:"capture", cellpadding:"cellPadding", cellspacing:"cellSpacing", challenge:"challenge", charset:"charSet", checked:"checked", children:"children", cite:"cite", class:"className", classid:"classID", classname:"className", cols:"cols", colspan:"colSpan", content:"content", contenteditable:"contentEditable", contextmenu:"contextMenu", controls:"controls", controlslist:"controlsList", coords:"coords", crossorigin:"crossOrigin", dangerouslysetinnerhtml:"dangerouslySetInnerHTML", 
    data:"data", datetime:"dateTime", default:"default", defaultchecked:"defaultChecked", defaultvalue:"defaultValue", defer:"defer", dir:"dir", disabled:"disabled", disablepictureinpicture:"disablePictureInPicture", disableremoteplayback:"disableRemotePlayback", download:"download", draggable:"draggable", enctype:"encType", enterkeyhint:"enterKeyHint", for:"htmlFor", form:"form", formmethod:"formMethod", formaction:"formAction", formenctype:"formEncType", formnovalidate:"formNoValidate", formtarget:"formTarget", 
    frameborder:"frameBorder", headers:"headers", height:"height", hidden:"hidden", high:"high", href:"href", hreflang:"hrefLang", htmlfor:"htmlFor", httpequiv:"httpEquiv", "http-equiv":"httpEquiv", icon:"icon", id:"id", imagesizes:"imageSizes", imagesrcset:"imageSrcSet", innerhtml:"innerHTML", inputmode:"inputMode", integrity:"integrity", is:"is", itemid:"itemID", itemprop:"itemProp", itemref:"itemRef", itemscope:"itemScope", itemtype:"itemType", keyparams:"keyParams", keytype:"keyType", kind:"kind", 
    label:"label", lang:"lang", list:"list", loop:"loop", low:"low", manifest:"manifest", marginwidth:"marginWidth", marginheight:"marginHeight", max:"max", maxlength:"maxLength", media:"media", mediagroup:"mediaGroup", method:"method", min:"min", minlength:"minLength", multiple:"multiple", muted:"muted", name:"name", nomodule:"noModule", nonce:"nonce", novalidate:"noValidate", open:"open", optimum:"optimum", pattern:"pattern", placeholder:"placeholder", playsinline:"playsInline", poster:"poster", 
    preload:"preload", profile:"profile", radiogroup:"radioGroup", readonly:"readOnly", referrerpolicy:"referrerPolicy", rel:"rel", required:"required", reversed:"reversed", role:"role", rows:"rows", rowspan:"rowSpan", sandbox:"sandbox", scope:"scope", scoped:"scoped", scrolling:"scrolling", seamless:"seamless", selected:"selected", shape:"shape", size:"size", sizes:"sizes", span:"span", spellcheck:"spellCheck", src:"src", srcdoc:"srcDoc", srclang:"srcLang", srcset:"srcSet", start:"start", step:"step", 
    style:"style", summary:"summary", tabindex:"tabIndex", target:"target", title:"title", type:"type", usemap:"useMap", value:"value", width:"width", wmode:"wmode", wrap:"wrap", about:"about", accentheight:"accentHeight", "accent-height":"accentHeight", accumulate:"accumulate", additive:"additive", alignmentbaseline:"alignmentBaseline", "alignment-baseline":"alignmentBaseline", allowreorder:"allowReorder", alphabetic:"alphabetic", amplitude:"amplitude", arabicform:"arabicForm", "arabic-form":"arabicForm", 
    ascent:"ascent", attributename:"attributeName", attributetype:"attributeType", autoreverse:"autoReverse", azimuth:"azimuth", basefrequency:"baseFrequency", baselineshift:"baselineShift", "baseline-shift":"baselineShift", baseprofile:"baseProfile", bbox:"bbox", begin:"begin", bias:"bias", by:"by", calcmode:"calcMode", capheight:"capHeight", "cap-height":"capHeight", clip:"clip", clippath:"clipPath", "clip-path":"clipPath", clippathunits:"clipPathUnits", cliprule:"clipRule", "clip-rule":"clipRule", 
    color:"color", colorinterpolation:"colorInterpolation", "color-interpolation":"colorInterpolation", colorinterpolationfilters:"colorInterpolationFilters", "color-interpolation-filters":"colorInterpolationFilters", colorprofile:"colorProfile", "color-profile":"colorProfile", colorrendering:"colorRendering", "color-rendering":"colorRendering", contentscripttype:"contentScriptType", contentstyletype:"contentStyleType", cursor:"cursor", cx:"cx", cy:"cy", d:"d", datatype:"datatype", decelerate:"decelerate", 
    descent:"descent", diffuseconstant:"diffuseConstant", direction:"direction", display:"display", divisor:"divisor", dominantbaseline:"dominantBaseline", "dominant-baseline":"dominantBaseline", dur:"dur", dx:"dx", dy:"dy", edgemode:"edgeMode", elevation:"elevation", enablebackground:"enableBackground", "enable-background":"enableBackground", end:"end", exponent:"exponent", externalresourcesrequired:"externalResourcesRequired", fill:"fill", fillopacity:"fillOpacity", "fill-opacity":"fillOpacity", 
    fillrule:"fillRule", "fill-rule":"fillRule", filter:"filter", filterres:"filterRes", filterunits:"filterUnits", floodopacity:"floodOpacity", "flood-opacity":"floodOpacity", floodcolor:"floodColor", "flood-color":"floodColor", focusable:"focusable", fontfamily:"fontFamily", "font-family":"fontFamily", fontsize:"fontSize", "font-size":"fontSize", fontsizeadjust:"fontSizeAdjust", "font-size-adjust":"fontSizeAdjust", fontstretch:"fontStretch", "font-stretch":"fontStretch", fontstyle:"fontStyle", 
    "font-style":"fontStyle", fontvariant:"fontVariant", "font-variant":"fontVariant", fontweight:"fontWeight", "font-weight":"fontWeight", format:"format", from:"from", fx:"fx", fy:"fy", g1:"g1", g2:"g2", glyphname:"glyphName", "glyph-name":"glyphName", glyphorientationhorizontal:"glyphOrientationHorizontal", "glyph-orientation-horizontal":"glyphOrientationHorizontal", glyphorientationvertical:"glyphOrientationVertical", "glyph-orientation-vertical":"glyphOrientationVertical", glyphref:"glyphRef", 
    gradienttransform:"gradientTransform", gradientunits:"gradientUnits", hanging:"hanging", horizadvx:"horizAdvX", "horiz-adv-x":"horizAdvX", horizoriginx:"horizOriginX", "horiz-origin-x":"horizOriginX", ideographic:"ideographic", imagerendering:"imageRendering", "image-rendering":"imageRendering", in2:"in2", in:"in", inlist:"inlist", intercept:"intercept", k1:"k1", k2:"k2", k3:"k3", k4:"k4", k:"k", kernelmatrix:"kernelMatrix", kernelunitlength:"kernelUnitLength", kerning:"kerning", keypoints:"keyPoints", 
    keysplines:"keySplines", keytimes:"keyTimes", lengthadjust:"lengthAdjust", letterspacing:"letterSpacing", "letter-spacing":"letterSpacing", lightingcolor:"lightingColor", "lighting-color":"lightingColor", limitingconeangle:"limitingConeAngle", local:"local", markerend:"markerEnd", "marker-end":"markerEnd", markerheight:"markerHeight", markermid:"markerMid", "marker-mid":"markerMid", markerstart:"markerStart", "marker-start":"markerStart", markerunits:"markerUnits", markerwidth:"markerWidth", 
    mask:"mask", maskcontentunits:"maskContentUnits", maskunits:"maskUnits", mathematical:"mathematical", mode:"mode", numoctaves:"numOctaves", offset:"offset", opacity:"opacity", operator:"operator", order:"order", orient:"orient", orientation:"orientation", origin:"origin", overflow:"overflow", overlineposition:"overlinePosition", "overline-position":"overlinePosition", overlinethickness:"overlineThickness", "overline-thickness":"overlineThickness", paintorder:"paintOrder", "paint-order":"paintOrder", 
    panose1:"panose1", "panose-1":"panose1", pathlength:"pathLength", patterncontentunits:"patternContentUnits", patterntransform:"patternTransform", patternunits:"patternUnits", pointerevents:"pointerEvents", "pointer-events":"pointerEvents", points:"points", pointsatx:"pointsAtX", pointsaty:"pointsAtY", pointsatz:"pointsAtZ", prefix:"prefix", preservealpha:"preserveAlpha", preserveaspectratio:"preserveAspectRatio", primitiveunits:"primitiveUnits", property:"property", r:"r", radius:"radius", refx:"refX", 
    refy:"refY", renderingintent:"renderingIntent", "rendering-intent":"renderingIntent", repeatcount:"repeatCount", repeatdur:"repeatDur", requiredextensions:"requiredExtensions", requiredfeatures:"requiredFeatures", resource:"resource", restart:"restart", result:"result", results:"results", rotate:"rotate", rx:"rx", ry:"ry", scale:"scale", security:"security", seed:"seed", shaperendering:"shapeRendering", "shape-rendering":"shapeRendering", slope:"slope", spacing:"spacing", specularconstant:"specularConstant", 
    specularexponent:"specularExponent", speed:"speed", spreadmethod:"spreadMethod", startoffset:"startOffset", stddeviation:"stdDeviation", stemh:"stemh", stemv:"stemv", stitchtiles:"stitchTiles", stopcolor:"stopColor", "stop-color":"stopColor", stopopacity:"stopOpacity", "stop-opacity":"stopOpacity", strikethroughposition:"strikethroughPosition", "strikethrough-position":"strikethroughPosition", strikethroughthickness:"strikethroughThickness", "strikethrough-thickness":"strikethroughThickness", 
    string:"string", stroke:"stroke", strokedasharray:"strokeDasharray", "stroke-dasharray":"strokeDasharray", strokedashoffset:"strokeDashoffset", "stroke-dashoffset":"strokeDashoffset", strokelinecap:"strokeLinecap", "stroke-linecap":"strokeLinecap", strokelinejoin:"strokeLinejoin", "stroke-linejoin":"strokeLinejoin", strokemiterlimit:"strokeMiterlimit", "stroke-miterlimit":"strokeMiterlimit", strokewidth:"strokeWidth", "stroke-width":"strokeWidth", strokeopacity:"strokeOpacity", "stroke-opacity":"strokeOpacity", 
    suppresscontenteditablewarning:"suppressContentEditableWarning", suppresshydrationwarning:"suppressHydrationWarning", surfacescale:"surfaceScale", systemlanguage:"systemLanguage", tablevalues:"tableValues", targetx:"targetX", targety:"targetY", textanchor:"textAnchor", "text-anchor":"textAnchor", textdecoration:"textDecoration", "text-decoration":"textDecoration", textlength:"textLength", textrendering:"textRendering", "text-rendering":"textRendering", to:"to", transform:"transform", typeof:"typeof", 
    u1:"u1", u2:"u2", underlineposition:"underlinePosition", "underline-position":"underlinePosition", underlinethickness:"underlineThickness", "underline-thickness":"underlineThickness", unicode:"unicode", unicodebidi:"unicodeBidi", "unicode-bidi":"unicodeBidi", unicoderange:"unicodeRange", "unicode-range":"unicodeRange", unitsperem:"unitsPerEm", "units-per-em":"unitsPerEm", unselectable:"unselectable", valphabetic:"vAlphabetic", "v-alphabetic":"vAlphabetic", values:"values", vectoreffect:"vectorEffect", 
    "vector-effect":"vectorEffect", version:"version", vertadvy:"vertAdvY", "vert-adv-y":"vertAdvY", vertoriginx:"vertOriginX", "vert-origin-x":"vertOriginX", vertoriginy:"vertOriginY", "vert-origin-y":"vertOriginY", vhanging:"vHanging", "v-hanging":"vHanging", videographic:"vIdeographic", "v-ideographic":"vIdeographic", viewbox:"viewBox", viewtarget:"viewTarget", visibility:"visibility", vmathematical:"vMathematical", "v-mathematical":"vMathematical", vocab:"vocab", widths:"widths", wordspacing:"wordSpacing", 
    "word-spacing":"wordSpacing", writingmode:"writingMode", "writing-mode":"writingMode", x1:"x1", x2:"x2", x:"x", xchannelselector:"xChannelSelector", xheight:"xHeight", "x-height":"xHeight", xlinkactuate:"xlinkActuate", "xlink:actuate":"xlinkActuate", xlinkarcrole:"xlinkArcrole", "xlink:arcrole":"xlinkArcrole", xlinkhref:"xlinkHref", "xlink:href":"xlinkHref", xlinkrole:"xlinkRole", "xlink:role":"xlinkRole", xlinkshow:"xlinkShow", "xlink:show":"xlinkShow", xlinktitle:"xlinkTitle", "xlink:title":"xlinkTitle", 
    xlinktype:"xlinkType", "xlink:type":"xlinkType", xmlbase:"xmlBase", "xml:base":"xmlBase", xmllang:"xmlLang", "xml:lang":"xmlLang", xmlns:"xmlns", "xml:space":"xmlSpace", xmlnsxlink:"xmlnsXlink", "xmlns:xlink":"xmlnsXlink", xmlspace:"xmlSpace", y1:"y1", y2:"y2", y:"y", ychannelselector:"yChannelSelector", z:"z", zoomandpan:"zoomAndPan"}, ariaProperties = {"aria-current":0, "aria-description":0, "aria-details":0, "aria-disabled":0, "aria-hidden":0, "aria-invalid":0, "aria-keyshortcuts":0, "aria-label":0, 
    "aria-roledescription":0, "aria-autocomplete":0, "aria-checked":0, "aria-expanded":0, "aria-haspopup":0, "aria-level":0, "aria-modal":0, "aria-multiline":0, "aria-multiselectable":0, "aria-orientation":0, "aria-placeholder":0, "aria-pressed":0, "aria-readonly":0, "aria-required":0, "aria-selected":0, "aria-sort":0, "aria-valuemax":0, "aria-valuemin":0, "aria-valuenow":0, "aria-valuetext":0, "aria-atomic":0, "aria-busy":0, "aria-live":0, "aria-relevant":0, "aria-dropeffect":0, "aria-grabbed":0, 
    "aria-activedescendant":0, "aria-colcount":0, "aria-colindex":0, "aria-colspan":0, "aria-controls":0, "aria-describedby":0, "aria-errormessage":0, "aria-flowto":0, "aria-labelledby":0, "aria-owns":0, "aria-posinset":0, "aria-rowcount":0, "aria-rowindex":0, "aria-rowspan":0, "aria-setsize":0}, warnedProperties = {}, rARIA = RegExp("^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), 
    rARIACamel = RegExp("^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), didWarnValueNull = !1, validateProperty$1 = function() {
    }, warnedProperties$1 = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = RegExp("^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), rARIACamel$1 = RegExp("^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$");
    validateProperty$1 = function(tagName, name, value, eventRegistry) {
      if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
        return !0;
      }
      tagName = name.toLowerCase();
      if ("onfocusin" === tagName || "onfocusout" === tagName) {
        return error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name] = !0;
      }
      if (null != eventRegistry) {
        var possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
        if (eventRegistry.registrationNameDependencies.hasOwnProperty(name)) {
          return !0;
        }
        eventRegistry = possibleRegistrationNames.hasOwnProperty(tagName) ? possibleRegistrationNames[tagName] : null;
        if (null != eventRegistry) {
          return error("Invalid event handler property `%s`. Did you mean `%s`?", name, eventRegistry), warnedProperties$1[name] = !0;
        }
        if (EVENT_NAME_REGEX.test(name)) {
          return error("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties$1[name] = !0;
        }
      } else if (EVENT_NAME_REGEX.test(name)) {
        return INVALID_EVENT_NAME_REGEX.test(name) && error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties$1[name] = !0;
      }
      if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
        return !0;
      }
      if ("innerhtml" === tagName) {
        return error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name] = !0;
      }
      if ("aria" === tagName) {
        return error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name] = !0;
      }
      if ("is" === tagName && null !== value && void 0 !== value && "string" !== typeof value) {
        return error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name] = !0;
      }
      if ("number" === typeof value && isNaN(value)) {
        return error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties$1[name] = !0;
      }
      eventRegistry = getPropertyInfo(name);
      possibleRegistrationNames = null !== eventRegistry && 0 === eventRegistry.type;
      if (possibleStandardNames.hasOwnProperty(tagName)) {
        if (tagName = possibleStandardNames[tagName], tagName !== name) {
          return error("Invalid DOM property `%s`. Did you mean `%s`?", name, tagName), warnedProperties$1[name] = !0;
        }
      } else if (!possibleRegistrationNames && name !== tagName) {
        return error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, tagName), warnedProperties$1[name] = !0;
      }
      if ("boolean" === typeof value && shouldRemoveAttributeWithWarning(name, value, eventRegistry, !1)) {
        return value ? error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s\x3d"%s" or %s\x3d{value.toString()}.', value, name, name, value, name) : error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s\x3d"%s" or %s\x3d{value.toString()}.\n\nIf you used to conditionally omit it with %s\x3d{condition \x26\x26 value}, pass %s\x3d{condition ? value : undefined} instead.', 
        value, name, name, value, name, name, name), warnedProperties$1[name] = !0;
      }
      if (possibleRegistrationNames) {
        return !0;
      }
      if (shouldRemoveAttributeWithWarning(name, value, eventRegistry, !1)) {
        return warnedProperties$1[name] = !0, !1;
      }
      "false" !== value && "true" !== value || null === eventRegistry || 3 !== eventRegistry.type || (error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s\x3d{%s}?", value, name, "false" === value ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value), warnedProperties$1[name] = !0);
      return !0;
    };
    var warnUnknownProperties = function(type, props, eventRegistry) {
      var unknownProps = [], key;
      for (key in props) {
        validateProperty$1(type, key, props[key], eventRegistry) || unknownProps.push(key);
      }
      props = unknownProps.map(function(prop) {
        return "`" + prop + "`";
      }).join(", ");
      1 === unknownProps.length ? error("Invalid value for prop %s on \x3c%s\x3e tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", props, type) : 1 < unknownProps.length && error("Invalid values for props %s on \x3c%s\x3e tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", props, 
      type);
    }, currentReplayingEvent = null, restoreImpl = null, restoreTarget = null, restoreQueue = null, batchedUpdatesImpl = function(fn, bookkeeping) {
      return fn(bookkeeping);
    }, flushSyncImpl = function() {
    }, isInsideEventHandler = !1, passiveBrowserEventsSupported = !1;
    if (canUseDOM) {
      try {
        var options = {};
        Object.defineProperty(options, "passive", {get:function() {
          passiveBrowserEventsSupported = !0;
        }});
        window.addEventListener("test", options, options);
        window.removeEventListener("test", options, options);
      } catch (e) {
        passiveBrowserEventsSupported = !1;
      }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    if ("undefined" !== typeof window && "function" === typeof window.dispatchEvent && "undefined" !== typeof document && "function" === typeof document.createEvent) {
      var fakeNode = document.createElement("react");
      invokeGuardedCallbackImpl = function(name, func, context, a, b, c, d, e, f) {
        function restoreAfterDispatch() {
          fakeNode.removeEventListener(evtType, callCallback, !1);
          "undefined" !== typeof window.event && window.hasOwnProperty("event") && (window.event = windowEvent);
        }
        function callCallback() {
          didCall = !0;
          restoreAfterDispatch();
          func.apply(context, funcArgs);
          didError = !1;
        }
        function handleWindowError(event) {
          error = event.error;
          didSetError = !0;
          null === error && 0 === event.colno && 0 === event.lineno && (isCrossOriginError = !0);
          if (event.defaultPrevented && null != error && "object" === typeof error) {
            try {
              error._suppressLogging = !0;
            } catch (inner) {
            }
          }
        }
        if ("undefined" === typeof document || null === document) {
          throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
        }
        var evt = document.createEvent("Event"), didCall = !1, didError = !0, windowEvent = window.event, windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event"), funcArgs = Array.prototype.slice.call(arguments, 3), error, didSetError = !1, isCrossOriginError = !1, evtType = "react-" + (name ? name : "invokeguardedcallback");
        window.addEventListener("error", handleWindowError);
        fakeNode.addEventListener(evtType, callCallback, !1);
        evt.initEvent(evtType, !1, !1);
        fakeNode.dispatchEvent(evt);
        windowEventDescriptor && Object.defineProperty(window, "event", windowEventDescriptor);
        didCall && didError && (didSetError ? isCrossOriginError && (error = Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.")) : error = Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue."), 
        this.onError(error));
        window.removeEventListener("error", handleWindowError);
        if (!didCall) {
          return restoreAfterDispatch(), invokeGuardedCallbackProd.apply(this, arguments);
        }
      };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl, hasError = !1, caughtError = null, hasRethrowError = !1, rethrowError = null, reporter = {onError:function(error) {
      hasError = !0;
      caughtError = error;
    }}, ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner, scheduleCallback = Scheduler.unstable_scheduleCallback, cancelCallback = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now = Scheduler.unstable_now, getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority = 
    Scheduler.unstable_NormalPriority, LowPriority = Scheduler.unstable_LowPriority, IdlePriority = Scheduler.unstable_IdlePriority, unstable_yieldValue = Scheduler.unstable_yieldValue, unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null, injectedProfilingHooks = null, hasLoggedError = !1, isDevToolsPresent = "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__, clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2, 
    TotalLanes = 31, SyncLane = 1, InputContinuousHydrationLane = 2, InputContinuousLane = 4, DefaultHydrationLane = 8, DefaultLane = 16, TransitionHydrationLane = 32, TransitionLanes = 4194240, RetryLanes = 130023424, SelectiveHydrationLane = 134217728, IdleHydrationLane = 268435456, IdleLane = 536870912, OffscreenLane = 1073741824, nextTransitionLane = 64, nextRetryLane = 4194304, DiscreteEventPriority = SyncLane, ContinuousEventPriority = InputContinuousLane, DefaultEventPriority = DefaultLane, 
    IdleEventPriority = IdleLane, currentUpdatePriority = 0, hasScheduledReplayAttempt = !1, queuedDiscreteEvents = [], queuedFocus = null, queuedDrag = null, queuedMouse = null, queuedPointers = new Map(), queuedPointerCaptures = new Map(), queuedExplicitHydrationTargets = [], discreteReplayableEvents = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" "), 
    ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig, _enabled = !0, return_targetInst = null, root = null, startText = null, fallbackText = null, EventInterface = {eventPhase:0, bubbles:0, cancelable:0, timeStamp:function(event) {
      return event.timeStamp || Date.now();
    }, defaultPrevented:0, isTrusted:0}, SyntheticEvent = createSyntheticEvent(EventInterface), UIEventInterface = assign({}, EventInterface, {view:0, detail:0}), SyntheticUIEvent = createSyntheticEvent(UIEventInterface), lastMovementX, lastMovementY, lastMouseEvent, MouseEventInterface = assign({}, UIEventInterface, {screenX:0, screenY:0, clientX:0, clientY:0, pageX:0, pageY:0, ctrlKey:0, shiftKey:0, altKey:0, metaKey:0, getModifierState:getEventModifierState, button:0, buttons:0, relatedTarget:function(event) {
      return void 0 === event.relatedTarget ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
    }, movementX:function(event) {
      if ("movementX" in event) {
        return event.movementX;
      }
      event !== lastMouseEvent && (lastMouseEvent && "mousemove" === event.type ? (lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY) : lastMovementY = lastMovementX = 0, lastMouseEvent = event);
      return lastMovementX;
    }, movementY:function(event) {
      return "movementY" in event ? event.movementY : lastMovementY;
    }}), SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface), DragEventInterface = assign({}, MouseEventInterface, {dataTransfer:0}), SyntheticDragEvent = createSyntheticEvent(DragEventInterface), FocusEventInterface = assign({}, UIEventInterface, {relatedTarget:0}), SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface), AnimationEventInterface = assign({}, EventInterface, {animationName:0, elapsedTime:0, pseudoElement:0}), SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface), 
    ClipboardEventInterface = assign({}, EventInterface, {clipboardData:function(event) {
      return "clipboardData" in event ? event.clipboardData : window.clipboardData;
    }}), SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface), CompositionEventInterface = assign({}, EventInterface, {data:0}), SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface), SyntheticInputEvent = SyntheticCompositionEvent, normalizeKey = {Esc:"Escape", Spacebar:" ", Left:"ArrowLeft", Up:"ArrowUp", Right:"ArrowRight", Down:"ArrowDown", Del:"Delete", Win:"OS", Menu:"ContextMenu", Apps:"ContextMenu", Scroll:"ScrollLock", MozPrintableKey:"Unidentified"}, 
    translateToKey = {8:"Backspace", 9:"Tab", 12:"Clear", 13:"Enter", 16:"Shift", 17:"Control", 18:"Alt", 19:"Pause", 20:"CapsLock", 27:"Escape", 32:" ", 33:"PageUp", 34:"PageDown", 35:"End", 36:"Home", 37:"ArrowLeft", 38:"ArrowUp", 39:"ArrowRight", 40:"ArrowDown", 45:"Insert", 46:"Delete", 112:"F1", 113:"F2", 114:"F3", 115:"F4", 116:"F5", 117:"F6", 118:"F7", 119:"F8", 120:"F9", 121:"F10", 122:"F11", 123:"F12", 144:"NumLock", 145:"ScrollLock", 224:"Meta"}, modifierKeyToProp = {Alt:"altKey", Control:"ctrlKey", 
    Meta:"metaKey", Shift:"shiftKey"}, KeyboardEventInterface = assign({}, UIEventInterface, {key:function(nativeEvent) {
      if (nativeEvent.key) {
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
        if ("Unidentified" !== key) {
          return key;
        }
      }
      return "keypress" === nativeEvent.type ? (nativeEvent = getEventCharCode(nativeEvent), 13 === nativeEvent ? "Enter" : String.fromCharCode(nativeEvent)) : "keydown" === nativeEvent.type || "keyup" === nativeEvent.type ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
    }, code:0, location:0, ctrlKey:0, shiftKey:0, altKey:0, metaKey:0, repeat:0, locale:0, getModifierState:getEventModifierState, charCode:function(event) {
      return "keypress" === event.type ? getEventCharCode(event) : 0;
    }, keyCode:function(event) {
      return "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
    }, which:function(event) {
      return "keypress" === event.type ? getEventCharCode(event) : "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
    }}), SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface), PointerEventInterface = assign({}, MouseEventInterface, {pointerId:0, width:0, height:0, pressure:0, tangentialPressure:0, tiltX:0, tiltY:0, twist:0, pointerType:0, isPrimary:0}), SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface), TouchEventInterface = assign({}, UIEventInterface, {touches:0, targetTouches:0, changedTouches:0, altKey:0, metaKey:0, ctrlKey:0, shiftKey:0, getModifierState:getEventModifierState}), 
    SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface), TransitionEventInterface = assign({}, EventInterface, {propertyName:0, elapsedTime:0, pseudoElement:0}), SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface), WheelEventInterface = assign({}, MouseEventInterface, {deltaX:function(event) {
      return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
    }, deltaY:function(event) {
      return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
    }, deltaZ:0, deltaMode:0}), SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface), END_KEYCODES = [9, 13, 27, 32], START_KEYCODE = 229, canUseCompositionEvent = canUseDOM && "CompositionEvent" in window, documentMode = null;
    canUseDOM && "documentMode" in document && (documentMode = document.documentMode);
    var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode, useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && 8 < documentMode && 11 >= documentMode), SPACEBAR_CODE = 32, SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE), hasSpaceKeypress = !1, isComposing = !1, supportedInputTypes = {color:!0, date:!0, datetime:!0, "datetime-local":!0, email:!0, month:!0, number:!0, password:!0, range:!0, search:!0, tel:!0, text:!0, time:!0, url:!0, week:!0}, 
    activeElement = null, activeElementInst = null, isInputEventSupported = !1;
    canUseDOM && (isInputEventSupported = isEventSupported("input") && (!document.documentMode || 9 < document.documentMode));
    var objectIs = "function" === typeof Object.is ? Object.is : is, skipSelectionChangeEvent = canUseDOM && "documentMode" in document && 11 >= document.documentMode, activeElement$1 = null, activeElementInst$1 = null, lastSelection = null, mouseDown = !1, vendorPrefixes = {animationend:makePrefixMap("Animation", "AnimationEnd"), animationiteration:makePrefixMap("Animation", "AnimationIteration"), animationstart:makePrefixMap("Animation", "AnimationStart"), transitionend:makePrefixMap("Transition", 
    "TransitionEnd")}, prefixedEventNames = {}, style = {};
    canUseDOM && (style = document.createElement("div").style, "AnimationEvent" in window || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), "TransitionEvent" in window || delete vendorPrefixes.transitionend.transition);
    var ANIMATION_END = getVendorPrefixedEventName("animationend"), ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"), ANIMATION_START = getVendorPrefixedEventName("animationstart"), TRANSITION_END = getVendorPrefixedEventName("transitionend"), topLevelEventsToReactNames = new Map(), simpleEventPluginEvents = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
    (function() {
      for (var i = 0; i < simpleEventPluginEvents.length; i++) {
        var eventName = simpleEventPluginEvents[i], domEventName = eventName.toLowerCase();
        eventName = eventName[0].toUpperCase() + eventName.slice(1);
        registerSimpleEvent(domEventName, "on" + eventName);
      }
      registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
      registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
      registerSimpleEvent(ANIMATION_START, "onAnimationStart");
      registerSimpleEvent("dblclick", "onDoubleClick");
      registerSimpleEvent("focusin", "onFocus");
      registerSimpleEvent("focusout", "onBlur");
      registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
    })();
    registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
    registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
    registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
    registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
    registerTwoPhaseEvent("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
    registerTwoPhaseEvent("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
    registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
    registerTwoPhaseEvent("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
    registerTwoPhaseEvent("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
    registerTwoPhaseEvent("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
    var mediaEventTypes = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), nonDelegatedEvents = new Set("cancel close invalid load scroll toggle".split(" ").concat(mediaEventTypes)), listeningMarker = "_reactListening" + Math.random().toString(36).slice(2), didWarnInvalidHydration = !1;
    var warnedUnknownTags = {dialog:!0, webview:!0};
    var validatePropertiesInDevelopment = function(type, props) {
      isCustomComponent(type, props) || warnInvalidARIAProps(type, props);
      "input" !== type && "textarea" !== type && "select" !== type || null == props || null !== props.value || didWarnValueNull || (didWarnValueNull = !0, "select" === type && props.multiple ? error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type) : error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", 
      type));
      var eventRegistry = {registrationNameDependencies, possibleRegistrationNames};
      isCustomComponent(type, props) || warnUnknownProperties(type, props, eventRegistry);
    };
    var canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
    var warnForPropDifference = function(propName, serverValue, clientValue) {
      didWarnInvalidHydration || (clientValue = normalizeMarkupForTextOrAttribute(clientValue), serverValue = normalizeMarkupForTextOrAttribute(serverValue), serverValue !== clientValue && (didWarnInvalidHydration = !0, error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(serverValue), JSON.stringify(clientValue))));
    };
    var warnForExtraAttributes = function(attributeNames) {
      if (!didWarnInvalidHydration) {
        didWarnInvalidHydration = !0;
        var names = [];
        attributeNames.forEach(function(name) {
          names.push(name);
        });
        error("Extra attributes from the server: %s", names);
      }
    };
    var warnForInvalidEventListener = function(registrationName, listener) {
      !1 === listener ? error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s\x3d{condition \x26\x26 value}, pass %s\x3d{condition ? value : undefined} instead.", registrationName, registrationName, registrationName) : error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
    };
    var normalizeHTML = function(parent, html) {
      parent = "http://www.w3.org/1999/xhtml" === parent.namespaceURI ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
      parent.innerHTML = html;
      return parent.innerHTML;
    };
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g, NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g, validateDOMNesting = function() {
    }, updatedAncestorInfo = function() {
    }, specialTags = "address applet area article aside base basefont bgsound blockquote body br button caption center col colgroup dd details dir div dl dt embed fieldset figcaption figure footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html iframe img input isindex li link listing main marquee menu menuitem meta nav noembed noframes noscript object ol p param plaintext pre script section select source style summary table tbody td template textarea tfoot th thead title tr track ul wbr xmp".split(" "), 
    inScopeTags = "applet caption html table td th marquee object template foreignObject desc title".split(" "), buttonScopeTags = inScopeTags.concat(["button"]), impliedEndTags = "dd dt li option optgroup p rp rt".split(" "), emptyAncestorInfo = {current:null, formTag:null, aTagInScope:null, buttonTagInScope:null, nobrTagInScope:null, pTagInButtonScope:null, listItemTagAutoclosing:null, dlItemTagAutoclosing:null};
    updatedAncestorInfo = function(oldInfo, tag) {
      oldInfo = assign({}, oldInfo || emptyAncestorInfo);
      var info = {tag};
      -1 !== inScopeTags.indexOf(tag) && (oldInfo.aTagInScope = null, oldInfo.buttonTagInScope = null, oldInfo.nobrTagInScope = null);
      -1 !== buttonScopeTags.indexOf(tag) && (oldInfo.pTagInButtonScope = null);
      -1 !== specialTags.indexOf(tag) && "address" !== tag && "div" !== tag && "p" !== tag && (oldInfo.listItemTagAutoclosing = null, oldInfo.dlItemTagAutoclosing = null);
      oldInfo.current = info;
      "form" === tag && (oldInfo.formTag = info);
      "a" === tag && (oldInfo.aTagInScope = info);
      "button" === tag && (oldInfo.buttonTagInScope = info);
      "nobr" === tag && (oldInfo.nobrTagInScope = info);
      "p" === tag && (oldInfo.pTagInButtonScope = info);
      "li" === tag && (oldInfo.listItemTagAutoclosing = info);
      if ("dd" === tag || "dt" === tag) {
        oldInfo.dlItemTagAutoclosing = info;
      }
      return oldInfo;
    };
    var isTagValidWithParent = function(tag, parentTag) {
      switch(parentTag) {
        case "select":
          return "option" === tag || "optgroup" === tag || "#text" === tag;
        case "optgroup":
          return "option" === tag || "#text" === tag;
        case "option":
          return "#text" === tag;
        case "tr":
          return "th" === tag || "td" === tag || "style" === tag || "script" === tag || "template" === tag;
        case "tbody":
        case "thead":
        case "tfoot":
          return "tr" === tag || "style" === tag || "script" === tag || "template" === tag;
        case "colgroup":
          return "col" === tag || "template" === tag;
        case "table":
          return "caption" === tag || "colgroup" === tag || "tbody" === tag || "tfoot" === tag || "thead" === tag || "style" === tag || "script" === tag || "template" === tag;
        case "head":
          return "base" === tag || "basefont" === tag || "bgsound" === tag || "link" === tag || "meta" === tag || "title" === tag || "noscript" === tag || "noframes" === tag || "style" === tag || "script" === tag || "template" === tag;
        case "html":
          return "head" === tag || "body" === tag || "frameset" === tag;
        case "frameset":
          return "frame" === tag;
        case "#document":
          return "html" === tag;
      }
      switch(tag) {
        case "h1":
        case "h2":
        case "h3":
        case "h4":
        case "h5":
        case "h6":
          return "h1" !== parentTag && "h2" !== parentTag && "h3" !== parentTag && "h4" !== parentTag && "h5" !== parentTag && "h6" !== parentTag;
        case "rp":
        case "rt":
          return -1 === impliedEndTags.indexOf(parentTag);
        case "body":
        case "caption":
        case "col":
        case "colgroup":
        case "frameset":
        case "frame":
        case "head":
        case "html":
        case "tbody":
        case "td":
        case "tfoot":
        case "th":
        case "thead":
        case "tr":
          return null == parentTag;
      }
      return !0;
    }, findInvalidAncestorForTag = function(tag, ancestorInfo) {
      switch(tag) {
        case "address":
        case "article":
        case "aside":
        case "blockquote":
        case "center":
        case "details":
        case "dialog":
        case "dir":
        case "div":
        case "dl":
        case "fieldset":
        case "figcaption":
        case "figure":
        case "footer":
        case "header":
        case "hgroup":
        case "main":
        case "menu":
        case "nav":
        case "ol":
        case "p":
        case "section":
        case "summary":
        case "ul":
        case "pre":
        case "listing":
        case "table":
        case "hr":
        case "xmp":
        case "h1":
        case "h2":
        case "h3":
        case "h4":
        case "h5":
        case "h6":
          return ancestorInfo.pTagInButtonScope;
        case "form":
          return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
        case "li":
          return ancestorInfo.listItemTagAutoclosing;
        case "dd":
        case "dt":
          return ancestorInfo.dlItemTagAutoclosing;
        case "button":
          return ancestorInfo.buttonTagInScope;
        case "a":
          return ancestorInfo.aTagInScope;
        case "nobr":
          return ancestorInfo.nobrTagInScope;
      }
      return null;
    }, didWarn$1 = {};
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
      ancestorInfo = ancestorInfo || emptyAncestorInfo;
      var parentInfo = ancestorInfo.current, parentTag = parentInfo && parentInfo.tag;
      null != childText && (null != childTag && error("validateDOMNesting: when childText is passed, childTag should be null"), childTag = "#text");
      ancestorInfo = (parentInfo = isTagValidWithParent(childTag, parentTag) ? null : parentInfo) ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
      if (ancestorInfo = parentInfo || ancestorInfo) {
        ancestorInfo = ancestorInfo.tag, parentTag = !!parentInfo + "|" + childTag + "|" + ancestorInfo, didWarn$1[parentTag] || (didWarn$1[parentTag] = !0, parentTag = "", "#text" === childTag ? /\S/.test(childText) ? childText = "Text nodes" : (childText = "Whitespace text nodes", parentTag = " Make sure you don't have any extra whitespace between tags on each line of your source code.") : childText = "\x3c" + childTag + "\x3e", parentInfo ? (parentInfo = "", "table" === ancestorInfo && "tr" === 
        childTag && (parentInfo += " Add a \x3ctbody\x3e, \x3cthead\x3e or \x3ctfoot\x3e to your code to match the DOM tree generated by the browser."), error("validateDOMNesting(...): %s cannot appear as a child of \x3c%s\x3e.%s%s", childText, ancestorInfo, parentTag, parentInfo)) : error("validateDOMNesting(...): %s cannot appear as a descendant of \x3c%s\x3e.", childText, ancestorInfo));
      }
    };
    var SUSPENSE_START_DATA = "$", SUSPENSE_END_DATA = "/$", SUSPENSE_PENDING_START_DATA = "$?", SUSPENSE_FALLBACK_START_DATA = "$!", eventsEnabled = null, selectionInformation = null, scheduleTimeout = "function" === typeof setTimeout ? setTimeout : void 0, cancelTimeout = "function" === typeof clearTimeout ? clearTimeout : void 0, localPromise = "function" === typeof Promise ? Promise : void 0, scheduleMicrotask = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof localPromise ? 
    function(callback) {
      return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
    } : scheduleTimeout, randomKey = Math.random().toString(36).slice(2), internalInstanceKey = "__reactFiber$" + randomKey, internalPropsKey = "__reactProps$" + randomKey, internalContainerInstanceKey = "__reactContainer$" + randomKey, internalEventHandlersKey = "__reactEvents$" + randomKey, internalEventHandlerListenersKey = "__reactListeners$" + randomKey, internalEventHandlesSetKey = "__reactHandles$" + randomKey, loggedTypeFailures = {}, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame, 
    valueStack = [];
    var fiberStack = [];
    var index = -1;
    var warnedAboutMissingGetChildContext = {};
    var emptyContextObject = {};
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject), didPerformWorkStackCursor = createCursor(!1), previousContext = emptyContextObject, syncQueue = null, includesLegacySyncCallbacks = !1, isFlushingSyncQueue = !1, forkStack = [], forkStackIndex = 0, treeForkProvider = null, treeForkCount = 0, idStack = [], idStackIndex = 0, treeContextProvider = null, treeContextId = 1, treeContextOverflow = "", hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = !1, didSuspendOrErrorDEV = 
    !1, hydrationErrors = null, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig, ReactStrictModeWarnings = {recordUnsafeLifecycleWarnings:function(fiber, instance) {
    }, flushPendingUnsafeLifecycleWarnings:function() {
    }, recordLegacyContextWarning:function(fiber, instance) {
    }, flushLegacyContextWarning:function() {
    }, discardPendingWarnings:function() {
    }}, setToSortedString = function(set) {
      var array = [];
      set.forEach(function(value) {
        array.push(value);
      });
      return array.sort().join(", ");
    }, pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
      didWarnAboutUnsafeLifecycles.has(fiber.type) || ("function" === typeof instance.componentWillMount && !0 !== instance.componentWillMount.__suppressDeprecationWarning && pendingComponentWillMountWarnings.push(fiber), fiber.mode & 8 && "function" === typeof instance.UNSAFE_componentWillMount && pendingUNSAFE_ComponentWillMountWarnings.push(fiber), "function" === typeof instance.componentWillReceiveProps && !0 !== instance.componentWillReceiveProps.__suppressDeprecationWarning && pendingComponentWillReceivePropsWarnings.push(fiber), 
      fiber.mode & 8 && "function" === typeof instance.UNSAFE_componentWillReceiveProps && pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber), "function" === typeof instance.componentWillUpdate && !0 !== instance.componentWillUpdate.__suppressDeprecationWarning && pendingComponentWillUpdateWarnings.push(fiber), fiber.mode & 8 && "function" === typeof instance.UNSAFE_componentWillUpdate && pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
      var componentWillMountUniqueNames = new Set();
      0 < pendingComponentWillMountWarnings.length && (pendingComponentWillMountWarnings.forEach(function(fiber) {
        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      }), pendingComponentWillMountWarnings = []);
      var UNSAFE_componentWillMountUniqueNames = new Set();
      0 < pendingUNSAFE_ComponentWillMountWarnings.length && (pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      }), pendingUNSAFE_ComponentWillMountWarnings = []);
      var componentWillReceivePropsUniqueNames = new Set();
      0 < pendingComponentWillReceivePropsWarnings.length && (pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      }), pendingComponentWillReceivePropsWarnings = []);
      var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
      0 < pendingUNSAFE_ComponentWillReceivePropsWarnings.length && (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      }), pendingUNSAFE_ComponentWillReceivePropsWarnings = []);
      var componentWillUpdateUniqueNames = new Set();
      0 < pendingComponentWillUpdateWarnings.length && (pendingComponentWillUpdateWarnings.forEach(function(fiber) {
        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      }), pendingComponentWillUpdateWarnings = []);
      var UNSAFE_componentWillUpdateUniqueNames = new Set();
      0 < pendingUNSAFE_ComponentWillUpdateWarnings.length && (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      }), pendingUNSAFE_ComponentWillUpdateWarnings = []);
      if (0 < UNSAFE_componentWillMountUniqueNames.size) {
        var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
        error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
      }
      0 < UNSAFE_componentWillReceivePropsUniqueNames.size && (sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames), error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", 
      sortedNames));
      0 < UNSAFE_componentWillUpdateUniqueNames.size && (sortedNames = setToSortedString(UNSAFE_componentWillUpdateUniqueNames), error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", sortedNames));
      0 < componentWillMountUniqueNames.size && (sortedNames = setToSortedString(componentWillMountUniqueNames), warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", 
      sortedNames));
      0 < componentWillReceivePropsUniqueNames.size && (sortedNames = setToSortedString(componentWillReceivePropsUniqueNames), warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", 
      sortedNames));
      0 < componentWillUpdateUniqueNames.size && (sortedNames = setToSortedString(componentWillUpdateUniqueNames), warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", 
      sortedNames));
    };
    var pendingLegacyContextWarning = new Map(), didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
      var strictRoot = null;
      for (var node = fiber; null !== node;) {
        node.mode & 8 && (strictRoot = node), node = node.return;
      }
      null === strictRoot ? error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.") : !didWarnAboutLegacyContext.has(fiber.type) && (node = pendingLegacyContextWarning.get(strictRoot), null != fiber.type.contextTypes || null != fiber.type.childContextTypes || null !== instance && "function" === typeof instance.getChildContext) && (void 0 === node && (node = [], pendingLegacyContextWarning.set(strictRoot, node)), 
      node.push(fiber));
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
      pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
        if (0 !== fiberArray.length) {
          strictRoot = fiberArray[0];
          var uniqueNames = new Set();
          fiberArray.forEach(function(fiber) {
            uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutLegacyContext.add(fiber.type);
          });
          fiberArray = setToSortedString(uniqueNames);
          try {
            setCurrentFiber(strictRoot), error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", fiberArray);
          } finally {
            resetCurrentFiber();
          }
        }
      });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
      pendingComponentWillMountWarnings = [];
      pendingUNSAFE_ComponentWillMountWarnings = [];
      pendingComponentWillReceivePropsWarnings = [];
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
      pendingComponentWillUpdateWarnings = [];
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
      pendingLegacyContextWarning = new Map();
    };
    var valueCursor = createCursor(null);
    var rendererSigil = {};
    var currentlyRenderingFiber = null, lastContextDependency = null, lastFullyObservedContext = null, isDisallowedContextReadInDEV = !1, concurrentQueues = null, unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot, UpdateState = 0, ForceUpdate = 2, hasForceUpdate = !1;
    var didWarnUpdateInsideUpdate = !1;
    var currentlyProcessingQueue = null;
    var fakeInternalInstance = {}, emptyRefsObject = (new React.Component()).refs;
    var didWarnAboutStateAssignmentForComponent = new Set();
    var didWarnAboutUninitializedState = new Set();
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    var didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    var didWarnAboutDirectlyAssigningPropsToState = new Set();
    var didWarnAboutUndefinedDerivedState = new Set();
    var didWarnAboutContextTypeAndContextTypes = new Set();
    var didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    var warnOnInvalidCallback = function(callback, callerName) {
      if (null !== callback && "function" !== typeof callback) {
        var key = callerName + "_" + callback;
        didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback));
      }
    };
    var warnOnUndefinedDerivedState = function(type, partialState) {
      void 0 === partialState && (type = getComponentNameFromType(type) || "Component", didWarnAboutUndefinedDerivedState.has(type) || (didWarnAboutUndefinedDerivedState.add(type), error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", type)));
    };
    Object.defineProperty(fakeInternalInstance, "_processChildContext", {enumerable:!1, value:function() {
      throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
    }});
    Object.freeze(fakeInternalInstance);
    var classComponentUpdater = {isMounted:function(component) {
      var owner = ReactCurrentOwner.current;
      if (null !== owner && 1 === owner.tag) {
        var instance = owner.stateNode;
        instance._warnedAboutRefsInRender || error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(owner) || "A component");
        instance._warnedAboutRefsInRender = !0;
      }
      return (component = component._reactInternals) ? getNearestMountedFiber(component) === component : !1;
    }, enqueueSetState:function(inst, payload, callback) {
      inst = inst._reactInternals;
      var eventTime = requestEventTime(), lane = requestUpdateLane(inst), update = createUpdate(eventTime, lane);
      update.payload = payload;
      void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback, "setState"), update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      null !== payload && (scheduleUpdateOnFiber(payload, inst, lane, eventTime), entangleTransitions(payload, inst, lane));
      markStateUpdateScheduled(inst, lane);
    }, enqueueReplaceState:function(inst, payload, callback) {
      inst = inst._reactInternals;
      var eventTime = requestEventTime(), lane = requestUpdateLane(inst), update = createUpdate(eventTime, lane);
      update.tag = 1;
      update.payload = payload;
      void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback, "replaceState"), update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      null !== payload && (scheduleUpdateOnFiber(payload, inst, lane, eventTime), entangleTransitions(payload, inst, lane));
      markStateUpdateScheduled(inst, lane);
    }, enqueueForceUpdate:function(inst, callback) {
      inst = inst._reactInternals;
      var eventTime = requestEventTime(), lane = requestUpdateLane(inst), update = createUpdate(eventTime, lane);
      update.tag = ForceUpdate;
      void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback, "forceUpdate"), update.callback = callback);
      callback = enqueueUpdate(inst, update, lane);
      null !== callback && (scheduleUpdateOnFiber(callback, inst, lane, eventTime), entangleTransitions(callback, inst, lane));
      null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markForceUpdateScheduled && injectedProfilingHooks.markForceUpdateScheduled(inst, lane);
    }}, didWarnAboutMaps, warnForMissingKey = function(child, returnFiber) {
    };
    var didWarnAboutGenerators = didWarnAboutMaps = !1;
    var didWarnAboutStringRefs = {};
    var ownerHasKeyUseWarning = {};
    var ownerHasFunctionTypeWarning = {};
    warnForMissingKey = function(child, returnFiber) {
      if (null !== child && "object" === typeof child && child._store && !child._store.validated && null == child.key) {
        if ("object" !== typeof child._store) {
          throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        }
        child._store.validated = !0;
        child = getComponentNameFromFiber(returnFiber) || "Component";
        ownerHasKeyUseWarning[child] || (ownerHasKeyUseWarning[child] = !0, error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'));
      }
    };
    var reconcileChildFibers = ChildReconciler(!0), mountChildFibers = ChildReconciler(!1), NO_CONTEXT = {}, contextStackCursor$1 = createCursor(NO_CONTEXT), contextFiberStackCursor = createCursor(NO_CONTEXT), rootInstanceStackCursor = createCursor(NO_CONTEXT), SubtreeSuspenseContextMask = 1, InvisibleParentSuspenseContext = 1, ForceSuspenseFallback = 2, suspenseStackCursor = createCursor(0), NoFlags$1 = 0, HasEffect = 1, Insertion = 2, Layout = 4, Passive$1 = 8, workInProgressSources = [], ReactCurrentDispatcher$1 = 
    ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig, didWarnUncachedGetSnapshot;
    var didWarnAboutMismatchedHooksForComponent = new Set();
    var renderLanes = 0, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = !1, didScheduleRenderPhaseUpdateDuringThisPass = !1, localIdCounter = 0, globalClientIdCounter = 0, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = !1, isUpdatingOpaqueValueInRenderPhase = !1, ContextOnlyDispatcher = {readContext, useCallback:throwInvalidHookError, useContext:throwInvalidHookError, useEffect:throwInvalidHookError, 
    useImperativeHandle:throwInvalidHookError, useInsertionEffect:throwInvalidHookError, useLayoutEffect:throwInvalidHookError, useMemo:throwInvalidHookError, useReducer:throwInvalidHookError, useRef:throwInvalidHookError, useState:throwInvalidHookError, useDebugValue:throwInvalidHookError, useDeferredValue:throwInvalidHookError, useTransition:throwInvalidHookError, useMutableSource:throwInvalidHookError, useSyncExternalStore:throwInvalidHookError, useId:throwInvalidHookError, unstable_isNewReconciler:!1}, 
    HooksDispatcherOnMountInDEV = null, HooksDispatcherOnMountWithHookTypesInDEV = null, HooksDispatcherOnUpdateInDEV = null, HooksDispatcherOnRerenderInDEV = null, InvalidNestedHooksDispatcherOnMountInDEV = null, InvalidNestedHooksDispatcherOnUpdateInDEV = null, InvalidNestedHooksDispatcherOnRerenderInDEV = null, warnInvalidContextAccess = function() {
      error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    }, warnInvalidHookAccess = function() {
      error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {readContext:function(context) {
      return readContext(context);
    }, useCallback:function(callback, deps) {
      currentHookNameInDev = "useCallback";
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountCallback(callback, deps);
    }, useContext:function(context) {
      currentHookNameInDev = "useContext";
      mountHookTypesDev();
      return readContext(context);
    }, useEffect:function(create, deps) {
      currentHookNameInDev = "useEffect";
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountEffect(create, deps);
    }, useImperativeHandle:function(ref, create, deps) {
      currentHookNameInDev = "useImperativeHandle";
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountImperativeHandle(ref, create, deps);
    }, useInsertionEffect:function(create, deps) {
      currentHookNameInDev = "useInsertionEffect";
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountEffectImpl(4, Insertion, create, deps);
    }, useLayoutEffect:function(create, deps) {
      currentHookNameInDev = "useLayoutEffect";
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountLayoutEffect(create, deps);
    }, useMemo:function(create, deps) {
      currentHookNameInDev = "useMemo";
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    }, useReducer:function(reducer, initialArg, init) {
      currentHookNameInDev = "useReducer";
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    }, useRef:function(initialValue) {
      currentHookNameInDev = "useRef";
      mountHookTypesDev();
      return mountRef(initialValue);
    }, useState:function(initialState) {
      currentHookNameInDev = "useState";
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    }, useDebugValue:function(value, formatterFn) {
      currentHookNameInDev = "useDebugValue";
      mountHookTypesDev();
    }, useDeferredValue:function(value) {
      currentHookNameInDev = "useDeferredValue";
      mountHookTypesDev();
      return mountDeferredValue(value);
    }, useTransition:function() {
      currentHookNameInDev = "useTransition";
      mountHookTypesDev();
      return mountTransition();
    }, useMutableSource:function(source, getSnapshot, subscribe) {
      currentHookNameInDev = "useMutableSource";
      mountHookTypesDev();
    }, useSyncExternalStore:function(subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = "useSyncExternalStore";
      mountHookTypesDev();
      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    }, useId:function() {
      currentHookNameInDev = "useId";
      mountHookTypesDev();
      return mountId();
    }, unstable_isNewReconciler:!1};
    HooksDispatcherOnMountWithHookTypesInDEV = {readContext:function(context) {
      return readContext(context);
    }, useCallback:function(callback, deps) {
      currentHookNameInDev = "useCallback";
      updateHookTypesDev();
      return mountCallback(callback, deps);
    }, useContext:function(context) {
      currentHookNameInDev = "useContext";
      updateHookTypesDev();
      return readContext(context);
    }, useEffect:function(create, deps) {
      currentHookNameInDev = "useEffect";
      updateHookTypesDev();
      return mountEffect(create, deps);
    }, useImperativeHandle:function(ref, create, deps) {
      currentHookNameInDev = "useImperativeHandle";
      updateHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    }, useInsertionEffect:function(create, deps) {
      currentHookNameInDev = "useInsertionEffect";
      updateHookTypesDev();
      return mountEffectImpl(4, Insertion, create, deps);
    }, useLayoutEffect:function(create, deps) {
      currentHookNameInDev = "useLayoutEffect";
      updateHookTypesDev();
      return mountLayoutEffect(create, deps);
    }, useMemo:function(create, deps) {
      currentHookNameInDev = "useMemo";
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    }, useReducer:function(reducer, initialArg, init) {
      currentHookNameInDev = "useReducer";
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    }, useRef:function(initialValue) {
      currentHookNameInDev = "useRef";
      updateHookTypesDev();
      return mountRef(initialValue);
    }, useState:function(initialState) {
      currentHookNameInDev = "useState";
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    }, useDebugValue:function(value, formatterFn) {
      currentHookNameInDev = "useDebugValue";
      updateHookTypesDev();
    }, useDeferredValue:function(value) {
      currentHookNameInDev = "useDeferredValue";
      updateHookTypesDev();
      return mountDeferredValue(value);
    }, useTransition:function() {
      currentHookNameInDev = "useTransition";
      updateHookTypesDev();
      return mountTransition();
    }, useMutableSource:function(source, getSnapshot, subscribe) {
      currentHookNameInDev = "useMutableSource";
      updateHookTypesDev();
    }, useSyncExternalStore:function(subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = "useSyncExternalStore";
      updateHookTypesDev();
      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    }, useId:function() {
      currentHookNameInDev = "useId";
      updateHookTypesDev();
      return mountId();
    }, unstable_isNewReconciler:!1};
    HooksDispatcherOnUpdateInDEV = {readContext:function(context) {
      return readContext(context);
    }, useCallback:function(callback, deps) {
      currentHookNameInDev = "useCallback";
      updateHookTypesDev();
      return updateCallback(callback, deps);
    }, useContext:function(context) {
      currentHookNameInDev = "useContext";
      updateHookTypesDev();
      return readContext(context);
    }, useEffect:function(create, deps) {
      currentHookNameInDev = "useEffect";
      updateHookTypesDev();
      return updateEffectImpl(2048, Passive$1, create, deps);
    }, useImperativeHandle:function(ref, create, deps) {
      currentHookNameInDev = "useImperativeHandle";
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    }, useInsertionEffect:function(create, deps) {
      currentHookNameInDev = "useInsertionEffect";
      updateHookTypesDev();
      return updateEffectImpl(4, Insertion, create, deps);
    }, useLayoutEffect:function(create, deps) {
      currentHookNameInDev = "useLayoutEffect";
      updateHookTypesDev();
      return updateEffectImpl(4, Layout, create, deps);
    }, useMemo:function(create, deps) {
      currentHookNameInDev = "useMemo";
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    }, useReducer:function(reducer, initialArg, init) {
      currentHookNameInDev = "useReducer";
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    }, useRef:function(initialValue) {
      currentHookNameInDev = "useRef";
      updateHookTypesDev();
      return updateWorkInProgressHook().memoizedState;
    }, useState:function(initialState) {
      currentHookNameInDev = "useState";
      updateHookTypesDev();
      initialState = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
      try {
        return updateReducer(basicStateReducer);
      } finally {
        ReactCurrentDispatcher$1.current = initialState;
      }
    }, useDebugValue:function(value, formatterFn) {
      currentHookNameInDev = "useDebugValue";
      updateHookTypesDev();
    }, useDeferredValue:function(value) {
      currentHookNameInDev = "useDeferredValue";
      updateHookTypesDev();
      return updateDeferredValue(value);
    }, useTransition:function() {
      currentHookNameInDev = "useTransition";
      updateHookTypesDev();
      return updateTransition();
    }, useMutableSource:function(source, getSnapshot, subscribe) {
      currentHookNameInDev = "useMutableSource";
      updateHookTypesDev();
    }, useSyncExternalStore:function(subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = "useSyncExternalStore";
      updateHookTypesDev();
      return updateSyncExternalStore(subscribe, getSnapshot);
    }, useId:function() {
      currentHookNameInDev = "useId";
      updateHookTypesDev();
      return updateWorkInProgressHook().memoizedState;
    }, unstable_isNewReconciler:!1};
    HooksDispatcherOnRerenderInDEV = {readContext:function(context) {
      return readContext(context);
    }, useCallback:function(callback, deps) {
      currentHookNameInDev = "useCallback";
      updateHookTypesDev();
      return updateCallback(callback, deps);
    }, useContext:function(context) {
      currentHookNameInDev = "useContext";
      updateHookTypesDev();
      return readContext(context);
    }, useEffect:function(create, deps) {
      currentHookNameInDev = "useEffect";
      updateHookTypesDev();
      return updateEffectImpl(2048, Passive$1, create, deps);
    }, useImperativeHandle:function(ref, create, deps) {
      currentHookNameInDev = "useImperativeHandle";
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    }, useInsertionEffect:function(create, deps) {
      currentHookNameInDev = "useInsertionEffect";
      updateHookTypesDev();
      return updateEffectImpl(4, Insertion, create, deps);
    }, useLayoutEffect:function(create, deps) {
      currentHookNameInDev = "useLayoutEffect";
      updateHookTypesDev();
      return updateEffectImpl(4, Layout, create, deps);
    }, useMemo:function(create, deps) {
      currentHookNameInDev = "useMemo";
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    }, useReducer:function(reducer, initialArg, init) {
      currentHookNameInDev = "useReducer";
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    }, useRef:function(initialValue) {
      currentHookNameInDev = "useRef";
      updateHookTypesDev();
      return updateWorkInProgressHook().memoizedState;
    }, useState:function(initialState) {
      currentHookNameInDev = "useState";
      updateHookTypesDev();
      initialState = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
      try {
        return rerenderReducer(basicStateReducer);
      } finally {
        ReactCurrentDispatcher$1.current = initialState;
      }
    }, useDebugValue:function(value, formatterFn) {
      currentHookNameInDev = "useDebugValue";
      updateHookTypesDev();
    }, useDeferredValue:function(value) {
      currentHookNameInDev = "useDeferredValue";
      updateHookTypesDev();
      return rerenderDeferredValue(value);
    }, useTransition:function() {
      currentHookNameInDev = "useTransition";
      updateHookTypesDev();
      return rerenderTransition();
    }, useMutableSource:function(source, getSnapshot, subscribe) {
      currentHookNameInDev = "useMutableSource";
      updateHookTypesDev();
    }, useSyncExternalStore:function(subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = "useSyncExternalStore";
      updateHookTypesDev();
      return updateSyncExternalStore(subscribe, getSnapshot);
    }, useId:function() {
      currentHookNameInDev = "useId";
      updateHookTypesDev();
      return updateWorkInProgressHook().memoizedState;
    }, unstable_isNewReconciler:!1};
    InvalidNestedHooksDispatcherOnMountInDEV = {readContext:function(context) {
      warnInvalidContextAccess();
      return readContext(context);
    }, useCallback:function(callback, deps) {
      currentHookNameInDev = "useCallback";
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountCallback(callback, deps);
    }, useContext:function(context) {
      currentHookNameInDev = "useContext";
      warnInvalidHookAccess();
      mountHookTypesDev();
      return readContext(context);
    }, useEffect:function(create, deps) {
      currentHookNameInDev = "useEffect";
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountEffect(create, deps);
    }, useImperativeHandle:function(ref, create, deps) {
      currentHookNameInDev = "useImperativeHandle";
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    }, useInsertionEffect:function(create, deps) {
      currentHookNameInDev = "useInsertionEffect";
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountEffectImpl(4, Insertion, create, deps);
    }, useLayoutEffect:function(create, deps) {
      currentHookNameInDev = "useLayoutEffect";
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountLayoutEffect(create, deps);
    }, useMemo:function(create, deps) {
      currentHookNameInDev = "useMemo";
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    }, useReducer:function(reducer, initialArg, init) {
      currentHookNameInDev = "useReducer";
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    }, useRef:function(initialValue) {
      currentHookNameInDev = "useRef";
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountRef(initialValue);
    }, useState:function(initialState) {
      currentHookNameInDev = "useState";
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    }, useDebugValue:function(value, formatterFn) {
      currentHookNameInDev = "useDebugValue";
      warnInvalidHookAccess();
      mountHookTypesDev();
    }, useDeferredValue:function(value) {
      currentHookNameInDev = "useDeferredValue";
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDeferredValue(value);
    }, useTransition:function() {
      currentHookNameInDev = "useTransition";
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountTransition();
    }, useMutableSource:function(source, getSnapshot, subscribe) {
      currentHookNameInDev = "useMutableSource";
      warnInvalidHookAccess();
      mountHookTypesDev();
    }, useSyncExternalStore:function(subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = "useSyncExternalStore";
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    }, useId:function() {
      currentHookNameInDev = "useId";
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountId();
    }, unstable_isNewReconciler:!1};
    InvalidNestedHooksDispatcherOnUpdateInDEV = {readContext:function(context) {
      warnInvalidContextAccess();
      return readContext(context);
    }, useCallback:function(callback, deps) {
      currentHookNameInDev = "useCallback";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    }, useContext:function(context) {
      currentHookNameInDev = "useContext";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context);
    }, useEffect:function(create, deps) {
      currentHookNameInDev = "useEffect";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffectImpl(2048, Passive$1, create, deps);
    }, useImperativeHandle:function(ref, create, deps) {
      currentHookNameInDev = "useImperativeHandle";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    }, useInsertionEffect:function(create, deps) {
      currentHookNameInDev = "useInsertionEffect";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffectImpl(4, Insertion, create, deps);
    }, useLayoutEffect:function(create, deps) {
      currentHookNameInDev = "useLayoutEffect";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffectImpl(4, Layout, create, deps);
    }, useMemo:function(create, deps) {
      currentHookNameInDev = "useMemo";
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    }, useReducer:function(reducer, initialArg, init) {
      currentHookNameInDev = "useReducer";
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    }, useRef:function(initialValue) {
      currentHookNameInDev = "useRef";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateWorkInProgressHook().memoizedState;
    }, useState:function(initialState) {
      currentHookNameInDev = "useState";
      warnInvalidHookAccess();
      updateHookTypesDev();
      initialState = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
      try {
        return updateReducer(basicStateReducer);
      } finally {
        ReactCurrentDispatcher$1.current = initialState;
      }
    }, useDebugValue:function(value, formatterFn) {
      currentHookNameInDev = "useDebugValue";
      warnInvalidHookAccess();
      updateHookTypesDev();
    }, useDeferredValue:function(value) {
      currentHookNameInDev = "useDeferredValue";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDeferredValue(value);
    }, useTransition:function() {
      currentHookNameInDev = "useTransition";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateTransition();
    }, useMutableSource:function(source, getSnapshot, subscribe) {
      currentHookNameInDev = "useMutableSource";
      warnInvalidHookAccess();
      updateHookTypesDev();
    }, useSyncExternalStore:function(subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = "useSyncExternalStore";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateSyncExternalStore(subscribe, getSnapshot);
    }, useId:function() {
      currentHookNameInDev = "useId";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateWorkInProgressHook().memoizedState;
    }, unstable_isNewReconciler:!1};
    InvalidNestedHooksDispatcherOnRerenderInDEV = {readContext:function(context) {
      warnInvalidContextAccess();
      return readContext(context);
    }, useCallback:function(callback, deps) {
      currentHookNameInDev = "useCallback";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    }, useContext:function(context) {
      currentHookNameInDev = "useContext";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context);
    }, useEffect:function(create, deps) {
      currentHookNameInDev = "useEffect";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffectImpl(2048, Passive$1, create, deps);
    }, useImperativeHandle:function(ref, create, deps) {
      currentHookNameInDev = "useImperativeHandle";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    }, useInsertionEffect:function(create, deps) {
      currentHookNameInDev = "useInsertionEffect";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffectImpl(4, Insertion, create, deps);
    }, useLayoutEffect:function(create, deps) {
      currentHookNameInDev = "useLayoutEffect";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffectImpl(4, Layout, create, deps);
    }, useMemo:function(create, deps) {
      currentHookNameInDev = "useMemo";
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    }, useReducer:function(reducer, initialArg, init) {
      currentHookNameInDev = "useReducer";
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    }, useRef:function(initialValue) {
      currentHookNameInDev = "useRef";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateWorkInProgressHook().memoizedState;
    }, useState:function(initialState) {
      currentHookNameInDev = "useState";
      warnInvalidHookAccess();
      updateHookTypesDev();
      initialState = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
      try {
        return rerenderReducer(basicStateReducer);
      } finally {
        ReactCurrentDispatcher$1.current = initialState;
      }
    }, useDebugValue:function(value, formatterFn) {
      currentHookNameInDev = "useDebugValue";
      warnInvalidHookAccess();
      updateHookTypesDev();
    }, useDeferredValue:function(value) {
      currentHookNameInDev = "useDeferredValue";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderDeferredValue(value);
    }, useTransition:function() {
      currentHookNameInDev = "useTransition";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderTransition();
    }, useMutableSource:function(source, getSnapshot, subscribe) {
      currentHookNameInDev = "useMutableSource";
      warnInvalidHookAccess();
      updateHookTypesDev();
    }, useSyncExternalStore:function(subscribe, getSnapshot, getServerSnapshot) {
      currentHookNameInDev = "useSyncExternalStore";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateSyncExternalStore(subscribe, getSnapshot);
    }, useId:function() {
      currentHookNameInDev = "useId";
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateWorkInProgressHook().memoizedState;
    }, unstable_isNewReconciler:!1};
    var now$1 = Scheduler.unstable_now, commitTime = 0, layoutEffectStartTime = -1, profilerStartTime = -1, passiveEffectStartTime = -1, currentUpdateIsNested = !1, nestedUpdateScheduled = !1, PossiblyWeakMap$1 = "function" === typeof WeakMap ? WeakMap : Map, ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner, didReceiveUpdate = !1;
    var didWarnAboutBadClass = {};
    var didWarnAboutModulePatternComponent = {};
    var didWarnAboutContextTypeOnFunctionComponent = {};
    var didWarnAboutGetDerivedStateOnFunctionComponent = {};
    var didWarnAboutFunctionRefs = {};
    var didWarnAboutReassigningProps = !1;
    var didWarnAboutRevealOrder = {};
    var didWarnAboutTailOptions = {};
    var SUSPENDED_MARKER = {dehydrated:null, treeContext:null, retryLane:0}, hasWarnedAboutUsingNoValuePropOnContextProvider = !1, hasWarnedAboutUsingContextAsConsumer = !1;
    var appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
      for (needsVisibilityToggle = workInProgress.child; null !== needsVisibilityToggle;) {
        if (5 === needsVisibilityToggle.tag || 6 === needsVisibilityToggle.tag) {
          parent.appendChild(needsVisibilityToggle.stateNode);
        } else if (4 !== needsVisibilityToggle.tag && null !== needsVisibilityToggle.child) {
          needsVisibilityToggle.child.return = needsVisibilityToggle;
          needsVisibilityToggle = needsVisibilityToggle.child;
          continue;
        }
        if (needsVisibilityToggle === workInProgress) {
          break;
        }
        for (; null === needsVisibilityToggle.sibling;) {
          if (null === needsVisibilityToggle.return || needsVisibilityToggle.return === workInProgress) {
            return;
          }
          needsVisibilityToggle = needsVisibilityToggle.return;
        }
        needsVisibilityToggle.sibling.return = needsVisibilityToggle.return;
        needsVisibilityToggle = needsVisibilityToggle.sibling;
      }
    };
    var updateHostContainer = function(current, workInProgress) {
    };
    var updateHostComponent$1 = function(current, workInProgress, type, newProps, rootContainerInstance) {
      var oldProps = current.memoizedProps;
      if (oldProps !== newProps) {
        rootContainerInstance = workInProgress.stateNode;
        var currentHostContext = requiredContext(contextStackCursor$1.current);
        typeof newProps.children === typeof oldProps.children || "string" !== typeof newProps.children && "number" !== typeof newProps.children || (current = "" + newProps.children, currentHostContext = updatedAncestorInfo(currentHostContext.ancestorInfo, type), validateDOMNesting(null, current, currentHostContext));
        validatePropertiesInDevelopment(type, newProps);
        current = null;
        switch(type) {
          case "input":
            oldProps = getHostProps(rootContainerInstance, oldProps);
            newProps = getHostProps(rootContainerInstance, newProps);
            current = [];
            break;
          case "select":
            oldProps = assign({}, oldProps, {value:void 0});
            newProps = assign({}, newProps, {value:void 0});
            current = [];
            break;
          case "textarea":
            oldProps = getHostProps$2(rootContainerInstance, oldProps);
            newProps = getHostProps$2(rootContainerInstance, newProps);
            current = [];
            break;
          default:
            "function" !== typeof oldProps.onClick && "function" === typeof newProps.onClick && (rootContainerInstance.onclick = noop);
        }
        assertValidProps(type, newProps);
        type = null;
        for (propKey in oldProps) {
          if (!newProps.hasOwnProperty(propKey) && oldProps.hasOwnProperty(propKey) && null != oldProps[propKey]) {
            if ("style" === propKey) {
              for (styleName in currentHostContext = oldProps[propKey], currentHostContext) {
                currentHostContext.hasOwnProperty(styleName) && (type || (type = {}), type[styleName] = "");
              }
            } else {
              "dangerouslySetInnerHTML" !== propKey && "children" !== propKey && "suppressContentEditableWarning" !== propKey && "suppressHydrationWarning" !== propKey && "autoFocus" !== propKey && (registrationNameDependencies.hasOwnProperty(propKey) ? current || (current = []) : (current = current || []).push(propKey, null));
            }
          }
        }
        for (propKey in newProps) {
          var nextProp = newProps[propKey];
          currentHostContext = null != oldProps ? oldProps[propKey] : void 0;
          if (newProps.hasOwnProperty(propKey) && nextProp !== currentHostContext && (null != nextProp || null != currentHostContext)) {
            if ("style" === propKey) {
              if (nextProp && Object.freeze(nextProp), currentHostContext) {
                for (styleName in currentHostContext) {
                  !currentHostContext.hasOwnProperty(styleName) || nextProp && nextProp.hasOwnProperty(styleName) || (type || (type = {}), type[styleName] = "");
                }
                for (styleName in nextProp) {
                  nextProp.hasOwnProperty(styleName) && currentHostContext[styleName] !== nextProp[styleName] && (type || (type = {}), type[styleName] = nextProp[styleName]);
                }
              } else {
                type || (current || (current = []), current.push(propKey, type)), type = nextProp;
              }
            } else {
              "dangerouslySetInnerHTML" === propKey ? (nextProp = nextProp ? nextProp.__html : void 0, currentHostContext = currentHostContext ? currentHostContext.__html : void 0, null != nextProp && currentHostContext !== nextProp && (current = current || []).push(propKey, nextProp)) : "children" === propKey ? "string" !== typeof nextProp && "number" !== typeof nextProp || (current = current || []).push(propKey, "" + nextProp) : "suppressContentEditableWarning" !== propKey && "suppressHydrationWarning" !== 
              propKey && (registrationNameDependencies.hasOwnProperty(propKey) ? (null != nextProp && ("function" !== typeof nextProp && warnForInvalidEventListener(propKey, nextProp), "onScroll" === propKey && listenToNonDelegatedEvent("scroll", rootContainerInstance)), current || currentHostContext === nextProp || (current = [])) : (current = current || []).push(propKey, nextProp));
            }
          }
        }
        if (type) {
          var propKey = type;
          if (rootContainerInstance = newProps.style) {
            var styleName = expandShorthandMap(propKey);
            rootContainerInstance = expandShorthandMap(rootContainerInstance);
            oldProps = {};
            for (updatePayload in styleName) {
              newProps = styleName[updatePayload], (currentHostContext = rootContainerInstance[updatePayload]) && newProps !== currentHostContext && (nextProp = newProps + "," + currentHostContext, oldProps[nextProp] || (oldProps[nextProp] = !0, nextProp = propKey[newProps], error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", 
              null == nextProp || "boolean" === typeof nextProp || "" === nextProp ? "Removing" : "Updating", newProps, currentHostContext)));
            }
          }
          (current = current || []).push("style", type);
        }
        var updatePayload = current;
        if (workInProgress.updateQueue = updatePayload) {
          workInProgress.flags |= 4;
        }
      }
    };
    var updateHostText$1 = function(current, workInProgress, oldText, newText) {
      oldText !== newText && (workInProgress.flags |= 4);
    };
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    var offscreenSubtreeIsHidden = !1, offscreenSubtreeWasHidden = !1, PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set, nextEffect = null, inProgressLanes = null, inProgressRoot = null, shouldFireAfterActiveInstanceBlur = !1, hostParent = null, hostParentIsContainer = !1;
    if ("function" === typeof Symbol && Symbol.for) {
      var symbolFor = Symbol.for;
      symbolFor("selector.component");
      symbolFor("selector.has_pseudo_class");
      symbolFor("selector.role");
      symbolFor("selector.test_id");
      symbolFor("selector.text");
    }
    var commitHooks = [], ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue, ceil = Math.ceil, ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue, NoContext = 0, RenderContext = 2, CommitContext = 4, RootInProgress = 0, RootFatalErrored = 1, RootErrored = 2, RootSuspended = 
    3, RootSuspendedWithDelay = 4, RootCompleted = 5, RootDidNotComplete = 6, executionContext = NoContext, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = 0, subtreeRenderLanes = 0, subtreeRenderLanesCursor = createCursor(0), workInProgressRootExitStatus = RootInProgress, workInProgressRootFatalError = null, workInProgressRootSkippedLanes = 0, workInProgressRootInterleavedUpdatedLanes = 0, workInProgressRootPingedLanes = 0, workInProgressRootConcurrentErrors = null, 
    workInProgressRootRecoverableErrors = null, globalMostRecentFallbackTime = 0, FALLBACK_THROTTLE_MS = 500, workInProgressRootRenderTargetTime = Infinity, RENDER_TIMEOUT_MS = 500, workInProgressTransitions = null, hasUncaughtError = !1, firstUncaughtError = null, legacyErrorBoundariesThatAlreadyFailed = null, rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = 0, pendingPassiveProfilerEffects = [], NESTED_UPDATE_LIMIT = 50, nestedUpdateCount = 0, 
    rootWithNestedUpdates = null, isFlushingPassiveEffects = !1, didScheduleUpdateDuringPassiveEffects = !1, NESTED_PASSIVE_UPDATE_LIMIT = 50, nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, currentEventTime = -1, currentEventTransitionLane = 0, isRunningInsertionEffect = !1, didWarnStateUpdateForNotYetMountedComponent = null;
    var beginWork$1 = function(current, unitOfWork, lanes) {
      var originalWorkInProgressCopy = assignFiberPropertiesInDEV(null, unitOfWork);
      try {
        return beginWork(current, unitOfWork, lanes);
      } catch (originalError) {
        var JSCompiler_inline_result = didSuspendOrErrorDEV;
        if (JSCompiler_inline_result || null !== originalError && "object" === typeof originalError && "function" === typeof originalError.then) {
          throw originalError;
        }
        resetContextDependencies();
        resetHooksAfterThrow();
        unwindInterruptedWork(current, unitOfWork);
        assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
        unitOfWork.mode & 2 && startProfilerTimer(unitOfWork);
        invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);
        hasError && (current = clearCaughtError(), "object" === typeof current && null !== current && current._suppressLogging && "object" === typeof originalError && null !== originalError && !originalError._suppressLogging && (originalError._suppressLogging = !0));
        throw originalError;
      }
    };
    var didWarnAboutUpdateInRender = !1;
    var didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    var fakeActCallbackNode = {}, resolveFamily = null, failedBoundaries = null, setRefreshHandler = function(handler) {
      resolveFamily = handler;
    }, scheduleRefresh = function(root, update) {
      if (null !== resolveFamily) {
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
          scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
        });
      }
    }, scheduleRoot = function(root, element) {
      root.context === emptyContextObject && (flushPassiveEffects(), flushSync(function() {
        updateContainer(element, root, null, null);
      }));
    }, findHostInstancesForRefresh = function(root, families) {
      var hostInstances = new Set();
      families = new Set(families.map(function(family) {
        return family.current;
      }));
      findHostInstancesForMatchingFibersRecursively(root.current, families, hostInstances);
      return hostInstances;
    };
    var hasBadMapPolyfill = !1;
    try {
      var nonExtensibleObject = Object.preventExtensions({});
      new Map([[nonExtensibleObject, null]]);
      new Set([nonExtensibleObject]);
    } catch (e) {
      hasBadMapPolyfill = !0;
    }
    var createFiber = function(tag, pendingProps, key, mode) {
      return new FiberNode(tag, pendingProps, key, mode);
    };
    var didWarnAboutNestedUpdates = !1;
    var didWarnAboutFindNodeInStrictMode = {};
    var shouldErrorImpl = function(fiber) {
      return null;
    }, shouldSuspendImpl = function(fiber) {
      return !1;
    }, overrideHookState = null, overrideHookStateDeletePath = null, overrideHookStateRenamePath = null, overrideProps = null, overridePropsDeletePath = null, overridePropsRenamePath = null, scheduleUpdate = null, setErrorHandler = null, setSuspenseHandler = null, copyWithDeleteImpl = function(obj, path, index) {
      var key = path[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
      if (index + 1 === path.length) {
        return isArrayImpl(updated) ? updated.splice(key, 1) : delete updated[key], updated;
      }
      updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
      return updated;
    }, copyWithRenameImpl = function(obj, oldPath, newPath, index) {
      var oldKey = oldPath[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
      index + 1 === oldPath.length ? (updated[newPath[index]] = updated[oldKey], isArrayImpl(updated) ? updated.splice(oldKey, 1) : delete updated[oldKey]) : updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);
      return updated;
    }, copyWithRename = function(obj, oldPath, newPath) {
      if (oldPath.length !== newPath.length) {
        warn("copyWithRename() expects paths of the same length");
      } else {
        for (var i = 0; i < newPath.length - 1; i++) {
          if (oldPath[i] !== newPath[i]) {
            warn("copyWithRename() expects paths to be the same except for the deepest key");
            return;
          }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
      }
    }, copyWithSetImpl = function(obj, path, index, value) {
      if (index >= path.length) {
        return value;
      }
      var key = path[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
      updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
      return updated;
    }, findHook = function(fiber, id) {
      for (fiber = fiber.memoizedState; null !== fiber && 0 < id;) {
        fiber = fiber.next, id--;
      }
      return fiber;
    };
    overrideHookState = function(fiber, id, path, value) {
      id = findHook(fiber, id);
      null !== id && (path = copyWithSetImpl(id.memoizedState, path, 0, value), id.memoizedState = path, id.baseState = path, fiber.memoizedProps = assign({}, fiber.memoizedProps), path = markUpdateLaneFromFiberToRoot(fiber, SyncLane), null !== path && scheduleUpdateOnFiber(path, fiber, SyncLane, -1));
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
      id = findHook(fiber, id);
      null !== id && (path = copyWithDeleteImpl(id.memoizedState, path, 0), id.memoizedState = path, id.baseState = path, fiber.memoizedProps = assign({}, fiber.memoizedProps), path = markUpdateLaneFromFiberToRoot(fiber, SyncLane), null !== path && scheduleUpdateOnFiber(path, fiber, SyncLane, -1));
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
      id = findHook(fiber, id);
      null !== id && (oldPath = copyWithRename(id.memoizedState, oldPath, newPath), id.memoizedState = oldPath, id.baseState = oldPath, fiber.memoizedProps = assign({}, fiber.memoizedProps), oldPath = markUpdateLaneFromFiberToRoot(fiber, SyncLane), null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, SyncLane, -1));
    };
    overrideProps = function(fiber, path, value) {
      fiber.pendingProps = copyWithSetImpl(fiber.memoizedProps, path, 0, value);
      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
      path = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
      null !== path && scheduleUpdateOnFiber(path, fiber, SyncLane, -1);
    };
    overridePropsDeletePath = function(fiber, path) {
      fiber.pendingProps = copyWithDeleteImpl(fiber.memoizedProps, path, 0);
      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
      path = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
      null !== path && scheduleUpdateOnFiber(path, fiber, SyncLane, -1);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
      fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
      oldPath = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
      null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, SyncLane, -1);
    };
    scheduleUpdate = function(fiber) {
      var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
      null !== root && scheduleUpdateOnFiber(root, fiber, SyncLane, -1);
    };
    setErrorHandler = function(newShouldErrorImpl) {
      shouldErrorImpl = newShouldErrorImpl;
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
      shouldSuspendImpl = newShouldSuspendImpl;
    };
    var defaultOnRecoverableError = "function" === typeof reportError ? reportError : function(error) {
      console.error(error);
    };
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children, JSCompiler_OptimizeArgumentsArray_p2) {
      var root = this._internalRoot;
      if (null === root) {
        throw Error("Cannot update an unmounted root.");
      }
      "function" === typeof JSCompiler_OptimizeArgumentsArray_p2 ? error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().") : isValidContainer(JSCompiler_OptimizeArgumentsArray_p2) ? error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.") : "undefined" !== typeof JSCompiler_OptimizeArgumentsArray_p2 && 
      error("You passed a second argument to root.render(...) but it only accepts one argument.");
      JSCompiler_OptimizeArgumentsArray_p2 = root.containerInfo;
      if (8 !== JSCompiler_OptimizeArgumentsArray_p2.nodeType) {
        var hostInstance = findHostInstanceWithNoPortals(root.current);
        hostInstance && hostInstance.parentNode !== JSCompiler_OptimizeArgumentsArray_p2 && error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
      }
      updateContainer(children, root, null, null);
    };
    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function(JSCompiler_OptimizeArgumentsArray_p3) {
      "function" === typeof JSCompiler_OptimizeArgumentsArray_p3 && error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
      var root = this._internalRoot;
      null !== root && (this._internalRoot = null, JSCompiler_OptimizeArgumentsArray_p3 = root.containerInfo, (executionContext & (RenderContext | CommitContext)) !== NoContext && error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."), flushSync(function() {
        updateContainer(null, root, null, null);
      }), JSCompiler_OptimizeArgumentsArray_p3[internalContainerInstanceKey] = null);
    };
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function(target) {
      if (target) {
        var updatePriority = getCurrentUpdatePriority$1();
        target = {blockedOn:null, target, priority:updatePriority};
        for (var i = 0; i < queuedExplicitHydrationTargets.length && 0 !== updatePriority && updatePriority < queuedExplicitHydrationTargets[i].priority; i++) {
        }
        queuedExplicitHydrationTargets.splice(i, 0, target);
        0 === i && attemptExplicitHydrationTarget(target);
      }
    };
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings = function(container) {
      if (container._reactRootContainer && 8 !== container.nodeType) {
        var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
        hostInstance && hostInstance.parentNode !== container && error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
      }
      hostInstance = !!container._reactRootContainer;
      var rootEl = getReactRootElementInContainer(container);
      rootEl && getInstanceFromNode(rootEl) && !hostInstance && error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
      1 === container.nodeType && container.tagName && "BODY" === container.tagName.toUpperCase() && error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    var _attemptSynchronousHydration = function(fiber) {
      switch(fiber.tag) {
        case 3:
          var root = fiber.stateNode;
          if (root.current.memoizedState.isDehydrated) {
            var lanes = getHighestPriorityLanes(root.pendingLanes);
            flushRoot(root, lanes);
          }
          break;
        case 13:
          flushSync(function() {
            var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
            if (null !== root) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);
            }
          }), markRetryLaneIfNotHydrated(fiber, SyncLane);
      }
    };
    var attemptContinuousHydration = function(fiber) {
      if (13 === fiber.tag) {
        var lane = SelectiveHydrationLane, root = markUpdateLaneFromFiberToRoot(fiber, lane);
        if (null !== root) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
      }
    };
    var attemptHydrationAtCurrentPriority = function(fiber) {
      if (13 === fiber.tag) {
        var lane = requestUpdateLane(fiber), root = markUpdateLaneFromFiberToRoot(fiber, lane);
        if (null !== root) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
      }
    };
    var getCurrentUpdatePriority$1 = function() {
      return currentUpdatePriority;
    };
    var attemptHydrationAtPriority = function(priority, fn) {
      var previousPriority = currentUpdatePriority;
      try {
        return currentUpdatePriority = priority, fn();
      } finally {
        currentUpdatePriority = previousPriority;
      }
    };
    "function" === typeof Map && null != Map.prototype && "function" === typeof Map.prototype.forEach && "function" === typeof Set && null != Set.prototype && "function" === typeof Set.prototype.clear && "function" === typeof Set.prototype.forEach || error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    restoreImpl = function(domElement, tag, props) {
      switch(tag) {
        case "input":
          updateWrapper(domElement, props);
          tag = props.name;
          if ("radio" === props.type && null != tag) {
            for (props = domElement; props.parentNode;) {
              props = props.parentNode;
            }
            props = props.querySelectorAll("input[name\x3d" + JSON.stringify("" + tag) + '][type\x3d"radio"]');
            for (tag = 0; tag < props.length; tag++) {
              var otherNode = props[tag];
              if (otherNode !== domElement && otherNode.form === domElement.form) {
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          break;
        case "textarea":
          updateWrapper$1(domElement, props);
          break;
        case "select":
          tag = props.value, null != tag && updateOptions(domElement, !!props.multiple, tag, !1);
      }
    };
    (function(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
      batchedUpdatesImpl = _batchedUpdatesImpl;
      flushSyncImpl = _flushSyncImpl;
    })(batchedUpdates$1, function(fn, a, b, c, d) {
      var previousPriority = currentUpdatePriority, prevTransition = ReactCurrentBatchConfig$3.transition;
      try {
        return ReactCurrentBatchConfig$3.transition = null, currentUpdatePriority = DiscreteEventPriority, fn(a, b, c, d);
      } finally {
        currentUpdatePriority = previousPriority, ReactCurrentBatchConfig$3.transition = prevTransition, executionContext === NoContext && resetRenderTimer();
      }
    }, flushSync);
    var Internals = {usingClientEntryPoint:!1, Events:[getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]};
    if (!function(devToolsConfig) {
      return injectInternals({bundleType:devToolsConfig.bundleType, version:devToolsConfig.version, rendererPackageName:devToolsConfig.rendererPackageName, rendererConfig:devToolsConfig.rendererConfig, overrideHookState, overrideHookStateDeletePath, overrideHookStateRenamePath, overrideProps, overridePropsDeletePath, overridePropsRenamePath, setErrorHandler, setSuspenseHandler, scheduleUpdate, currentDispatcherRef:ReactSharedInternals.ReactCurrentDispatcher, findHostInstanceByFiber, findFiberByHostInstance:devToolsConfig.findFiberByHostInstance || 
      emptyFindFiberByHostInstance, findHostInstancesForRefresh, scheduleRefresh, scheduleRoot, setRefreshHandler, getCurrentFiber:getCurrentFiberForDevTools, reconcilerVersion:"18.2.0"});
    }({findFiberByHostInstance:getClosestInstanceFromNode, bundleType:1, version:"18.2.0", rendererPackageName:"react-dom"}) && canUseDOM && window.top === window.self && (-1 < navigator.userAgent.indexOf("Chrome") && -1 === navigator.userAgent.indexOf("Edge") || -1 < navigator.userAgent.indexOf("Firefox"))) {
      var protocol = window.location.protocol;
      /^(https?|file):$/.test(protocol) && console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + ("file:" === protocol ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = function(children, container) {
      var key = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
      if (!isValidContainer(container)) {
        throw Error("Target container is not a DOM element.");
      }
      return createPortal(children, container, null, key);
    };
    exports.createRoot = function(container, options) {
      Internals.usingClientEntryPoint || error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
      if (!isValidContainer(container)) {
        throw Error("createRoot(...): Target container is not a DOM element.");
      }
      warnIfReactDOMContainerInDEV(container);
      var isStrictMode = !1, identifierPrefix = "", onRecoverableError = defaultOnRecoverableError;
      null !== options && void 0 !== options && (options.hydrate ? warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, \x3cApp /\x3e) instead.") : "object" === typeof options && null !== options && options.$$typeof === REACT_ELEMENT_TYPE && error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root \x3d createRoot(domContainer);\n  root.render(\x3cApp /\x3e);"), !0 === options.unstable_strictMode && 
      (isStrictMode = !0), void 0 !== options.identifierPrefix && (identifierPrefix = options.identifierPrefix), void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError));
      options = createFiberRoot(container, 1, !1, null, null, isStrictMode, !1, identifierPrefix, onRecoverableError);
      container[internalContainerInstanceKey] = options.current;
      listenToAllSupportedEvents(8 === container.nodeType ? container.parentNode : container);
      return new ReactDOMRoot(options);
    };
    exports.findDOMNode = function(componentOrElement) {
      var owner = ReactCurrentOwner$3.current;
      null !== owner && null !== owner.stateNode && (owner.stateNode._warnedAboutRefsInRender || error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component"), owner.stateNode._warnedAboutRefsInRender = !0);
      if (null == componentOrElement) {
        return null;
      }
      if (1 === componentOrElement.nodeType) {
        return componentOrElement;
      }
      owner = componentOrElement._reactInternals;
      if (void 0 === owner) {
        if ("function" === typeof componentOrElement.render) {
          throw Error("Unable to find node on an unmounted component.");
        }
        owner = Object.keys(componentOrElement).join(",");
        throw Error("Argument appears to not be a ReactComponent. Keys: " + owner);
      }
      componentOrElement = findCurrentHostFiber(owner);
      if (null === componentOrElement) {
        owner = null;
      } else {
        if (componentOrElement.mode & 8) {
          var componentName = getComponentNameFromFiber(owner) || "Component";
          if (!didWarnAboutFindNodeInStrictMode[componentName]) {
            didWarnAboutFindNodeInStrictMode[componentName] = !0;
            var previousFiber = current;
            try {
              setCurrentFiber(componentOrElement), owner.mode & 8 ? error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", "findDOMNode", "findDOMNode", componentName) : error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", 
              "findDOMNode", "findDOMNode", componentName);
            } finally {
              previousFiber ? setCurrentFiber(previousFiber) : resetCurrentFiber();
            }
          }
        }
        owner = componentOrElement.stateNode;
      }
      return owner;
    };
    exports.flushSync = function(fn) {
      (executionContext & (RenderContext | CommitContext)) !== NoContext && error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
      return flushSync(fn);
    };
    exports.hydrate = function(element, container, callback) {
      error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
      if (!isValidContainerLegacy(container)) {
        throw Error("Target container is not a DOM element.");
      }
      container[internalContainerInstanceKey] && void 0 === container._reactRootContainer && error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
      return legacyRenderSubtreeIntoContainer(null, element, container, !0, callback);
    };
    exports.hydrateRoot = function(container, initialChildren, options) {
      Internals.usingClientEntryPoint || error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
      if (!isValidContainer(container)) {
        throw Error("hydrateRoot(...): Target container is not a DOM element.");
      }
      warnIfReactDOMContainerInDEV(container);
      void 0 === initialChildren && error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, \x3cApp /\x3e)");
      var mutableSources = null != options && options.hydratedSources || null, isStrictMode = !1, identifierPrefix = "", onRecoverableError = defaultOnRecoverableError;
      null !== options && void 0 !== options && (!0 === options.unstable_strictMode && (isStrictMode = !0), void 0 !== options.identifierPrefix && (identifierPrefix = options.identifierPrefix), void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError));
      initialChildren = createHydrationContainer(initialChildren, null, container, 1, null != options ? options : null, isStrictMode, !1, identifierPrefix, onRecoverableError);
      container[internalContainerInstanceKey] = initialChildren.current;
      listenToAllSupportedEvents(container);
      if (mutableSources) {
        for (container = 0; container < mutableSources.length; container++) {
          options = initialChildren, isStrictMode = mutableSources[container], identifierPrefix = isStrictMode._getVersion, identifierPrefix = identifierPrefix(isStrictMode._source), null == options.mutableSourceEagerHydrationData ? options.mutableSourceEagerHydrationData = [isStrictMode, identifierPrefix] : options.mutableSourceEagerHydrationData.push(isStrictMode, identifierPrefix);
        }
      }
      return new ReactDOMHydrationRoot(initialChildren);
    };
    exports.render = function(element, container, callback) {
      error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
      if (!isValidContainerLegacy(container)) {
        throw Error("Target container is not a DOM element.");
      }
      container[internalContainerInstanceKey] && void 0 === container._reactRootContainer && error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
      return legacyRenderSubtreeIntoContainer(null, element, container, !1, callback);
    };
    exports.unmountComponentAtNode = function(container) {
      if (!isValidContainerLegacy(container)) {
        throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
      }
      container[internalContainerInstanceKey] && void 0 === container._reactRootContainer && error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
      if (container._reactRootContainer) {
        var rootEl = getReactRootElementInContainer(container);
        rootEl && !getInstanceFromNode(rootEl) && error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
        flushSync(function() {
          legacyRenderSubtreeIntoContainer(null, null, container, !1, function() {
            container._reactRootContainer = null;
            container[internalContainerInstanceKey] = null;
          });
        });
        return !0;
      }
      rootEl = getReactRootElementInContainer(container);
      rootEl = !(!rootEl || !getInstanceFromNode(rootEl));
      var isContainerReactRoot = 1 === container.nodeType && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
      rootEl && error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
      return !1;
    };
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_renderSubtreeIntoContainer = function(parentComponent, element, containerNode, callback) {
      error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
      if (!isValidContainerLegacy(containerNode)) {
        throw Error("Target container is not a DOM element.");
      }
      if (null == parentComponent || void 0 === parentComponent._reactInternals) {
        throw Error("parentComponent must be a valid React Component");
      }
      return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, !1, callback);
    };
    exports.version = "18.2.0";
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
  })();
};

//# sourceMappingURL=module$node_modules$react_dom$cjs$react_dom_development.js.map
